# This is derived from the WebGPU Shading Language spec draft (https://www.w3.org/TR/WGSL/),
# and is being used as reference.
parser:
  translation_unit:
    global_decl_or_directive*
  const_literal:
    int_literal
    uint_literal
    float_literal
    true
    false
  attribute:
    attr ident paren_left (literal_or_ident comma)* literal_or_ident paren_right
    attr ident
  literal_or_ident:
    float_literal
    int_literal
    uint_literal
    ident
  array_type_decl:
    attribute* array less_than type_decl (comma element_count_expression)? greater_than
  element_count_expression:
    int_literal
    uint_literal
    ident
  struct_decl:
    attribute* struct ident struct_body_decl
  struct_body_decl:
    brace_left (struct_member comma)* struct_member comma? brace_right
  struct_member:
    attribute* variable_ident_decl
  access_mode:
    read
    write
    read_write
  storage_class:
    function
    private
    workgroup
    uniform
    storage
  texture_sampler_types:
    sampler_type
    depth_texture_type
    sampled_texture_type less_than type_decl greater_than
    multisampled_texture_type less_than type_decl greater_than
    storage_texture_type less_than texel_format comma access_mode greater_than
  sampler_type:
    sampler
    sampler_comparison
  sampled_texture_type:
    texture_1d
    texture_2d
    texture_2d_array
    texture_3d
    texture_cube
    texture_cube_array
  multisampled_texture_type:
    texture_multisampled_2d
  storage_texture_type:
    texture_storage_1d
    texture_storage_2d
    texture_storage_2d_array
    texture_storage_3d
  depth_texture_type:
    texture_depth_2d
    texture_depth_2d_array
    texture_depth_cube
    texture_depth_cube_array
    texture_depth_multisampled_2d
  texel_format:
    r8unorm
    r8snorm
    r8uint
    r8sint
    r16uint
    r16sint
    r16float
    rg8unorm
    rg8snorm
    rg8uint
    rg8sint
    r32uint
    r32sint
    r32float
    rg16uint
    rg16sint
    rg16float
    rgba8unorm
    rgba8unorm_srgb
    rgba8snorm
    rgba8uint
    rgba8sint
    bgra8unorm
    bgra8unorm_srgb
    rgb10a2unorm
    rg11b10float
    rg32uint
    rg32sint
    rg32float
    rgba16uint
    rgba16sint
    rgba16float
    rgba32uint
    rgba32sint
    rgba32float
  type_alias:
    type ident equal type_decl
  type_decl:
    ident
    bool
    float32
    int32
    uint32
    vec2 less_than type_decl greater_than
    vec3 less_than type_decl greater_than
    vec4 less_than type_decl greater_than
    pointer less_than storage_class comma type_decl (comma access_mode)? greater_than
    array_type_decl
    mat2x2 less_than type_decl greater_than
    mat2x3 less_than type_decl greater_than
    mat2x4 less_than type_decl greater_than
    mat3x2 less_than type_decl greater_than
    mat3x3 less_than type_decl greater_than
    mat3x4 less_than type_decl greater_than
    mat4x2 less_than type_decl greater_than
    mat4x3 less_than type_decl greater_than
    mat4x4 less_than type_decl greater_than
    atomic less_than type_decl greater_than
    texture_sampler_types
  variable_statement:
    variable_decl
    variable_decl equal short_circuit_or_expression
    let (ident variable_ident_decl) equal short_circuit_or_expression
  variable_decl:
    var variable_qualifier? (ident variable_ident_decl)
  variable_ident_decl:
    ident colon attribute* type_decl
  variable_qualifier:
    less_than storage_class (comma access_mode)? greater_than
  global_variable_decl:
    attribute* variable_decl (equal const_expression)?
  global_constant_decl:
    attribute* let (ident variable_ident_decl) global_const_initializer?
  global_const_initializer:
    equal const_expression
  const_expression:
    type_decl paren_left ((const_expression comma)* const_expression comma?)? paren_right
    const_literal
  primary_expression:
    ident argument_expression_list?
    type_decl argument_expression_list
    const_literal
    paren_expression
    bitcast less_than type_decl greater_than paren_expression
  paren_expression:
    paren_left short_circuit_or_expression paren_right
  argument_expression_list:
    paren_left ((short_circuit_or_expression comma)* short_circuit_or_expression comma?)? paren_right
  postfix_expression:
    bracket_left short_circuit_or_expression bracket_right postfix_expression?
    period ident postfix_expression?
  unary_expression:
    singular_expression
    minus unary_expression
    bang unary_expression
    tilde unary_expression
    star unary_expression
    and unary_expression
  singular_expression:
    primary_expression postfix_expression?
  multiplicative_expression:
    unary_expression
    multiplicative_expression star unary_expression
    multiplicative_expression forward_slash unary_expression
    multiplicative_expression modulo unary_expression
  additive_expression:
    multiplicative_expression
    additive_expression plus multiplicative_expression
    additive_expression minus multiplicative_expression
  shift_expression:
    additive_expression
    shift_expression shift_left additive_expression
    shift_expression shift_right additive_expression
  relational_expression:
    shift_expression
    relational_expression less_than shift_expression
    relational_expression greater_than shift_expression
    relational_expression less_than_equal shift_expression
    relational_expression greater_than_equal shift_expression
  equality_expression:
    relational_expression
    relational_expression equal_equal relational_expression
    relational_expression not_equal relational_expression
  and_expression:
    equality_expression
    and_expression and equality_expression
  exclusive_or_expression:
    and_expression
    exclusive_or_expression xor and_expression
  inclusive_or_expression:
    exclusive_or_expression
    inclusive_or_expression or exclusive_or_expression
  short_circuit_and_expression:
    inclusive_or_expression
    short_circuit_and_expression and_and inclusive_or_expression
  short_circuit_or_expression:
    short_circuit_and_expression
    short_circuit_or_expression or_or short_circuit_and_expression
  compound_statement:
    brace_left statement* brace_right
  assignment_statement:
    (unary_expression underscore) equal short_circuit_or_expression
  if_statement:
    if paren_expression compound_statement elseif_statement? else_statement?
  elseif_statement:
    else_if paren_expression compound_statement elseif_statement?
  else_statement:
    else compound_statement
  switch_statement:
    switch paren_expression brace_left switch_body+ brace_right
  switch_body:
    case case_selectors colon brace_left case_body? brace_right
    default colon brace_left case_body? brace_right
  case_selectors:
    const_literal (comma const_literal)* comma?
  case_body:
    statement case_body?
    fallthrough semicolon
  loop_statement:
    loop brace_left statement* continuing_statement? brace_right
  for_statement:
    for paren_left for_header paren_right compound_statement
  for_header:
    (variable_statement assignment_statement func_call_statement)? semicolon short_circuit_or_expression? semicolon (assignment_statement func_call_statement)?
  break_statement:
    break
  continue_statement:
    continue
  continuing_statement:
    continuing compound_statement
  return_statement:
    return short_circuit_or_expression?
  func_call_statement:
    ident argument_expression_list
  statement:
    semicolon
    return_statement semicolon
    if_statement
    switch_statement
    loop_statement
    for_statement
    func_call_statement semicolon
    variable_statement semicolon
    break_statement semicolon
    continue_statement semicolon
    discard semicolon
    assignment_statement semicolon
    compound_statement
  function_decl:
    attribute* function_header compound_statement
  function_header:
    fn ident paren_left param_list? paren_right (arrow attribute* type_decl)?
  param_list:
    (param comma)* param comma?
  param:
    attribute* variable_ident_decl
  enable_directive:
    enable ident semicolon
  global_decl_or_directive:
    semicolon
    global_variable_decl semicolon
    global_constant_decl semicolon
    type_alias semicolon
    struct_decl semicolon
    function_decl
    enable_directive


scanner:
  tokens:
    decimal_float_literal:
      /((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)/
    hex_float_literal:
      /-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/
    int_literal:
      /-?0x[0-9a-fA-F]+|0|-?[1-9][0-9]*/
    uint_literal:
      /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/
    ident:
      /[a-zA-Z][0-9a-zA-Z_]*/
    and:
      '&'
    and_and:
      '&&'
    arrow:
      '->'
    attr:
      '@'
    forward_slash:
      '/'
    bang:
      '!'
    bracket_left:
      '['
    bracket_right:
      ']'
    brace_left:
      '{'
    brace_right:
      '}'
    colon:
      ':'
    comma:
      ','
    equal:
      '='
    equal_equal:
      '=='
    not_equal:
      '!='
    greater_than:
      '>'
    greater_than_equal:
      '>='
    shift_right:
      '>>'
    less_than:
      '<'
    less_than_equal:
      '<='
    shift_left:
      '<<'
    modulo:
      '%'
    minus:
      '-'
    minus_minus:
      '--'
    period:
      '.'
    plus:
      '+'
    plus_plus:
      '++'
    or:
      '|'
    or_or:
      '||'
    paren_left:
      '('
    paren_right:
      ')'
    semicolon:
      ';'
    star:
      '*'
    tilde:
      '~'
    underscore:
      '_'
    xor: 
      '^'
  keywords:
    array:
      /array/
    atomic:
      /atomic/
    bool:
      /bool/
    float32:
      /f32/
    int32:
      /i32/
    mat2x2:
      /mat2x2/
    mat2x3:
      /mat2x3/
    mat2x4:
      /mat2x4/
    mat3x2:
      /mat3x2/
    mat3x3:
      /mat3x3/
    mat3x4:
      /mat3x4/
    mat4x2:
      /mat4x2/
    mat4x3:
      /mat4x3/
    mat4x4:
      /mat4x4/
    pointer:
      /ptr/
    sampler:
      /sampler/
    sampler_comparison:
      /sampler_comparison/
    struct:
      /struct/
    texture_1d:
      /texture_1d/
    texture_2d:
      /texture_2d/
    texture_2d_array:
      /texture_2d_array/
    texture_3d:
      /texture_3d/
    texture_cube:
      /texture_cube/
    texture_cube_array:
      /texture_cube_array/
    texture_multisampled_2d:
      /texture_multisampled_2d/
    texture_storage_1d:
      /texture_storage_1d/
    texture_storage_2d:
      /texture_storage_2d/
    texture_storage_2d_array:
      /texture_storage_2d_array/
    texture_storage_3d:
      /texture_storage_3d/
    texture_depth_2d:
      /texture_depth_2d/
    texture_depth_2d_array:
      /texture_depth_2d_array/
    texture_depth_cube:
      /texture_depth_cube/
    texture_depth_cube_array:
      /texture_depth_cube_array/
    texture_depth_multisampled_2d:
      /texture_depth_multisampled_2d/
    uint32:
      /u32/
    vec2:
      /vec2/
    vec3:
      /vec3/
    vec4:
      /vec4/
    bitcast:
      /bitcast/
    block:
      /block/
    break:
      /break/
    case:
      /case/
    continue:
      /continue/
    continuing:
      /continuing/
    default:
      /default/
    discard:
      /discard/
    else:
      /else/
    elseif:
      /elseif/
    enable:
      /enable/
    fallthrough:
      /fallthrough/
    false:
      /false/
    fn:
      /fn/
    for:
      /for/
    function:
      /function/
    if:
      /if/
    let:
      /let/
    loop:
      /loop/
    private:
      /private/
    read:
      /read/
    read_write:
      /read_write/
    return:
      /return/
    storage:
      /storage/
    switch:
      /switch/
    true:
      /true/
    type:
      /type/
    uniform:
      /uniform/
    var:
      /var/
    workgroup:
      /workgroup/
    write:
      /write/
    r8unorm:
      /r8unorm/
    r8snorm:
      /r8snorm/
    r8uint:
      /r8uint/
    r8sint:
      /r8sint/
    r16uint:
      /r16uint/
    r16sint:
      /r16sint/
    r16float:
      /r16float/
    rg8unorm:
      /rg8unorm/
    rg8snorm:
      /rg8snorm/
    rg8uint:
      /rg8uint/
    rg8sint:
      /rg8sint/
    r32uint:
      /r32uint/
    r32sint:
      /r32sint/
    r32float:
      /r32float/
    fg16uint:
      /rg16uint/
    rg16sint:
      /rg16sint/
    rg16float:
      /rg16float/
    rgba8unorm:
      /rgba8unorm/
    rgba8unorm_srgb:
      /rgba8unorm_srgb/
    rgba8snorm:
      /rgba8snorm/
    rgba8uint:
      /rgba8uint/
    rgba8sint:
      /rgba8sint/
    bgra8unorm:
      /bgra8unorm/
    bgra8unorm_srgb:
      /bgra8unorm_srgb/
    rgb10a2unorm:
      /rgb10a2unorm/
    rg11b10float:
      /rg11b10float/
    rg32uint:
      /rg32uint/
    rg32sint:
      /rg32sint/
    rg32float:
      /rg32float/
    rgba16uint:
      /rgba16uint/
    rgba16sint:
      /rgba16sint/
    rgba16float:
      /rgba16float/
    rgba32uint:
      /rgba32uint/
    rgba32sint:
      /rgba32sint/
    rgba32float:
      /rgba32float/
  reserved:
    asm:
      /asm/
    bf16:
      /bf16/
    const:
      /const/
    do:
      /do/
    enum:
      /enum/
    f16:
      /f16/
    f64:
      /f64/
    handle:
      /handle/
    i8:
      /i8/
    i16:
      /i16/
    i64:
      /i64/
    mat:
      /mat/
    premerge:
      /premerge/
    regardless:
      /regardless/
    typedef:
      /typedef/
    u8:
      /u8/
    u16:
      /u16/
    u64:
      /u64/
    unless:
      /unless/
    using:
      /using/
    vec:
      /vec/
    void:
      /void/
    while:
      /while/
