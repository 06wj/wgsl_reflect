{"version":3,"file":"wgsl_reflect.module.js","sources":["src/wgsl_ast.ts","src/wgsl_scanner.ts","src/wgsl_parser.ts","src/wgsl_reflect.ts","src/wgsl_exec.ts"],"sourcesContent":["export class ParseContext {\r\n  constants: Map<string, Const> = new Map();\r\n  aliases: Map<string, Alias> = new Map();\r\n  structs: Map<string, Struct> = new Map();\r\n}\r\n\r\n/**\r\n * @class Node\r\n * @category AST\r\n * Base class for AST nodes parsed from a WGSL shader.\r\n */\r\nexport class Node {\r\n  line: number;\r\n\r\n  constructor() {\r\n    this.line = 0;\r\n  }\r\n\r\n  get isAstNode(): boolean {\r\n    return true;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"\";\r\n  }\r\n\r\n  evaluate(context: ParseContext): number {\r\n    throw new Error(\"Cannot evaluate node\");\r\n  }\r\n\r\n  evaluateString(context: ParseContext): string {\r\n    return this.evaluate(context).toString();\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {}\r\n\r\n  searchBlock(block: Array<Node> | null, callback: (node: Node) => void) {\r\n    if (block) {\r\n      callback(_BlockStart.instance);\r\n      for (const node of block) {\r\n        if (node instanceof Array) {\r\n          this.searchBlock(node as Array<Node>, callback);\r\n        } else {\r\n          node.search(callback);\r\n        }\r\n      }\r\n      callback(_BlockEnd.instance);\r\n    }\r\n  }\r\n}\r\n\r\n// For internal use only\r\nexport class _BlockStart extends Node {\r\n  static instance = new _BlockStart();\r\n}\r\n\r\n // For internal use only\r\nexport class _BlockEnd extends Node { \r\n  static instance = new _BlockEnd();\r\n}\r\n\r\n/**\r\n * @class Statement\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Statement extends Node {\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\n/**\r\n * @class Function\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Function extends Statement {\r\n  name: string;\r\n  args: Array<Argument>;\r\n  returnType: Type | null;\r\n  body: Array<Statement>;\r\n  attributes: Array<Attribute> | null;\r\n  startLine: number;\r\n  endLine: number;\r\n  calls: Set<Function> = new Set();\r\n\r\n  constructor(\r\n    name: string,\r\n    args: Array<Argument>,\r\n    returnType: Type | null,\r\n    body: Array<Statement>,\r\n    startLine: number,\r\n    endLine: number\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n    this.returnType = returnType;\r\n    this.body = body;\r\n    this.startLine = startLine;\r\n    this.endLine = endLine;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"function\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class StaticAssert\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class StaticAssert extends Statement {\r\n  expression: Expression;\r\n\r\n  constructor(expression: Expression) {\r\n    super();\r\n    this.expression = expression;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"staticAssert\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    this.expression.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class While\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class While extends Statement {\r\n  condition: Expression;\r\n  body: Array<Statement>;\r\n\r\n  constructor(condition: Expression, body: Array<Statement>) {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"while\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    this.condition.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Continuing\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Continuing extends Statement {\r\n  body: Array<Statement>;\r\n\r\n  constructor(body: Array<Statement>) {\r\n    super();\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"continuing\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class For\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class For extends Statement {\r\n  init: Statement | null;\r\n  condition: Expression | null;\r\n  increment: Statement | null;\r\n  body: Array<Statement>;\r\n\r\n  constructor(\r\n    init: Statement | null,\r\n    condition: Expression | null,\r\n    increment: Statement | null,\r\n    body: Array<Statement>\r\n  ) {\r\n    super();\r\n    this.init = init;\r\n    this.condition = condition;\r\n    this.increment = increment;\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"for\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    this.init?.search(callback);\r\n    this.condition?.search(callback);\r\n    this.increment?.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Var\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Var extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  storage: string | null;\r\n  access: string | null;\r\n  value: Expression | null;\r\n  attributes: Array<Attribute> | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    storage: string | null,\r\n    access: string | null,\r\n    value: Expression | null\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.storage = storage;\r\n    this.access = access;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"var\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    callback(this);\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Override\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Override extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  value: Expression | null;\r\n  attributes: Array<Attribute> | null;\r\n\r\n  constructor(name: string, type: Type | null, value: Expression | null) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"override\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Let\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Let extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  storage: string | null;\r\n  access: string | null;\r\n  value: Expression | null;\r\n  attributes: Array<Attribute> | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    storage: string | null,\r\n    access: string | null,\r\n    value: Expression | null\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.storage = storage;\r\n    this.access = access;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"let\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    callback(this);\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Const\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Const extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  storage: string | null;\r\n  access: string | null;\r\n  value: Expression;\r\n  attributes: Array<Attribute> | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    storage: string | null,\r\n    access: string | null,\r\n    value: Expression\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.storage = storage;\r\n    this.access = access;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"const\";\r\n  }\r\n\r\n  evaluate(context: ParseContext): number {\r\n    return this.value.evaluate(context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    callback(this);\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\nexport enum IncrementOperator {\r\n  increment = \"++\",\r\n  decrement = \"--\",\r\n}\r\n\r\nexport namespace IncrementOperator {\r\n  export function parse(val: string): IncrementOperator {\r\n    const key = val as keyof typeof IncrementOperator;\r\n    if (key == \"parse\") throw new Error(\"Invalid value for IncrementOperator\");\r\n    return IncrementOperator[key];\r\n  }\r\n}\r\n\r\n/**\r\n * @class Increment\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Increment extends Statement {\r\n  operator: IncrementOperator;\r\n  variable: Expression;\r\n\r\n  constructor(operator: IncrementOperator, variable: Expression) {\r\n    super();\r\n    this.operator = operator;\r\n    this.variable = variable;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"increment\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    this.variable.search(callback);\r\n  }\r\n}\r\n\r\nexport enum AssignOperator {\r\n  assign = \"=\",\r\n  addAssign = \"+=\",\r\n  subtractAssin = \"-=\",\r\n  multiplyAssign = \"*=\",\r\n  divideAssign = \"/=\",\r\n  moduloAssign = \"%=\",\r\n  andAssign = \"&=\",\r\n  orAssign = \"|=\",\r\n  xorAssign = \"^=\",\r\n  shiftLeftAssign = \"<<=\",\r\n  shiftRightAssign = \">>=\",\r\n}\r\n\r\nexport namespace AssignOperator {\r\n  export function parse(val: string): AssignOperator {\r\n    const key = val as keyof typeof AssignOperator;\r\n    if (key == \"parse\") {\r\n      throw new Error(\"Invalid value for AssignOperator\");\r\n    }\r\n    //return AssignOperator[key];\r\n    return key as AssignOperator;\r\n  }\r\n}\r\n\r\n/**\r\n * @class Assign\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Assign extends Statement {\r\n  operator: AssignOperator;\r\n  variable: Expression;\r\n  value: Expression;\r\n\r\n  constructor(\r\n    operator: AssignOperator,\r\n    variable: Expression,\r\n    value: Expression\r\n  ) {\r\n    super();\r\n    this.operator = operator;\r\n    this.variable = variable;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"assign\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.variable.search(callback);\r\n    this.value.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Call\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Call extends Statement {\r\n  name: string;\r\n  args: Array<Expression>;\r\n\r\n  constructor(name: string, args: Array<Expression>) {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"call\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    for (const node of this.args) {\r\n      node.search(callback);\r\n    }\r\n    callback(this);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Loop\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Loop extends Statement {\r\n  body: Array<Statement>;\r\n  continuing: Array<Statement> | null;\r\n\r\n  constructor(body: Array<Statement>, continuing: Array<Statement> | null) {\r\n    super();\r\n    this.body = body;\r\n    this.continuing = continuing;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"loop\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Switch\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Switch extends Statement {\r\n  condition: Expression;\r\n  body: Array<Statement>;\r\n\r\n  constructor(condition: Expression, body: Array<Statement>) {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"body\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class If\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class If extends Statement {\r\n  condition: Expression;\r\n  body: Array<Statement>;\r\n  elseif: Array<ElseIf> | null;\r\n  else: Array<Statement> | null;\r\n\r\n  constructor(\r\n    condition: Expression,\r\n    body: Array<Statement>,\r\n    elseif: Array<ElseIf> | null,\r\n    _else: Array<Statement> | null\r\n  ) {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n    this.elseif = elseif;\r\n    this.else = _else;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"if\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    this.condition.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n    this.searchBlock(this.elseif, callback);\r\n    this.searchBlock(this.else, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Return\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Return extends Statement {\r\n  value: Expression;\r\n\r\n  constructor(value: Expression) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"return\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Enable\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Enable extends Statement {\r\n  name: string;\r\n\r\n  constructor(name: string) {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"enable\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Requires\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Requires extends Statement {\r\n  extensions: string[];\r\n\r\n  constructor(extensions: string[]) {\r\n    super();\r\n    this.extensions = extensions;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"requires\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Diagnostic\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Diagnostic extends Statement {\r\n  severity: string;\r\n  rule: string;\r\n\r\n  constructor(severity: string, rule: string) {\r\n    super();\r\n    this.severity = severity;\r\n    this.rule = rule;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"diagnostic\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Alias\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Alias extends Statement {\r\n  name: string;\r\n  type: Type;\r\n\r\n  constructor(name: string, type: Type) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"alias\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Discard\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Discard extends Statement {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"discard\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Break\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Break extends Statement {\r\n  condition: Expression | null;\r\n\r\n  constructor() {\r\n    super();\r\n    this.condition = null;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"break\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Continue\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Continue extends Statement {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"continue\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Type\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Type extends Statement {\r\n  name: string;\r\n  attributes: Array<Attribute> | null;\r\n\r\n  constructor(name: string) {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"type\";\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return false;\r\n  }\r\n\r\n  static f32 = new Type(\"f32\");\r\n  static i32 = new Type(\"i32\");\r\n  static u32 = new Type(\"u32\");\r\n  static f16 = new Type(\"f16\");\r\n  static bool = new Type(\"bool\");\r\n}\r\n\r\n/**\r\n * @class StructType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class Struct extends Type {\r\n  members: Array<Member>;\r\n  startLine: number;\r\n  endLine: number;\r\n\r\n  constructor(name: string, members: Array<Member>, startLine: number, endLine: number) {\r\n    super(name);\r\n    this.members = members;\r\n    this.startLine = startLine;\r\n    this.endLine = endLine;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"struct\";\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /// Return the index of the member with the given name, or -1 if not found.\r\n  getMemberIndex(name: string): number {\r\n    for (let i = 0; i < this.members.length; i++) {\r\n      if (this.members[i].name == name) return i;\r\n    }\r\n    return -1;\r\n  }\r\n}\r\n\r\n/**\r\n * @class TemplateType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class TemplateType extends Type {\r\n  format: Type | null;\r\n  access: string | null;\r\n\r\n  constructor(name: string, format: Type | null, access: string | null) {\r\n    super(name);\r\n    this.format = format;\r\n    this.access = access;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"template\";\r\n  }\r\n\r\n  static vec2f = new TemplateType(\"vec2\", Type.f32, null);\r\n  static vec3f = new TemplateType(\"vec3\", Type.f32, null);\r\n  static vec4f = new TemplateType(\"vec4\", Type.f32, null);\r\n  static vec2i = new TemplateType(\"vec2\", Type.i32, null);\r\n  static vec3i = new TemplateType(\"vec3\", Type.i32, null);\r\n  static vec4i = new TemplateType(\"vec4\", Type.i32, null);\r\n  static vec2u = new TemplateType(\"vec2\", Type.u32, null);\r\n  static vec3u = new TemplateType(\"vec3\", Type.u32, null);\r\n  static vec4u = new TemplateType(\"vec4\", Type.u32, null);\r\n  static vec2h = new TemplateType(\"vec2\", Type.f16, null);\r\n  static vec3h = new TemplateType(\"vec3\", Type.f16, null);\r\n  static vec4h = new TemplateType(\"vec4\", Type.f16, null);\r\n\r\n  static mat2x2f = new TemplateType(\"mat2x2\", Type.f32, null);\r\n  static mat2x3f = new TemplateType(\"mat2x3\", Type.f32, null);\r\n  static mat2x4f = new TemplateType(\"mat2x4\", Type.f32, null);\r\n  static mat3x2f = new TemplateType(\"mat3x2\", Type.f32, null);\r\n  static mat3x3f = new TemplateType(\"mat3x3\", Type.f32, null);\r\n  static mat3x4f = new TemplateType(\"mat3x4\", Type.f32, null);\r\n  static mat4x2f = new TemplateType(\"mat4x2\", Type.f32, null);\r\n  static mat4x3f = new TemplateType(\"mat4x3\", Type.f32, null);\r\n  static mat4x4f = new TemplateType(\"mat4x4\", Type.f32, null);\r\n\r\n  static mat2x2h = new TemplateType(\"mat2x2\", Type.f16, null);\r\n  static mat2x3h = new TemplateType(\"mat2x3\", Type.f16, null);\r\n  static mat2x4h = new TemplateType(\"mat2x4\", Type.f16, null);\r\n  static mat3x2h = new TemplateType(\"mat3x2\", Type.f16, null);\r\n  static mat3x3h = new TemplateType(\"mat3x3\", Type.f16, null);\r\n  static mat3x4h = new TemplateType(\"mat3x4\", Type.f16, null);\r\n  static mat4x2h = new TemplateType(\"mat4x2\", Type.f16, null);\r\n  static mat4x3h = new TemplateType(\"mat4x3\", Type.f16, null);\r\n  static mat4x4h = new TemplateType(\"mat4x4\", Type.f16, null);\r\n}\r\n\r\n/**\r\n * @class PointerType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class PointerType extends Type {\r\n  storage: string;\r\n  type: Type | null;\r\n  access: string | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    storage: string,\r\n    type: Type | null,\r\n    access: string | null\r\n  ) {\r\n    super(name);\r\n    this.storage = storage;\r\n    this.type = type;\r\n    this.access = access;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"pointer\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class ArrayType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class ArrayType extends Type {\r\n  attributes: Array<Attribute> | null;\r\n  format: Type | null;\r\n  count: number;\r\n\r\n  constructor(\r\n    name: string,\r\n    attributes: Array<Attribute> | null,\r\n    format: Type | null,\r\n    count: number\r\n  ) {\r\n    super(name);\r\n    this.attributes = attributes;\r\n    this.format = format;\r\n    this.count = count;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"array\";\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @class SamplerType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class SamplerType extends Type {\r\n  format: Type | string | null;\r\n  access: string | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    format: Type | string | null,\r\n    access: string | null\r\n  ) {\r\n    super(name);\r\n    this.format = format;\r\n    this.access = access;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"sampler\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Expression\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Expression extends Node {\r\n  postfix: Expression | null;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\n/**\r\n * @class StringExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class StringExpr extends Expression {\r\n  value: string;\r\n\r\n  constructor(value: string) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"stringExpr\";\r\n  }\r\n\r\n  toString(): string {\r\n    return this.value;\r\n  }\r\n\r\n  evaluateString(): string {\r\n    return this.value;\r\n  }\r\n}\r\n\r\n/**\r\n * @class CreateExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class CreateExpr extends Expression {\r\n  type: Type | null;\r\n  args: Array<Expression> | null;\r\n\r\n  constructor(type: Type | null, args: Array<Expression> | null) {\r\n    super();\r\n    this.type = type;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"createExpr\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    callback(this);\r\n    if (this.args) {\r\n      for (const node of this.args) {\r\n        node.search(callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  evaluate(context: ParseContext): number {\r\n    return this.args[0].evaluate(context);\r\n  }\r\n}\r\n\r\n/**\r\n * @class CallExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class CallExpr extends Expression {\r\n  name: string;\r\n  args: Array<Expression> | null;\r\n\r\n  constructor(name: string, args: Array<Expression> | null) {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"callExpr\";\r\n  }\r\n\r\n  evaluate(context: ParseContext): number {\r\n    switch (this.name) {\r\n      case \"abs\":\r\n        return Math.abs(this.args[0].evaluate(context));\r\n      case \"acos\":\r\n        return Math.acos(this.args[0].evaluate(context));\r\n      case \"acosh\":\r\n        return Math.acosh(this.args[0].evaluate(context));\r\n      case \"asin\":\r\n        return Math.asin(this.args[0].evaluate(context));\r\n      case \"asinh\":\r\n        return Math.asinh(this.args[0].evaluate(context));\r\n      case \"atan\":\r\n        return Math.atan(this.args[0].evaluate(context));\r\n      case \"atan2\":\r\n        return Math.atan2(\r\n          this.args[0].evaluate(context),\r\n          this.args[1].evaluate(context)\r\n        );\r\n      case \"atanh\":\r\n        return Math.atanh(this.args[0].evaluate(context));\r\n      case \"ceil\":\r\n        return Math.ceil(this.args[0].evaluate(context));\r\n      case \"clamp\":\r\n        return Math.min(\r\n          Math.max(\r\n            this.args[0].evaluate(context),\r\n            this.args[1].evaluate(context)\r\n          ),\r\n          this.args[2].evaluate(context)\r\n        );\r\n      case \"cos\":\r\n        return Math.cos(this.args[0].evaluate(context));\r\n      //case \"cross\":\r\n      //TODO: (x[i] * y[j] - x[j] * y[i])\r\n      case \"degrees\":\r\n        return (this.args[0].evaluate(context) * 180) / Math.PI;\r\n      //case \"determinant\":\r\n      //TODO implement\r\n      case \"distance\":\r\n        return Math.sqrt(\r\n          Math.pow(\r\n            this.args[0].evaluate(context) - this.args[1].evaluate(context),\r\n            2\r\n          )\r\n        );\r\n      case \"dot\":\r\n      //TODO: (x[i] * y[i])\r\n      case \"exp\":\r\n        return Math.exp(this.args[0].evaluate(context));\r\n      case \"exp2\":\r\n        return Math.pow(2, this.args[0].evaluate(context));\r\n      //case \"extractBits\":\r\n      //TODO: implement\r\n      //case \"firstLeadingBit\":\r\n      //TODO: implement\r\n      case \"floor\":\r\n        return Math.floor(this.args[0].evaluate(context));\r\n      case \"fma\":\r\n        return (\r\n          this.args[0].evaluate(context) * this.args[1].evaluate(context) +\r\n          this.args[2].evaluate(context)\r\n        );\r\n      case \"fract\":\r\n        return (\r\n          this.args[0].evaluate(context) -\r\n          Math.floor(this.args[0].evaluate(context))\r\n        );\r\n      //case \"frexp\":\r\n      //TODO: implement\r\n      case \"inverseSqrt\":\r\n        return 1 / Math.sqrt(this.args[0].evaluate(context));\r\n      //case \"length\":\r\n      //TODO: implement\r\n      case \"log\":\r\n        return Math.log(this.args[0].evaluate(context));\r\n      case \"log2\":\r\n        return Math.log2(this.args[0].evaluate(context));\r\n      case \"max\":\r\n        return Math.max(\r\n          this.args[0].evaluate(context),\r\n          this.args[1].evaluate(context)\r\n        );\r\n      case \"min\":\r\n        return Math.min(\r\n          this.args[0].evaluate(context),\r\n          this.args[1].evaluate(context)\r\n        );\r\n      case \"mix\":\r\n        return (\r\n          this.args[0].evaluate(context) *\r\n            (1 - this.args[2].evaluate(context)) +\r\n          this.args[1].evaluate(context) * this.args[2].evaluate(context)\r\n        );\r\n      case \"modf\":\r\n        return (\r\n          this.args[0].evaluate(context) -\r\n          Math.floor(this.args[0].evaluate(context))\r\n        );\r\n      case \"pow\":\r\n        return Math.pow(\r\n          this.args[0].evaluate(context),\r\n          this.args[1].evaluate(context)\r\n        );\r\n      case \"radians\":\r\n        return (this.args[0].evaluate(context) * Math.PI) / 180;\r\n      case \"round\":\r\n        return Math.round(this.args[0].evaluate(context));\r\n      case \"sign\":\r\n        return Math.sign(this.args[0].evaluate(context));\r\n      case \"sin\":\r\n        return Math.sin(this.args[0].evaluate(context));\r\n      case \"sinh\":\r\n        return Math.sinh(this.args[0].evaluate(context));\r\n      case \"saturate\":\r\n        return Math.min(Math.max(this.args[0].evaluate(context), 0), 1);\r\n      case \"smoothstep\":\r\n        return (\r\n          this.args[0].evaluate(context) *\r\n          this.args[0].evaluate(context) *\r\n          (3 - 2 * this.args[0].evaluate(context))\r\n        );\r\n      case \"sqrt\":\r\n        return Math.sqrt(this.args[0].evaluate(context));\r\n      case \"step\":\r\n        return this.args[0].evaluate(context) < this.args[1].evaluate(context)\r\n          ? 0\r\n          : 1;\r\n      case \"tan\":\r\n        return Math.tan(this.args[0].evaluate(context));\r\n      case \"tanh\":\r\n        return Math.tanh(this.args[0].evaluate(context));\r\n      case \"trunc\":\r\n        return Math.trunc(this.args[0].evaluate(context));\r\n      default:\r\n        throw new Error(\"Non const function: \" + this.name);\r\n    }\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    for (const node of this.args) {\r\n      node.search(callback);\r\n    }\r\n    callback(this);\r\n  }\r\n}\r\n\r\n/**\r\n * @class VariableExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class VariableExpr extends Expression {\r\n  name: string;\r\n\r\n  constructor(name: string) {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"varExpr\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    callback(this);\r\n    if (this.postfix) {\r\n      this.postfix.search(callback);\r\n    }\r\n  }\r\n\r\n  evaluate(context: ParseContext): number {\r\n    const constant = context.constants.get(this.name);\r\n    if (!constant) {\r\n      throw new Error(\"Cannot evaluate node\");\r\n    }\r\n    return constant.evaluate(context);\r\n  }\r\n}\r\n\r\n/**\r\n * @class ConstExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class ConstExpr extends Expression {\r\n  name: string;\r\n  initializer: Expression;\r\n\r\n  constructor(name: string, initializer: Expression) {\r\n    super();\r\n    this.name = name;\r\n    this.initializer = initializer;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"constExpr\";\r\n  }\r\n\r\n  evaluate(context: ParseContext): number {\r\n    if (this.initializer instanceof CreateExpr) {\r\n      // This is a struct constant\r\n      const property = this.postfix?.evaluateString(context);\r\n      const type = this.initializer.type?.name;\r\n      const struct = context.structs.get(type);\r\n      const memberIndex = struct?.getMemberIndex(property);\r\n      if (memberIndex !== undefined && memberIndex != -1) {\r\n        const value = this.initializer.args[memberIndex].evaluate(context);\r\n        return value;\r\n      } else {\r\n        return this.initializer.evaluate(context);\r\n      }\r\n      console.log(memberIndex);\r\n    }\r\n\r\n    return this.initializer.evaluate(context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    this.initializer.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class LiteralExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class LiteralExpr extends Expression {\r\n  value: number;\r\n\r\n  constructor(value: number) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"literalExpr\";\r\n  }\r\n\r\n  evaluate(): number {\r\n    return this.value;\r\n  }\r\n}\r\n\r\n/**\r\n * @class BitcastExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class BitcastExpr extends Expression {\r\n  type: Type | null;\r\n  value: Expression;\r\n\r\n  constructor(type: Type | null, value: Expression) {\r\n    super();\r\n    this.type = type;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"bitcastExpr\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.value.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class TypecastExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class TypecastExpr extends Expression {\r\n  type: Type | null;\r\n  args: Array<Expression> | null;\r\n\r\n  constructor(type: Type | null, args: Array<Expression> | null) {\r\n    super();\r\n    this.type = type;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"typecastExpr\";\r\n  }\r\n\r\n  evaluate(context: ParseContext): number {\r\n    return this.args[0].evaluate(context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    this.searchBlock(this.args, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class GroupingExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class GroupingExpr extends Expression {\r\n  contents: Array<Expression>;\r\n\r\n  constructor(contents: Array<Expression>) {\r\n    super();\r\n    this.contents = contents;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"groupExpr\";\r\n  }\r\n\r\n  evaluate(context: ParseContext): number {\r\n    return this.contents[0].evaluate(context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.contents, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class ArrayIndex\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class ArrayIndex extends Expression {\r\n  index: Expression;\r\n  constructor(index: Expression) {\r\n    super();\r\n    this.index = index;\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.index.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Operator\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class Operator extends Expression {\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\n/**\r\n * @class UnaryOperator\r\n * @extends Operator\r\n * @category AST\r\n * @property {string} operator +, -, !, ~\r\n */\r\nexport class UnaryOperator extends Operator {\r\n  operator: string;\r\n  right: Expression;\r\n\r\n  constructor(operator: string, right: Expression) {\r\n    super();\r\n    this.operator = operator;\r\n    this.right = right;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"unaryOp\";\r\n  }\r\n\r\n  evaluate(context: ParseContext): number {\r\n    switch (this.operator) {\r\n      case \"+\":\r\n        return this.right.evaluate(context);\r\n      case \"-\":\r\n        return -this.right.evaluate(context);\r\n      case \"!\":\r\n        return this.right.evaluate(context) ? 0 : 1;\r\n      case \"~\":\r\n        return ~this.right.evaluate(context);\r\n      default:\r\n        throw new Error(\"Unknown unary operator: \" + this.operator);\r\n    }\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.right.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class BinaryOperator\r\n * @extends Operator\r\n * @category AST\r\n * @property {string} operator +, -, *, /, %, ==, !=, <, >, <=, >=, &&, ||\r\n */\r\nexport class BinaryOperator extends Operator {\r\n  operator: string;\r\n  left: Expression;\r\n  right: Expression;\r\n\r\n  constructor(operator: string, left: Expression, right: Expression) {\r\n    super();\r\n    this.operator = operator;\r\n    this.left = left;\r\n    this.right = right;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"binaryOp\";\r\n  }\r\n\r\n  evaluate(context: ParseContext): number {\r\n    switch (this.operator) {\r\n      case \"+\":\r\n        return this.left.evaluate(context) + this.right.evaluate(context);\r\n      case \"-\":\r\n        return this.left.evaluate(context) - this.right.evaluate(context);\r\n      case \"*\":\r\n        return this.left.evaluate(context) * this.right.evaluate(context);\r\n      case \"/\":\r\n        return this.left.evaluate(context) / this.right.evaluate(context);\r\n      case \"%\":\r\n        return this.left.evaluate(context) % this.right.evaluate(context);\r\n      case \"<\":\r\n        return this.left.evaluate(context) < this.right.evaluate(context)\r\n          ? 1\r\n          : 0;\r\n      case \">\":\r\n        return this.left.evaluate(context) > this.right.evaluate(context)\r\n          ? 1\r\n          : 0;\r\n      case \"==\":\r\n        return this.left.evaluate(context) == this.right.evaluate(context)\r\n            ? 1\r\n            : 0;\r\n      case \"!=\":\r\n        return this.left.evaluate(context) != this.right.evaluate(context)\r\n            ? 1\r\n            : 0;\r\n      case \"<=\":\r\n        return this.left.evaluate(context) <= this.right.evaluate(context)\r\n          ? 1\r\n          : 0;\r\n      case \">=\":\r\n        return this.left.evaluate(context) >= this.right.evaluate(context)\r\n          ? 1\r\n          : 0;\r\n      case \"&&\":\r\n        return this.left.evaluate(context) && this.right.evaluate(context)\r\n          ? 1\r\n          : 0;\r\n      case \"||\":\r\n        return this.left.evaluate(context) || this.right.evaluate(context)\r\n          ? 1\r\n          : 0;\r\n      default:\r\n        throw new Error(`Unknown operator ${this.operator}`);\r\n    }\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    this.left.search(callback);\r\n    this.right.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class SwitchCase\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class SwitchCase extends Node {\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\n/**\r\n * @class Case\r\n * @extends SwitchCase\r\n * @category AST\r\n */\r\nexport class Case extends SwitchCase {\r\n  selector: Array<Expression>;\r\n  body: Array<Statement>;\r\n\r\n  constructor(selector: Array<Expression>, body: Array<Statement>) {\r\n    super();\r\n    this.selector = selector;\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"case\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Default\r\n * @extends SwitchCase\r\n * @category AST\r\n */\r\nexport class Default extends SwitchCase {\r\n  body: Array<Statement>;\r\n\r\n  constructor(body: Array<Statement>) {\r\n    super();\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"default\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Argument\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Argument extends Node {\r\n  name: string;\r\n  type: Type;\r\n  attributes: Array<Attribute> | null;\r\n\r\n  constructor(name: string, type: Type, attributes: Array<Attribute> | null) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"argument\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class ElseIf\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class ElseIf extends Node {\r\n  condition: Expression;\r\n  body: Array<Statement>;\r\n\r\n  constructor(condition: Expression, body: Array<Statement>) {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"elseif\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.condition.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Member\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Member extends Node {\r\n  name: string;\r\n  type: Type | null;\r\n  attributes: Array<Attribute> | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    attributes: Array<Attribute> | null\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"member\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Attribute\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Attribute extends Node {\r\n  name: string;\r\n  value: string | Array<string> | null;\r\n\r\n  constructor(name: string, value: string | Array<string> | null) {\r\n    super();\r\n    this.name = name;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType() {\r\n    return \"attribute\";\r\n  }\r\n}\r\n","export enum TokenClass {\r\n  token,\r\n  keyword,\r\n  reserved,\r\n}\r\n\r\nexport class TokenType {\r\n  name: string;\r\n  type: TokenClass;\r\n  rule: RegExp | string;\r\n\r\n  constructor(name: string, type: TokenClass, rule: RegExp | string) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.rule = rule;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.name;\r\n  }\r\n}\r\n\r\n/// Catalog of defined token types, keywords, and reserved words.\r\nexport class TokenTypes {\r\n  static readonly none = new TokenType(\"\", TokenClass.reserved, \"\");\r\n  static readonly eof = new TokenType(\"EOF\", TokenClass.token, \"\");\r\n\r\n  static readonly reserved = {\r\n    asm: new TokenType(\"asm\", TokenClass.reserved, \"asm\"),\r\n    bf16: new TokenType(\"bf16\", TokenClass.reserved, \"bf16\"),\r\n    do: new TokenType(\"do\", TokenClass.reserved, \"do\"),\r\n    enum: new TokenType(\"enum\", TokenClass.reserved, \"enum\"),\r\n    f16: new TokenType(\"f16\", TokenClass.reserved, \"f16\"),\r\n    f64: new TokenType(\"f64\", TokenClass.reserved, \"f64\"),\r\n    handle: new TokenType(\"handle\", TokenClass.reserved, \"handle\"),\r\n    i8: new TokenType(\"i8\", TokenClass.reserved, \"i8\"),\r\n    i16: new TokenType(\"i16\", TokenClass.reserved, \"i16\"),\r\n    i64: new TokenType(\"i64\", TokenClass.reserved, \"i64\"),\r\n    mat: new TokenType(\"mat\", TokenClass.reserved, \"mat\"),\r\n    premerge: new TokenType(\"premerge\", TokenClass.reserved, \"premerge\"),\r\n    regardless: new TokenType(\"regardless\", TokenClass.reserved, \"regardless\"),\r\n    typedef: new TokenType(\"typedef\", TokenClass.reserved, \"typedef\"),\r\n    u8: new TokenType(\"u8\", TokenClass.reserved, \"u8\"),\r\n    u16: new TokenType(\"u16\", TokenClass.reserved, \"u16\"),\r\n    u64: new TokenType(\"u64\", TokenClass.reserved, \"u64\"),\r\n    unless: new TokenType(\"unless\", TokenClass.reserved, \"unless\"),\r\n    using: new TokenType(\"using\", TokenClass.reserved, \"using\"),\r\n    vec: new TokenType(\"vec\", TokenClass.reserved, \"vec\"),\r\n    void: new TokenType(\"void\", TokenClass.reserved, \"void\"),\r\n  };\r\n\r\n  static readonly keywords = {\r\n    array: new TokenType(\"array\", TokenClass.keyword, \"array\"),\r\n    atomic: new TokenType(\"atomic\", TokenClass.keyword, \"atomic\"),\r\n    bool: new TokenType(\"bool\", TokenClass.keyword, \"bool\"),\r\n    f32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\r\n    i32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\r\n    mat2x2: new TokenType(\"mat2x2\", TokenClass.keyword, \"mat2x2\"),\r\n    mat2x3: new TokenType(\"mat2x3\", TokenClass.keyword, \"mat2x3\"),\r\n    mat2x4: new TokenType(\"mat2x4\", TokenClass.keyword, \"mat2x4\"),\r\n    mat3x2: new TokenType(\"mat3x2\", TokenClass.keyword, \"mat3x2\"),\r\n    mat3x3: new TokenType(\"mat3x3\", TokenClass.keyword, \"mat3x3\"),\r\n    mat3x4: new TokenType(\"mat3x4\", TokenClass.keyword, \"mat3x4\"),\r\n    mat4x2: new TokenType(\"mat4x2\", TokenClass.keyword, \"mat4x2\"),\r\n    mat4x3: new TokenType(\"mat4x3\", TokenClass.keyword, \"mat4x3\"),\r\n    mat4x4: new TokenType(\"mat4x4\", TokenClass.keyword, \"mat4x4\"),\r\n    ptr: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),\r\n    sampler: new TokenType(\"sampler\", TokenClass.keyword, \"sampler\"),\r\n    sampler_comparison: new TokenType(\r\n      \"sampler_comparison\",\r\n      TokenClass.keyword,\r\n      \"sampler_comparison\"\r\n    ),\r\n    struct: new TokenType(\"struct\", TokenClass.keyword, \"struct\"),\r\n    texture_1d: new TokenType(\"texture_1d\", TokenClass.keyword, \"texture_1d\"),\r\n    texture_2d: new TokenType(\"texture_2d\", TokenClass.keyword, \"texture_2d\"),\r\n    texture_2d_array: new TokenType(\r\n      \"texture_2d_array\",\r\n      TokenClass.keyword,\r\n      \"texture_2d_array\"\r\n    ),\r\n    texture_3d: new TokenType(\"texture_3d\", TokenClass.keyword, \"texture_3d\"),\r\n    texture_cube: new TokenType(\r\n      \"texture_cube\",\r\n      TokenClass.keyword,\r\n      \"texture_cube\"\r\n    ),\r\n    texture_cube_array: new TokenType(\r\n      \"texture_cube_array\",\r\n      TokenClass.keyword,\r\n      \"texture_cube_array\"\r\n    ),\r\n    texture_multisampled_2d: new TokenType(\r\n      \"texture_multisampled_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_multisampled_2d\"\r\n    ),\r\n    texture_storage_1d: new TokenType(\r\n      \"texture_storage_1d\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_1d\"\r\n    ),\r\n    texture_storage_2d: new TokenType(\r\n      \"texture_storage_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_2d\"\r\n    ),\r\n    texture_storage_2d_array: new TokenType(\r\n      \"texture_storage_2d_array\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_2d_array\"\r\n    ),\r\n    texture_storage_3d: new TokenType(\r\n      \"texture_storage_3d\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_3d\"\r\n    ),\r\n    texture_depth_2d: new TokenType(\r\n      \"texture_depth_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_2d\"\r\n    ),\r\n    texture_depth_2d_array: new TokenType(\r\n      \"texture_depth_2d_array\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_2d_array\"\r\n    ),\r\n    texture_depth_cube: new TokenType(\r\n      \"texture_depth_cube\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_cube\"\r\n    ),\r\n    texture_depth_cube_array: new TokenType(\r\n      \"texture_depth_cube_array\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_cube_array\"\r\n    ),\r\n    texture_depth_multisampled_2d: new TokenType(\r\n      \"texture_depth_multisampled_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_multisampled_2d\"\r\n    ),\r\n    texture_external: new TokenType(\r\n      \"texture_external\",\r\n      TokenClass.keyword,\r\n      \"texture_external\"\r\n    ),\r\n    u32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\r\n    vec2: new TokenType(\"vec2\", TokenClass.keyword, \"vec2\"),\r\n    vec3: new TokenType(\"vec3\", TokenClass.keyword, \"vec3\"),\r\n    vec4: new TokenType(\"vec4\", TokenClass.keyword, \"vec4\"),\r\n    bitcast: new TokenType(\"bitcast\", TokenClass.keyword, \"bitcast\"),\r\n    block: new TokenType(\"block\", TokenClass.keyword, \"block\"),\r\n    break: new TokenType(\"break\", TokenClass.keyword, \"break\"),\r\n    case: new TokenType(\"case\", TokenClass.keyword, \"case\"),\r\n    continue: new TokenType(\"continue\", TokenClass.keyword, \"continue\"),\r\n    continuing: new TokenType(\"continuing\", TokenClass.keyword, \"continuing\"),\r\n    default: new TokenType(\"default\", TokenClass.keyword, \"default\"),\r\n    diagnostic: new TokenType(\"diagnostic\", TokenClass.keyword, \"diagnostic\"),\r\n    discard: new TokenType(\"discard\", TokenClass.keyword, \"discard\"),\r\n    else: new TokenType(\"else\", TokenClass.keyword, \"else\"),\r\n    enable: new TokenType(\"enable\", TokenClass.keyword, \"enable\"),\r\n    fallthrough: new TokenType(\r\n      \"fallthrough\",\r\n      TokenClass.keyword,\r\n      \"fallthrough\"\r\n    ),\r\n    false: new TokenType(\"false\", TokenClass.keyword, \"false\"),\r\n    fn: new TokenType(\"fn\", TokenClass.keyword, \"fn\"),\r\n    for: new TokenType(\"for\", TokenClass.keyword, \"for\"),\r\n    function: new TokenType(\"function\", TokenClass.keyword, \"function\"),\r\n    if: new TokenType(\"if\", TokenClass.keyword, \"if\"),\r\n    let: new TokenType(\"let\", TokenClass.keyword, \"let\"),\r\n    const: new TokenType(\"const\", TokenClass.keyword, \"const\"),\r\n    loop: new TokenType(\"loop\", TokenClass.keyword, \"loop\"),\r\n    while: new TokenType(\"while\", TokenClass.keyword, \"while\"),\r\n    private: new TokenType(\"private\", TokenClass.keyword, \"private\"),\r\n    read: new TokenType(\"read\", TokenClass.keyword, \"read\"),\r\n    read_write: new TokenType(\"read_write\", TokenClass.keyword, \"read_write\"),\r\n    return: new TokenType(\"return\", TokenClass.keyword, \"return\"),\r\n    requires: new TokenType(\"requires\", TokenClass.keyword, \"requires\"),\r\n    storage: new TokenType(\"storage\", TokenClass.keyword, \"storage\"),\r\n    switch: new TokenType(\"switch\", TokenClass.keyword, \"switch\"),\r\n    true: new TokenType(\"true\", TokenClass.keyword, \"true\"),\r\n    alias: new TokenType(\"alias\", TokenClass.keyword, \"alias\"),\r\n    type: new TokenType(\"type\", TokenClass.keyword, \"type\"),\r\n    uniform: new TokenType(\"uniform\", TokenClass.keyword, \"uniform\"),\r\n    var: new TokenType(\"var\", TokenClass.keyword, \"var\"),\r\n    override: new TokenType(\"override\", TokenClass.keyword, \"override\"),\r\n    workgroup: new TokenType(\"workgroup\", TokenClass.keyword, \"workgroup\"),\r\n    write: new TokenType(\"write\", TokenClass.keyword, \"write\"),\r\n    r8unorm: new TokenType(\"r8unorm\", TokenClass.keyword, \"r8unorm\"),\r\n    r8snorm: new TokenType(\"r8snorm\", TokenClass.keyword, \"r8snorm\"),\r\n    r8uint: new TokenType(\"r8uint\", TokenClass.keyword, \"r8uint\"),\r\n    r8sint: new TokenType(\"r8sint\", TokenClass.keyword, \"r8sint\"),\r\n    r16uint: new TokenType(\"r16uint\", TokenClass.keyword, \"r16uint\"),\r\n    r16sint: new TokenType(\"r16sint\", TokenClass.keyword, \"r16sint\"),\r\n    r16float: new TokenType(\"r16float\", TokenClass.keyword, \"r16float\"),\r\n    rg8unorm: new TokenType(\"rg8unorm\", TokenClass.keyword, \"rg8unorm\"),\r\n    rg8snorm: new TokenType(\"rg8snorm\", TokenClass.keyword, \"rg8snorm\"),\r\n    rg8uint: new TokenType(\"rg8uint\", TokenClass.keyword, \"rg8uint\"),\r\n    rg8sint: new TokenType(\"rg8sint\", TokenClass.keyword, \"rg8sint\"),\r\n    r32uint: new TokenType(\"r32uint\", TokenClass.keyword, \"r32uint\"),\r\n    r32sint: new TokenType(\"r32sint\", TokenClass.keyword, \"r32sint\"),\r\n    r32float: new TokenType(\"r32float\", TokenClass.keyword, \"r32float\"),\r\n    rg16uint: new TokenType(\"rg16uint\", TokenClass.keyword, \"rg16uint\"),\r\n    rg16sint: new TokenType(\"rg16sint\", TokenClass.keyword, \"rg16sint\"),\r\n    rg16float: new TokenType(\"rg16float\", TokenClass.keyword, \"rg16float\"),\r\n    rgba8unorm: new TokenType(\"rgba8unorm\", TokenClass.keyword, \"rgba8unorm\"),\r\n    rgba8unorm_srgb: new TokenType(\r\n      \"rgba8unorm_srgb\",\r\n      TokenClass.keyword,\r\n      \"rgba8unorm_srgb\"\r\n    ),\r\n    rgba8snorm: new TokenType(\"rgba8snorm\", TokenClass.keyword, \"rgba8snorm\"),\r\n    rgba8uint: new TokenType(\"rgba8uint\", TokenClass.keyword, \"rgba8uint\"),\r\n    rgba8sint: new TokenType(\"rgba8sint\", TokenClass.keyword, \"rgba8sint\"),\r\n    bgra8unorm: new TokenType(\"bgra8unorm\", TokenClass.keyword, \"bgra8unorm\"),\r\n    bgra8unorm_srgb: new TokenType(\r\n      \"bgra8unorm_srgb\",\r\n      TokenClass.keyword,\r\n      \"bgra8unorm_srgb\"\r\n    ),\r\n    rgb10a2unorm: new TokenType(\r\n      \"rgb10a2unorm\",\r\n      TokenClass.keyword,\r\n      \"rgb10a2unorm\"\r\n    ),\r\n    rg11b10float: new TokenType(\r\n      \"rg11b10float\",\r\n      TokenClass.keyword,\r\n      \"rg11b10float\"\r\n    ),\r\n    rg32uint: new TokenType(\"rg32uint\", TokenClass.keyword, \"rg32uint\"),\r\n    rg32sint: new TokenType(\"rg32sint\", TokenClass.keyword, \"rg32sint\"),\r\n    rg32float: new TokenType(\"rg32float\", TokenClass.keyword, \"rg32float\"),\r\n    rgba16uint: new TokenType(\"rgba16uint\", TokenClass.keyword, \"rgba16uint\"),\r\n    rgba16sint: new TokenType(\"rgba16sint\", TokenClass.keyword, \"rgba16sint\"),\r\n    rgba16float: new TokenType(\r\n      \"rgba16float\",\r\n      TokenClass.keyword,\r\n      \"rgba16float\"\r\n    ),\r\n    rgba32uint: new TokenType(\"rgba32uint\", TokenClass.keyword, \"rgba32uint\"),\r\n    rgba32sint: new TokenType(\"rgba32sint\", TokenClass.keyword, \"rgba32sint\"),\r\n    rgba32float: new TokenType(\r\n      \"rgba32float\",\r\n      TokenClass.keyword,\r\n      \"rgba32float\"\r\n    ),\r\n    static_assert: new TokenType(\r\n      \"static_assert\",\r\n      TokenClass.keyword,\r\n      \"static_assert\"\r\n    ),\r\n\r\n    // WGSL grammar has a few keywords that have different token names than the strings they\r\n    // represent. Aliasing them here.\r\n    /*int32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\r\n        uint32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\r\n        float32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\r\n        pointer: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),*/\r\n  };\r\n\r\n  static readonly tokens = {\r\n    decimal_float_literal: new TokenType(\r\n      \"decimal_float_literal\",\r\n      TokenClass.token,\r\n      /((-?[0-9]*\\.[0-9]+|-?[0-9]+\\.[0-9]*)((e|E)(\\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\\+|-)?[0-9]+f?)|([0-9]+f)/\r\n    ),\r\n    hex_float_literal: new TokenType(\r\n      \"hex_float_literal\",\r\n      TokenClass.token,\r\n      /-?0x((([0-9a-fA-F]*\\.[0-9a-fA-F]+|[0-9a-fA-F]+\\.[0-9a-fA-F]*)((p|P)(\\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\\+|-)?[0-9]+f?))/\r\n    ),\r\n    int_literal: new TokenType(\r\n      \"int_literal\",\r\n      TokenClass.token,\r\n      /-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/\r\n    ),\r\n    uint_literal: new TokenType(\r\n      \"uint_literal\",\r\n      TokenClass.token,\r\n      /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/\r\n    ),\r\n    ident: new TokenType(\"ident\", TokenClass.token, /[_a-zA-Z][0-9a-zA-Z_]*/),\r\n    and: new TokenType(\"and\", TokenClass.token, \"&\"),\r\n    and_and: new TokenType(\"and_and\", TokenClass.token, \"&&\"),\r\n    arrow: new TokenType(\"arrow \", TokenClass.token, \"->\"),\r\n    attr: new TokenType(\"attr\", TokenClass.token, \"@\"),\r\n    forward_slash: new TokenType(\"forward_slash\", TokenClass.token, \"/\"),\r\n    bang: new TokenType(\"bang\", TokenClass.token, \"!\"),\r\n    bracket_left: new TokenType(\"bracket_left\", TokenClass.token, \"[\"),\r\n    bracket_right: new TokenType(\"bracket_right\", TokenClass.token, \"]\"),\r\n    brace_left: new TokenType(\"brace_left\", TokenClass.token, \"{\"),\r\n    brace_right: new TokenType(\"brace_right\", TokenClass.token, \"}\"),\r\n    colon: new TokenType(\"colon\", TokenClass.token, \":\"),\r\n    comma: new TokenType(\"comma\", TokenClass.token, \",\"),\r\n    equal: new TokenType(\"equal\", TokenClass.token, \"=\"),\r\n    equal_equal: new TokenType(\"equal_equal\", TokenClass.token, \"==\"),\r\n    not_equal: new TokenType(\"not_equal\", TokenClass.token, \"!=\"),\r\n    greater_than: new TokenType(\"greater_than\", TokenClass.token, \">\"),\r\n    greater_than_equal: new TokenType(\r\n      \"greater_than_equal\",\r\n      TokenClass.token,\r\n      \">=\"\r\n    ),\r\n    shift_right: new TokenType(\"shift_right\", TokenClass.token, \">>\"),\r\n    less_than: new TokenType(\"less_than\", TokenClass.token, \"<\"),\r\n    less_than_equal: new TokenType(\"less_than_equal\", TokenClass.token, \"<=\"),\r\n    shift_left: new TokenType(\"shift_left\", TokenClass.token, \"<<\"),\r\n    modulo: new TokenType(\"modulo\", TokenClass.token, \"%\"),\r\n    minus: new TokenType(\"minus\", TokenClass.token, \"-\"),\r\n    minus_minus: new TokenType(\"minus_minus\", TokenClass.token, \"--\"),\r\n    period: new TokenType(\"period\", TokenClass.token, \".\"),\r\n    plus: new TokenType(\"plus\", TokenClass.token, \"+\"),\r\n    plus_plus: new TokenType(\"plus_plus\", TokenClass.token, \"++\"),\r\n    or: new TokenType(\"or\", TokenClass.token, \"|\"),\r\n    or_or: new TokenType(\"or_or\", TokenClass.token, \"||\"),\r\n    paren_left: new TokenType(\"paren_left\", TokenClass.token, \"(\"),\r\n    paren_right: new TokenType(\"paren_right\", TokenClass.token, \")\"),\r\n    semicolon: new TokenType(\"semicolon\", TokenClass.token, \";\"),\r\n    star: new TokenType(\"star\", TokenClass.token, \"*\"),\r\n    tilde: new TokenType(\"tilde\", TokenClass.token, \"~\"),\r\n    underscore: new TokenType(\"underscore\", TokenClass.token, \"_\"),\r\n    xor: new TokenType(\"xor\", TokenClass.token, \"^\"),\r\n    plus_equal: new TokenType(\"plus_equal\", TokenClass.token, \"+=\"),\r\n    minus_equal: new TokenType(\"minus_equal\", TokenClass.token, \"-=\"),\r\n    times_equal: new TokenType(\"times_equal\", TokenClass.token, \"*=\"),\r\n    division_equal: new TokenType(\"division_equal\", TokenClass.token, \"/=\"),\r\n    modulo_equal: new TokenType(\"modulo_equal\", TokenClass.token, \"%=\"),\r\n    and_equal: new TokenType(\"and_equal\", TokenClass.token, \"&=\"),\r\n    or_equal: new TokenType(\"or_equal\", TokenClass.token, \"|=\"),\r\n    xor_equal: new TokenType(\"xor_equal\", TokenClass.token, \"^=\"),\r\n    shift_right_equal: new TokenType(\r\n      \"shift_right_equal\",\r\n      TokenClass.token,\r\n      \">>=\"\r\n    ),\r\n    shift_left_equal: new TokenType(\r\n      \"shift_left_equal\",\r\n      TokenClass.token,\r\n      \"<<=\"\r\n    ),\r\n  };\r\n\r\n  static readonly simpleTokens = {\r\n    \"@\": this.tokens.attr,\r\n    \"{\": this.tokens.brace_left,\r\n    \"}\": this.tokens.brace_right,\r\n    \":\": this.tokens.colon,\r\n    \",\": this.tokens.comma,\r\n    \"(\": this.tokens.paren_left,\r\n    \")\": this.tokens.paren_right,\r\n    \";\": this.tokens.semicolon,\r\n  };\r\n\r\n  static readonly literalTokens = {\r\n    \"&\": this.tokens.and,\r\n    \"&&\": this.tokens.and_and,\r\n    \"->\": this.tokens.arrow ,\r\n    \"/\": this.tokens.forward_slash,\r\n    \"!\": this.tokens.bang,\r\n    \"[\": this.tokens.bracket_left,\r\n    \"]\": this.tokens.bracket_right,\r\n    \"=\": this.tokens.equal,\r\n    \"==\": this.tokens.equal_equal,\r\n    \"!=\": this.tokens.not_equal,\r\n    \">\": this.tokens.greater_than,\r\n    \">=\": this.tokens.greater_than_equal,\r\n    \">>\": this.tokens.shift_right,\r\n    \"<\": this.tokens.less_than,\r\n    \"<=\": this.tokens.less_than_equal,\r\n    \"<<\": this.tokens.shift_left,\r\n    \"%\": this.tokens.modulo,\r\n    \"-\": this.tokens.minus,\r\n    \"--\": this.tokens.minus_minus,\r\n    \".\": this.tokens.period,\r\n    \"+\": this.tokens.plus,\r\n    \"++\": this.tokens.plus_plus,\r\n    \"|\": this.tokens.or,\r\n    \"||\": this.tokens.or_or,\r\n    \"*\": this.tokens.star,\r\n    \"~\": this.tokens.tilde,\r\n    \"_\": this.tokens.underscore,\r\n    \"^\": this.tokens.xor,\r\n    \"+=\": this.tokens.plus_equal,\r\n    \"-=\": this.tokens.minus_equal,\r\n    \"*=\": this.tokens.times_equal,\r\n    \"/=\": this.tokens.division_equal,\r\n    \"%=\": this.tokens.modulo_equal,\r\n    \"&=\": this.tokens.and_equal,\r\n    \"|=\": this.tokens.or_equal,\r\n    \"^=\": this.tokens.xor_equal,\r\n    \">>=\": this.tokens.shift_right_equal,\r\n    \"<<=\": this.tokens.shift_left_equal,\r\n  };\r\n\r\n  static readonly regexTokens = {\r\n    decimal_float_literal: this.tokens.decimal_float_literal,\r\n    hex_float_literal: this.tokens.hex_float_literal,\r\n    int_literal: this.tokens.int_literal,\r\n    uint_literal: this.tokens.uint_literal,\r\n    ident: this.tokens.ident,\r\n  };\r\n\r\n  static readonly storage_class = [\r\n    this.keywords.function,\r\n    this.keywords.private,\r\n    this.keywords.workgroup,\r\n    this.keywords.uniform,\r\n    this.keywords.storage,\r\n  ];\r\n\r\n  static readonly access_mode = [\r\n    this.keywords.read,\r\n    this.keywords.write,\r\n    this.keywords.read_write,\r\n  ];\r\n\r\n  static readonly sampler_type = [\r\n    this.keywords.sampler,\r\n    this.keywords.sampler_comparison,\r\n  ];\r\n\r\n  static readonly sampled_texture_type = [\r\n    this.keywords.texture_1d,\r\n    this.keywords.texture_2d,\r\n    this.keywords.texture_2d_array,\r\n    this.keywords.texture_3d,\r\n    this.keywords.texture_cube,\r\n    this.keywords.texture_cube_array,\r\n  ];\r\n\r\n  static readonly multisampled_texture_type = [\r\n    this.keywords.texture_multisampled_2d,\r\n  ];\r\n\r\n  static readonly storage_texture_type = [\r\n    this.keywords.texture_storage_1d,\r\n    this.keywords.texture_storage_2d,\r\n    this.keywords.texture_storage_2d_array,\r\n    this.keywords.texture_storage_3d,\r\n  ];\r\n\r\n  static readonly depth_texture_type = [\r\n    this.keywords.texture_depth_2d,\r\n    this.keywords.texture_depth_2d_array,\r\n    this.keywords.texture_depth_cube,\r\n    this.keywords.texture_depth_cube_array,\r\n    this.keywords.texture_depth_multisampled_2d,\r\n  ];\r\n\r\n  static readonly texture_external_type = [this.keywords.texture_external];\r\n\r\n  static readonly any_texture_type = [\r\n    ...this.sampled_texture_type,\r\n    ...this.multisampled_texture_type,\r\n    ...this.storage_texture_type,\r\n    ...this.depth_texture_type,\r\n    ...this.texture_external_type,\r\n  ];\r\n\r\n  static readonly texel_format = [\r\n    this.keywords.r8unorm,\r\n    this.keywords.r8snorm,\r\n    this.keywords.r8uint,\r\n    this.keywords.r8sint,\r\n    this.keywords.r16uint,\r\n    this.keywords.r16sint,\r\n    this.keywords.r16float,\r\n    this.keywords.rg8unorm,\r\n    this.keywords.rg8snorm,\r\n    this.keywords.rg8uint,\r\n    this.keywords.rg8sint,\r\n    this.keywords.r32uint,\r\n    this.keywords.r32sint,\r\n    this.keywords.r32float,\r\n    this.keywords.rg16uint,\r\n    this.keywords.rg16sint,\r\n    this.keywords.rg16float,\r\n    this.keywords.rgba8unorm,\r\n    this.keywords.rgba8unorm_srgb,\r\n    this.keywords.rgba8snorm,\r\n    this.keywords.rgba8uint,\r\n    this.keywords.rgba8sint,\r\n    this.keywords.bgra8unorm,\r\n    this.keywords.bgra8unorm_srgb,\r\n    this.keywords.rgb10a2unorm,\r\n    this.keywords.rg11b10float,\r\n    this.keywords.rg32uint,\r\n    this.keywords.rg32sint,\r\n    this.keywords.rg32float,\r\n    this.keywords.rgba16uint,\r\n    this.keywords.rgba16sint,\r\n    this.keywords.rgba16float,\r\n    this.keywords.rgba32uint,\r\n    this.keywords.rgba32sint,\r\n    this.keywords.rgba32float,\r\n  ];\r\n\r\n  static readonly const_literal = [\r\n    this.tokens.int_literal,\r\n    this.tokens.uint_literal,\r\n    this.tokens.decimal_float_literal,\r\n    this.tokens.hex_float_literal,\r\n    this.keywords.true,\r\n    this.keywords.false,\r\n  ];\r\n\r\n  static readonly literal_or_ident = [\r\n    this.tokens.ident,\r\n    this.tokens.int_literal,\r\n    this.tokens.uint_literal,\r\n    this.tokens.decimal_float_literal,\r\n    this.tokens.hex_float_literal,\r\n  ];\r\n\r\n  static readonly element_count_expression = [\r\n    this.tokens.int_literal,\r\n    this.tokens.uint_literal,\r\n    this.tokens.ident,\r\n  ];\r\n\r\n  static readonly template_types = [\r\n    this.keywords.vec2,\r\n    this.keywords.vec3,\r\n    this.keywords.vec4,\r\n    this.keywords.mat2x2,\r\n    this.keywords.mat2x3,\r\n    this.keywords.mat2x4,\r\n    this.keywords.mat3x2,\r\n    this.keywords.mat3x3,\r\n    this.keywords.mat3x4,\r\n    this.keywords.mat4x2,\r\n    this.keywords.mat4x3,\r\n    this.keywords.mat4x4,\r\n    this.keywords.atomic,\r\n    this.keywords.bitcast,\r\n    ...this.any_texture_type,\r\n  ];\r\n\r\n  // The grammar calls out 'block', but attribute grammar is defined to use a 'ident'.\r\n  // The attribute grammar should be ident | block.\r\n  static readonly attribute_name = [this.tokens.ident, this.keywords.block, this.keywords.diagnostic];\r\n\r\n  static readonly assignment_operators = [\r\n    this.tokens.equal,\r\n    this.tokens.plus_equal,\r\n    this.tokens.minus_equal,\r\n    this.tokens.times_equal,\r\n    this.tokens.division_equal,\r\n    this.tokens.modulo_equal,\r\n    this.tokens.and_equal,\r\n    this.tokens.or_equal,\r\n    this.tokens.xor_equal,\r\n    this.tokens.shift_right_equal,\r\n    this.tokens.shift_left_equal,\r\n  ];\r\n\r\n  static readonly increment_operators = [\r\n    this.tokens.plus_plus,\r\n    this.tokens.minus_minus,\r\n  ];\r\n}\r\n\r\n/// A token parsed by the WgslScanner.\r\nexport class Token {\r\n  readonly type: TokenType;\r\n  readonly lexeme: string;\r\n  readonly line: number;\r\n\r\n  constructor(type: TokenType, lexeme: string, line: number) {\r\n    this.type = type;\r\n    this.lexeme = lexeme;\r\n    this.line = line;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.lexeme;\r\n  }\r\n\r\n  isTemplateType(): boolean {\r\n    return TokenTypes.template_types.indexOf(this.type) != -1;\r\n  }\r\n\r\n  isArrayType(): boolean {\r\n    return this.type == TokenTypes.keywords.array;\r\n  }\r\n\r\n  isArrayOrTemplateType(): boolean {\r\n    return this.isArrayType() || this.isTemplateType();\r\n  }\r\n}\r\n\r\n/// Lexical scanner for the WGSL language. This takes an input source text and generates a list\r\n/// of Token objects, which can then be fed into the WgslParser to generate an AST.\r\nexport class WgslScanner {\r\n  private _source: string;\r\n  private _tokens: Array<Token> = [];\r\n  private _start = 0;\r\n  private _current = 0;\r\n  private _line = 1;\r\n\r\n  constructor(source?: string) {\r\n    this._source = source ?? \"\";\r\n  }\r\n\r\n  /// Scan all tokens from the source.\r\n  scanTokens(): Array<Token> {\r\n    while (!this._isAtEnd()) {\r\n      this._start = this._current;\r\n      if (!this.scanToken()) {\r\n        throw `Invalid syntax at line ${this._line}`;\r\n      }\r\n    }\r\n\r\n    this._tokens.push(new Token(TokenTypes.eof, \"\", this._line));\r\n    return this._tokens;\r\n  }\r\n\r\n  /// Scan a single token from the source.\r\n  scanToken(): boolean {\r\n    // Find the longest consecutive set of characters that match a rule.\r\n    let lexeme = this._advance();\r\n\r\n    // Skip line-feed, adding to the line counter.\r\n    if (lexeme == \"\\n\") {\r\n      this._line++;\r\n      return true;\r\n    }\r\n\r\n    // Skip whitespace\r\n    if (this._isWhitespace(lexeme)) {\r\n      return true;\r\n    }\r\n\r\n    if (lexeme == \"/\") {\r\n      // If it's a // comment, skip everything until the next line-feed.\r\n      if (this._peekAhead() == \"/\") {\r\n        while (lexeme != \"\\n\") {\r\n          if (this._isAtEnd()) {\r\n            return true;\r\n          }\r\n          lexeme = this._advance();\r\n        }\r\n        // skip the linefeed\r\n        this._line++;\r\n        return true;\r\n      } else if (this._peekAhead() == \"*\") {\r\n        // If it's a / * block comment, skip everything until the matching * /,\r\n        // allowing for nested block comments.\r\n        this._advance();\r\n        let commentLevel = 1;\r\n        while (commentLevel > 0) {\r\n          if (this._isAtEnd()) {\r\n            return true;\r\n          }\r\n          lexeme = this._advance();\r\n          if (lexeme == \"\\n\") {\r\n            this._line++;\r\n          } else if (lexeme == \"*\") {\r\n            if (this._peekAhead() == \"/\") {\r\n              this._advance();\r\n              commentLevel--;\r\n              if (commentLevel == 0) {\r\n                return true;\r\n              }\r\n            }\r\n          } else if (lexeme == \"/\") {\r\n            if (this._peekAhead() == \"*\") {\r\n              this._advance();\r\n              commentLevel++;\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // Shortcut single character tokens\r\n    const simpleToken = TokenTypes.simpleTokens[lexeme];\r\n    if (simpleToken) {\r\n      this._addToken(simpleToken);\r\n      return true;\r\n    }\r\n\r\n    // Shortcut keywords and identifiers\r\n    let matchType = TokenTypes.none;\r\n    const isAlpha = this._isAlpha(lexeme);\r\n    const isUnderscore = lexeme === \"_\";\r\n\r\n    if (this._isAlphaNumeric(lexeme)) {\r\n      let nextChar = this._peekAhead();\r\n      while (this._isAlphaNumeric(nextChar)) {\r\n        lexeme += this._advance();\r\n        nextChar = this._peekAhead();\r\n      }\r\n    }\r\n\r\n    if (isAlpha) {\r\n      const matchedType = TokenTypes.keywords[lexeme];\r\n      if (matchedType) {\r\n        this._addToken(matchedType);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (isAlpha || isUnderscore) {\r\n      this._addToken(TokenTypes.tokens.ident);\r\n      return true;\r\n    }\r\n\r\n    // Scan for the next valid token type\r\n    for (;;) {\r\n      let matchedType = this._findType(lexeme);\r\n\r\n      // An exception to \"longest lexeme\" rule is '>>'. In the case of 1>>2, it's a\r\n      // shift_right.\r\n      // In the case of array<vec4<f32>>, it's two greater_than's (one to close the vec4,\r\n      // and one to close the array).\r\n      // Another ambiguity is '>='. In the case of vec2<i32>=vec2(1,2),\r\n      // it's a greather_than and an equal, not a greater_than_equal.\r\n      // Another ambiguity is '-'. In the case of a-2, it's a minus; in the case of a*-2, it's a -2;\r\n      // in the case of foo()->int, it's a ->; in the case of foo-- or --foo, it's a -- decrement.\r\n\r\n      // WGSL requires context sensitive parsing to resolve these ambiguities. Both of these cases\r\n      // are predicated on it the > either closing a template, or being part of an operator.\r\n      // The solution here is to check if there was a less_than up to some number of tokens\r\n      // previously, and the token prior to that is a keyword that requires a '<', then it will be\r\n      // split into two operators; otherwise it's a single operator.\r\n      const nextLexeme = this._peekAhead();\r\n      if (lexeme == \"-\" && this._tokens.length > 0) {\r\n        if (nextLexeme == \"=\") {\r\n          this._current++;\r\n          lexeme += nextLexeme;\r\n          this._addToken(TokenTypes.tokens.minus_equal);\r\n          return true;\r\n        }\r\n        if (nextLexeme == \"-\") {\r\n          this._current++;\r\n          lexeme += nextLexeme;\r\n          this._addToken(TokenTypes.tokens.minus_minus);\r\n          return true;\r\n        }\r\n        const ti = this._tokens.length - 1;\r\n        const isIdentOrLiteral = TokenTypes.literal_or_ident.indexOf(this._tokens[ti].type) != -1;\r\n        if ((isIdentOrLiteral || this._tokens[ti].type == TokenTypes.tokens.paren_right) && nextLexeme != \">\") {\r\n          this._addToken(matchedType);\r\n          return true;\r\n        }\r\n      }\r\n      if (lexeme == \">\" && (nextLexeme == \">\" || nextLexeme == \"=\")) {\r\n        let foundLessThan = false;\r\n        let ti = this._tokens.length - 1;\r\n        for (let count = 0; count < 5 && ti >= 0; ++count, --ti) {\r\n          if (TokenTypes.assignment_operators.indexOf(this._tokens[ti].type) !== -1) {\r\n            break;\r\n          }\r\n          if (this._tokens[ti].type === TokenTypes.tokens.less_than) {\r\n            if (ti > 0 && this._tokens[ti - 1].isArrayOrTemplateType()) {\r\n              foundLessThan = true;\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        // If there was a less_than in the recent token history, then this is probably a\r\n        // greater_than.\r\n        if (foundLessThan) {\r\n          this._addToken(matchedType);\r\n          return true;\r\n        }\r\n      }\r\n\r\n      // The current lexeme may not match any rule, but some token types may be invalid for\r\n      // part of the string but valid after a few more characters.\r\n      // For example, 0x.5 is a hex_float_literal. But as it's being scanned,\r\n      // \"0\" is a int_literal, then \"0x\" is invalid. If we stopped there, it would return\r\n      // the int_literal \"0\", but that's incorrect. So if we look forward a few characters,\r\n      // we'd get \"0x.\", which is still invalid, followed by \"0x.5\" which is the correct\r\n      // hex_float_literal. So that means if we hit an non-matching string, we should look\r\n      // ahead up to two characters to see if the string starts matching a valid rule again.\r\n      if (matchedType === TokenTypes.none) {\r\n        let lookAheadLexeme = lexeme;\r\n        let lookAhead = 0;\r\n        const maxLookAhead = 2;\r\n        for (let li = 0; li < maxLookAhead; ++li) {\r\n          lookAheadLexeme += this._peekAhead(li);\r\n          matchedType = this._findType(lookAheadLexeme);\r\n          if (matchedType !== TokenTypes.none) {\r\n            lookAhead = li;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (matchedType === TokenTypes.none) {\r\n          if (matchType === TokenTypes.none) {\r\n            return false;\r\n          }\r\n          this._current--;\r\n          this._addToken(matchType);\r\n          return true;\r\n        }\r\n\r\n        lexeme = lookAheadLexeme;\r\n        this._current += lookAhead + 1;\r\n      }\r\n\r\n      matchType = matchedType;\r\n\r\n      if (this._isAtEnd()) {\r\n        break;\r\n      }\r\n\r\n      lexeme += this._advance();\r\n    }\r\n\r\n    // We got to the end of the input stream. Then the token we've ready so far is it.\r\n    if (matchType === TokenTypes.none) {\r\n      return false;\r\n    }\r\n\r\n    this._addToken(matchType);\r\n    return true;\r\n  }\r\n\r\n  _findType(lexeme: string): TokenType {\r\n    for (const name in TokenTypes.regexTokens) {\r\n      const type = TokenTypes.regexTokens[name];\r\n      if (this._match(lexeme, type.rule)) {\r\n        return type;\r\n      }\r\n    }\r\n\r\n    const type = TokenTypes.literalTokens[lexeme];\r\n    if (type) {\r\n      return type;\r\n    }\r\n    return TokenTypes.none;\r\n  }\r\n\r\n  _match(lexeme: string, rule: RegExp): boolean {\r\n    const match = rule.exec(lexeme);\r\n    return match && match.index == 0 && match[0] == lexeme;\r\n  }\r\n\r\n  _isAtEnd(): boolean {\r\n    return this._current >= this._source.length;\r\n  }\r\n\r\n  _isAlpha(c: string): boolean {\r\n    return (c >= \"a\" && c <= \"z\") || (c >= \"A\" && c <= \"Z\");\r\n  }\r\n\r\n  _isAlphaNumeric(c: string): boolean {\r\n    return (c >= \"a\" && c <= \"z\") || (c >= \"A\" && c <= \"Z\") || c == \"_\" || (c >= \"0\" && c <= \"9\");\r\n  }\r\n\r\n  _isWhitespace(c: string): boolean {\r\n    return c == \" \" || c == \"\\t\" || c == \"\\r\";\r\n  }\r\n\r\n  _advance(amount: number = 0): string {\r\n    let c = this._source[this._current];\r\n    amount = amount || 0;\r\n    amount++;\r\n    this._current += amount;\r\n    return c;\r\n  }\r\n\r\n  _peekAhead(offset: number = 0): string {\r\n    offset = offset || 0;\r\n    if (this._current + offset >= this._source.length) {\r\n      return \"\\0\";\r\n    }\r\n    return this._source[this._current + offset];\r\n  }\r\n\r\n  _addToken(type: TokenType) {\r\n    const text = this._source.substring(this._start, this._current);\r\n    this._tokens.push(new Token(type, text, this._line));\r\n  }\r\n}\r\n","/**\r\n * @author Brendan Duncan / https://github.com/brendan-duncan\r\n */\r\nimport { WgslScanner, Token, TokenType, TokenTypes } from \"./wgsl_scanner.js\";\r\nimport * as AST from \"./wgsl_ast.js\";\r\n\r\n/// Parse a sequence of tokens from the WgslScanner into an Abstract Syntax Tree (AST).\r\nexport class WgslParser {\r\n  _tokens: Array<Token> = [];\r\n  _current: number = 0;\r\n  _currentLine: number = 0;\r\n  _context: AST.ParseContext = new AST.ParseContext();\r\n  _deferArrayCountEval: Array<Object> = [];\r\n\r\n  parse(tokensOrCode: Array<Token> | string): Array<AST.Statement> {\r\n    this._initialize(tokensOrCode);\r\n\r\n    this._deferArrayCountEval.length = 0;\r\n\r\n    const statements: Array<AST.Statement> = [];\r\n    while (!this._isAtEnd()) {\r\n      const statement = this._global_decl_or_directive();\r\n      if (!statement) {\r\n        break;\r\n      }\r\n      statements.push(statement);\r\n    }\r\n\r\n    // Since constants can be declared after they are used, and\r\n    // constants can be used to size arrays, defer calculating the\r\n    // size until after the shader has finished parsing.\r\n    if (this._deferArrayCountEval.length > 0) {\r\n      for (const arrayDecl of this._deferArrayCountEval) {\r\n        const arrayType = arrayDecl[\"arrayType\"];\r\n        const countNode = arrayDecl[\"countNode\"];\r\n\r\n        if (countNode instanceof AST.VariableExpr) {\r\n          const variable = countNode as AST.VariableExpr;\r\n          const name = variable.name;\r\n          const constant = this._context.constants.get(name);\r\n          if (constant) {\r\n            try {\r\n              const count = constant.evaluate(this._context);\r\n              arrayType.count = count;\r\n            } catch (e) {\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this._deferArrayCountEval.length = 0;\r\n    }\r\n\r\n    return statements;\r\n  }\r\n\r\n  _initialize(tokensOrCode: Array<Token> | string) {\r\n    if (tokensOrCode) {\r\n      if (typeof tokensOrCode == \"string\") {\r\n        const scanner = new WgslScanner(tokensOrCode);\r\n        this._tokens = scanner.scanTokens();\r\n      } else {\r\n        this._tokens = tokensOrCode;\r\n      }\r\n    } else {\r\n      this._tokens = [];\r\n    }\r\n    this._current = 0;\r\n  }\r\n\r\n  _updateNode<T extends AST.Node>(n: T, l?: number): T {\r\n    n.line = l ?? this._currentLine;\r\n    return n;\r\n  }\r\n\r\n  _error(token: Token, message: string | null): Object {\r\n    return {\r\n      token,\r\n      message,\r\n      toString: function () {\r\n        return `${message}`;\r\n      },\r\n    };\r\n  }\r\n\r\n  _isAtEnd(): boolean {\r\n    return (\r\n      this._current >= this._tokens.length ||\r\n      this._peek().type == TokenTypes.eof\r\n    );\r\n  }\r\n\r\n  _match(types: TokenType | Array<TokenType>): boolean {\r\n    if (types instanceof TokenType) {\r\n      if (this._check(types)) {\r\n        this._advance();\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0, l = types.length; i < l; ++i) {\r\n      const type = types[i];\r\n      if (this._check(type)) {\r\n        this._advance();\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _consume(types: TokenType | Array<TokenType>, message: string | null): Token {\r\n    if (this._check(types)) {\r\n      return this._advance();\r\n    }\r\n    throw this._error(this._peek(), message);\r\n  }\r\n\r\n  _check(types: TokenType | Array<TokenType>): boolean {\r\n    if (this._isAtEnd()) {\r\n      return false;\r\n    }\r\n    const tk = this._peek();\r\n    if (types instanceof Array) {\r\n      const t = tk.type;\r\n      const index = types.indexOf(t);\r\n      return index != -1;\r\n    }\r\n    return tk.type == types;\r\n  }\r\n\r\n  _advance(): Token {\r\n    this._currentLine = this._peek()?.line ?? -1;\r\n    if (!this._isAtEnd()) {\r\n      this._current++;\r\n    }\r\n    return this._previous();\r\n  }\r\n\r\n  _peek(): Token {\r\n    return this._tokens[this._current];\r\n  }\r\n\r\n  _previous(): Token {\r\n    return this._tokens[this._current - 1];\r\n  }\r\n\r\n  _global_decl_or_directive(): AST.Statement | null {\r\n    // semicolon\r\n    // global_variable_decl semicolon\r\n    // global_constant_decl semicolon\r\n    // type_alias semicolon\r\n    // struct_decl\r\n    // function_decl\r\n    // enable_directive\r\n\r\n    // Ignore any stand-alone semicolons\r\n    while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd());\r\n\r\n    if (this._match(TokenTypes.keywords.alias)) {\r\n      const type = this._type_alias();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      return type;\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.diagnostic)) {\r\n      const directive = this._diagnostic();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      return directive;\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.requires)) {\r\n      const requires = this._requires_directive();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      return requires;\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.enable)) {\r\n      const enable = this._enable_directive();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      return enable;\r\n    }\r\n\r\n    // The following statements have an optional attribute*\r\n    const attrs = this._attribute();\r\n\r\n    if (this._check(TokenTypes.keywords.var)) {\r\n      const _var = this._global_variable_decl();\r\n      if (_var != null) {\r\n        _var.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      return _var;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.override)) {\r\n      const _override = this._override_variable_decl();\r\n      if (_override != null) {\r\n        _override.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      return _override;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.let)) {\r\n      const _let = this._global_let_decl();\r\n      if (_let != null) {\r\n        _let.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      return _let;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.const)) {\r\n      const _const = this._global_const_decl();\r\n      if (_const != null) {\r\n        _const.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      return _const;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.struct)) {\r\n      const _struct = this._struct_decl();\r\n      if (_struct != null) {\r\n        _struct.attributes = attrs;\r\n      }\r\n      return _struct;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.fn)) {\r\n      const _fn = this._function_decl();\r\n      if (_fn != null) {\r\n        _fn.attributes = attrs;\r\n      }\r\n      return _fn;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _function_decl(): AST.Function | null {\r\n    // attribute* function_header compound_statement\r\n    // function_header: fn ident paren_left param_list? paren_right (arrow attribute* type_decl)?\r\n    if (!this._match(TokenTypes.keywords.fn)) {\r\n      return null;\r\n    }\r\n\r\n    const startLine = this._currentLine;\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected function name.\"\r\n    ).toString();\r\n\r\n    this._consume(\r\n      TokenTypes.tokens.paren_left,\r\n      \"Expected '(' for function arguments.\"\r\n    );\r\n\r\n    const args: Array<AST.Argument> = [];\r\n    if (!this._check(TokenTypes.tokens.paren_right)) {\r\n      do {\r\n        if (this._check(TokenTypes.tokens.paren_right)) {\r\n          break;\r\n        }\r\n        const argAttrs = this._attribute();\r\n\r\n        const name = this._consume(\r\n          TokenTypes.tokens.ident,\r\n          \"Expected argument name.\"\r\n        ).toString();\r\n\r\n        this._consume(\r\n          TokenTypes.tokens.colon,\r\n          \"Expected ':' for argument type.\"\r\n        );\r\n\r\n        const typeAttrs = this._attribute();\r\n        const type = this._type_decl();\r\n        if (type != null) {\r\n          type.attributes = typeAttrs;\r\n\r\n          args.push(this._updateNode(new AST.Argument(name, type, argAttrs)));\r\n        }\r\n      } while (this._match(TokenTypes.tokens.comma));\r\n    }\r\n\r\n    this._consume(\r\n      TokenTypes.tokens.paren_right,\r\n      \"Expected ')' after function arguments.\"\r\n    );\r\n\r\n    let _return: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.arrow)) {\r\n      const attrs = this._attribute();\r\n      _return = this._type_decl();\r\n      if (_return != null) {\r\n        _return.attributes = attrs;\r\n      }\r\n    }\r\n\r\n    const body = this._compound_statement();\r\n\r\n    const endLine = this._currentLine;\r\n\r\n    return this._updateNode(new AST.Function(name, args, _return, body, startLine, endLine), startLine);\r\n  }\r\n\r\n  _compound_statement(): Array<AST.Statement> {\r\n    // brace_left statement* brace_right\r\n    const statements: Array<AST.Statement> = [];\r\n\r\n    this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for block.\");\r\n    while (!this._check(TokenTypes.tokens.brace_right)) {\r\n      const statement = this._statement();\r\n      if (statement !== null) {\r\n        statements.push(statement as AST.Statement);\r\n      }\r\n    }\r\n    this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for block.\");\r\n\r\n    return statements;\r\n  }\r\n\r\n  _statement(): AST.Statement | Array<AST.Statement> | null {\r\n    // semicolon\r\n    // return_statement semicolon\r\n    // if_statement\r\n    // switch_statement\r\n    // loop_statement\r\n    // for_statement\r\n    // func_call_statement semicolon\r\n    // variable_statement semicolon\r\n    // break_statement semicolon\r\n    // continue_statement semicolon\r\n    // continuing_statement compound_statement\r\n    // discard semicolon\r\n    // assignment_statement semicolon\r\n    // compound_statement\r\n    // increment_statement semicolon\r\n    // decrement_statement semicolon\r\n    // static_assert_statement semicolon\r\n\r\n    // Ignore any stand-alone semicolons\r\n    while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd());\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.if)) {\r\n      return this._if_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.switch)) {\r\n      return this._switch_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.loop)) {\r\n      return this._loop_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.for)) {\r\n      return this._for_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.while)) {\r\n      return this._while_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.continuing)) {\r\n      return this._continuing_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.static_assert)) {\r\n      return this._static_assert_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.tokens.brace_left)) {\r\n      return this._compound_statement();\r\n    }\r\n\r\n    let result: AST.Statement | null = null;\r\n    if (this._check(TokenTypes.keywords.return)) {\r\n      result = this._return_statement();\r\n    } else if (\r\n      this._check([\r\n        TokenTypes.keywords.var,\r\n        TokenTypes.keywords.let,\r\n        TokenTypes.keywords.const,\r\n      ])\r\n    ) {\r\n      result = this._variable_statement();\r\n    } else if (this._match(TokenTypes.keywords.discard)) {\r\n      result = this._updateNode(new AST.Discard());\r\n    } else if (this._match(TokenTypes.keywords.break)) {\r\n      const breakStmt = this._updateNode(new AST.Break());\r\n      result = breakStmt;\r\n      if (this._check(TokenTypes.keywords.if)) {\r\n        // break-if\r\n        this._advance();\r\n        breakStmt.condition = this._optional_paren_expression();\r\n        if (breakStmt.condition instanceof AST.GroupingExpr && breakStmt.condition.contents.length === 1) {\r\n          breakStmt.condition = breakStmt.condition.contents[0];\r\n        }\r\n      }\r\n    } else if (this._match(TokenTypes.keywords.continue)) {\r\n      result = this._updateNode(new AST.Continue());\r\n    } else {\r\n      result =\r\n        this._increment_decrement_statement() ||\r\n        this._func_call_statement() ||\r\n        this._assignment_statement();\r\n    }\r\n\r\n    if (result != null) {\r\n      this._consume(\r\n        TokenTypes.tokens.semicolon,\r\n        \"Expected ';' after statement.\"\r\n      );\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  _static_assert_statement(): AST.StaticAssert | null {\r\n    if (!this._match(TokenTypes.keywords.static_assert)) {\r\n      return null;\r\n    }\r\n    const expression = this._optional_paren_expression();\r\n    return this._updateNode(new AST.StaticAssert(expression));\r\n  }\r\n\r\n  _while_statement(): AST.While | null {\r\n    if (!this._match(TokenTypes.keywords.while)) {\r\n      return null;\r\n    }\r\n    const condition = this._optional_paren_expression();\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    const block = this._compound_statement();\r\n    return this._updateNode(new AST.While(condition, block));\r\n  }\r\n\r\n  _continuing_statement(): AST.Continuing | null {\r\n    if (!this._match(TokenTypes.keywords.continuing)) {\r\n      return null;\r\n    }\r\n    const block = this._compound_statement();\r\n    return this._updateNode(new AST.Continuing(block));\r\n  }\r\n\r\n  _for_statement(): AST.For | null {\r\n    // for paren_left for_header paren_right compound_statement\r\n    if (!this._match(TokenTypes.keywords.for)) {\r\n      return null;\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\r\n\r\n    // for_header: (variable_statement assignment_statement func_call_statement)? semicolon short_circuit_or_expression? semicolon (assignment_statement func_call_statement)?\r\n    const init = !this._check(TokenTypes.tokens.semicolon)\r\n      ? this._for_init()\r\n      : null;\r\n    this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n    const condition = !this._check(TokenTypes.tokens.semicolon)\r\n      ? this._short_circuit_or_expression()\r\n      : null;\r\n    this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n    const increment = !this._check(TokenTypes.tokens.paren_right)\r\n      ? this._for_increment()\r\n      : null;\r\n\r\n    this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    const body = this._compound_statement();\r\n\r\n    return this._updateNode(new AST.For(init, condition, increment, body));\r\n  }\r\n\r\n  _for_init(): AST.Statement | null {\r\n    // (variable_statement assignment_statement func_call_statement)?\r\n    return (\r\n      this._variable_statement() ||\r\n      this._func_call_statement() ||\r\n      this._assignment_statement()\r\n    );\r\n  }\r\n\r\n  _for_increment(): AST.Statement | null {\r\n    // (assignment_statement func_call_statement increment_statement)?\r\n    return (\r\n      this._func_call_statement() ||\r\n      this._increment_decrement_statement() ||\r\n      this._assignment_statement()\r\n    );\r\n  }\r\n\r\n  _variable_statement(): AST.Var | null {\r\n    // variable_decl\r\n    // variable_decl equal short_circuit_or_expression\r\n    // let (ident variable_ident_decl) equal short_circuit_or_expression\r\n    // const (ident variable_ident_decl) equal short_circuit_or_expression\r\n    if (this._check(TokenTypes.keywords.var)) {\r\n      const _var = this._variable_decl();\r\n      if (_var === null) {\r\n        throw this._error(this._peek(), \"Variable declaration expected.\");\r\n      }\r\n      let value: AST.Expression | null = null;\r\n      if (this._match(TokenTypes.tokens.equal)) {\r\n        value = this._short_circuit_or_expression();\r\n      }\r\n\r\n      return this._updateNode(new AST.Var(\r\n        _var.name,\r\n        _var.type,\r\n        _var.storage,\r\n        _var.access,\r\n        value\r\n      ));\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.let)) {\r\n      const name = this._consume(\r\n        TokenTypes.tokens.ident,\r\n        \"Expected name for let.\"\r\n      ).toString();\r\n      let type: AST.Type | null = null;\r\n      if (this._match(TokenTypes.tokens.colon)) {\r\n        const typeAttrs = this._attribute();\r\n        type = this._type_decl();\r\n        if (type != null) {\r\n          type.attributes = typeAttrs;\r\n        }\r\n      }\r\n      this._consume(TokenTypes.tokens.equal, \"Expected '=' for let.\");\r\n      const value = this._short_circuit_or_expression();\r\n      return this._updateNode(new AST.Let(name, type, null, null, value));\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.const)) {\r\n      const name = this._consume(\r\n        TokenTypes.tokens.ident,\r\n        \"Expected name for const.\"\r\n      ).toString();\r\n      let type: AST.Type | null = null;\r\n      if (this._match(TokenTypes.tokens.colon)) {\r\n        const typeAttrs = this._attribute();\r\n        type = this._type_decl();\r\n        if (type != null) {\r\n          type.attributes = typeAttrs;\r\n        }\r\n      }\r\n      this._consume(TokenTypes.tokens.equal, \"Expected '=' for const.\");\r\n      const value = this._short_circuit_or_expression();\r\n      return this._updateNode(new AST.Const(name, type, null, null, value));\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _increment_decrement_statement(): AST.Statement | null {\r\n    const savedPos = this._current;\r\n\r\n    const _var = this._unary_expression();\r\n    if (_var == null) {\r\n      return null;\r\n    }\r\n\r\n    if (!this._check(TokenTypes.increment_operators)) {\r\n      this._current = savedPos;\r\n      return null;\r\n    }\r\n\r\n    const token = this._consume(\r\n      TokenTypes.increment_operators,\r\n      \"Expected increment operator\"\r\n    );\r\n\r\n    return this._updateNode(new AST.Increment(\r\n      token.type === TokenTypes.tokens.plus_plus\r\n        ? AST.IncrementOperator.increment\r\n        : AST.IncrementOperator.decrement,\r\n      _var\r\n    ));\r\n  }\r\n\r\n  _assignment_statement(): AST.Assign | null {\r\n    // (unary_expression underscore) equal short_circuit_or_expression\r\n    let _var: AST.Expression | null = null;\r\n\r\n    if (this._check(TokenTypes.tokens.brace_right)) {\r\n      return null;\r\n    }\r\n\r\n    let isUnderscore = this._match(TokenTypes.tokens.underscore);\r\n    if (!isUnderscore) {\r\n      _var = this._unary_expression();\r\n    }\r\n\r\n    if (!isUnderscore && _var == null) {\r\n      return null;\r\n    }\r\n\r\n    const type = this._consume(\r\n      TokenTypes.assignment_operators,\r\n      \"Expected assignment operator.\"\r\n    );\r\n\r\n    const value = this._short_circuit_or_expression();\r\n\r\n    return this._updateNode(new AST.Assign(\r\n      AST.AssignOperator.parse(type.lexeme),\r\n      _var as AST.Expression,\r\n      value\r\n    ));\r\n  }\r\n\r\n  _func_call_statement(): AST.Call | null {\r\n    // ident argument_expression_list\r\n    if (!this._check(TokenTypes.tokens.ident)) {\r\n      return null;\r\n    }\r\n\r\n    const savedPos = this._current;\r\n    const name = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected function name.\"\r\n    );\r\n    const args = this._argument_expression_list();\r\n\r\n    if (args === null) {\r\n      this._current = savedPos;\r\n      return null;\r\n    }\r\n\r\n    return this._updateNode(new AST.Call(name.lexeme, args));\r\n  }\r\n\r\n  _loop_statement(): AST.Loop | null {\r\n    // loop brace_left statement* continuing_statement? brace_right\r\n    if (!this._match(TokenTypes.keywords.loop)) {\r\n      return null;\r\n    }\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for loop.\");\r\n\r\n    // statement*\r\n    const statements: Array<AST.Statement> = [];\r\n    let statement = this._statement();\r\n    while (statement !== null) {\r\n      if (Array.isArray(statement)) {\r\n        for (let s of statement) {\r\n          statements.push(s);\r\n        }\r\n      } else {\r\n        statements.push(statement);\r\n      }\r\n      statement = this._statement();\r\n    }\r\n\r\n    // continuing_statement: continuing compound_statement\r\n    let continuing: Array<AST.Statement> | null = null;\r\n    if (this._match(TokenTypes.keywords.continuing)) {\r\n      continuing = this._compound_statement();\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for loop.\");\r\n\r\n    return this._updateNode(new AST.Loop(statements, continuing));\r\n  }\r\n\r\n  _switch_statement(): AST.Switch | null {\r\n    // switch optional_paren_expression brace_left switch_body+ brace_right\r\n    if (!this._match(TokenTypes.keywords.switch)) {\r\n      return null;\r\n    }\r\n\r\n    const condition = this._optional_paren_expression();\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for switch.\");\r\n    const body = this._switch_body();\r\n    if (body == null || body.length == 0) {\r\n      throw this._error(this._previous(), \"Expected 'case' or 'default'.\");\r\n    }\r\n    this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for switch.\");\r\n    return this._updateNode(new AST.Switch(condition, body));\r\n  }\r\n\r\n  _switch_body(): Array<AST.Statement> {\r\n    // case case_selectors colon brace_left case_body? brace_right\r\n    // default colon brace_left case_body? brace_right\r\n    const cases: Array<AST.Statement> = [];\r\n    if (this._match(TokenTypes.keywords.case)) {\r\n      const selector = this._case_selectors();\r\n      this._match(TokenTypes.tokens.colon); // colon is optional\r\n\r\n      let attributes = null;\r\n      if (this._check(TokenTypes.tokens.attr)) {\r\n        attributes = this._attribute();\r\n      }\r\n\r\n      this._consume(\r\n        TokenTypes.tokens.brace_left,\r\n        \"Exected '{' for switch case.\"\r\n      );\r\n      const body = this._case_body();\r\n      this._consume(\r\n        TokenTypes.tokens.brace_right,\r\n        \"Exected '}' for switch case.\"\r\n      );\r\n      cases.push(this._updateNode(new AST.Case(selector, body)));\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.default)) {\r\n      this._match(TokenTypes.tokens.colon); // colon is optional\r\n      \r\n      let attributes = null;\r\n      if (this._check(TokenTypes.tokens.attr)) {\r\n        attributes = this._attribute();\r\n      }\r\n      \r\n      this._consume(\r\n        TokenTypes.tokens.brace_left,\r\n        \"Exected '{' for switch default.\"\r\n      );\r\n      const body = this._case_body();\r\n      this._consume(\r\n        TokenTypes.tokens.brace_right,\r\n        \"Exected '}' for switch default.\"\r\n      );\r\n      cases.push(this._updateNode(new AST.Default(body)));\r\n    }\r\n\r\n    if (this._check([TokenTypes.keywords.default, TokenTypes.keywords.case])) {\r\n      const _cases = this._switch_body();\r\n      cases.push(_cases[0]);\r\n    }\r\n\r\n    return cases;\r\n  }\r\n\r\n  _case_selectors(): Array<AST.Expression> {\r\n    // const_literal (comma const_literal)* comma?\r\n    const selectors = [\r\n      this._shift_expression(),//?.evaluate(this._context).toString() ?? \"\",\r\n    ];\r\n    while (this._match(TokenTypes.tokens.comma)) {\r\n      selectors.push(\r\n        this._shift_expression(),//?.evaluate(this._context).toString() ?? \"\"\r\n      );\r\n    }\r\n    return selectors;\r\n  }\r\n\r\n  _case_body(): Array<AST.Statement> {\r\n    // statement case_body?\r\n    // fallthrough semicolon\r\n    if (this._match(TokenTypes.keywords.fallthrough)) {\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      return [];\r\n    }\r\n\r\n    let statement = this._statement();\r\n    if (statement == null) {\r\n      return [];\r\n    }\r\n\r\n    if (!(statement instanceof Array)) {\r\n      statement = [statement];\r\n    }\r\n\r\n    const nextStatement = this._case_body();\r\n    if (nextStatement.length == 0) {\r\n      return statement;\r\n    }\r\n\r\n    return [...statement, nextStatement[0]];\r\n  }\r\n\r\n  _if_statement(): AST.If | null {\r\n    // if optional_paren_expression compound_statement elseif_statement? else_statement?\r\n    if (!this._match(TokenTypes.keywords.if)) {\r\n      return null;\r\n    }\r\n\r\n    const condition = this._optional_paren_expression();\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    const block = this._compound_statement();\r\n\r\n    let elseif: Array<AST.ElseIf> | null = [];\r\n    if (this._match_elseif()) {\r\n      let attributes = null;\r\n      if (this._check(TokenTypes.tokens.attr)) {\r\n        attributes = this._attribute();\r\n      }\r\n      elseif = this._elseif_statement(elseif);\r\n    }\r\n\r\n    let _else: Array<AST.Statement> | null = null;\r\n    if (this._match(TokenTypes.keywords.else)) {\r\n      let attributes = null;\r\n      if (this._check(TokenTypes.tokens.attr)) {\r\n        attributes = this._attribute();\r\n      }\r\n      _else = this._compound_statement();\r\n    }\r\n\r\n    return this._updateNode(new AST.If(condition, block, elseif, _else));\r\n  }\r\n\r\n  _match_elseif(): boolean {\r\n    if (\r\n      this._tokens[this._current].type === TokenTypes.keywords.else &&\r\n      this._tokens[this._current + 1].type === TokenTypes.keywords.if\r\n    ) {\r\n      this._advance();\r\n      this._advance();\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _elseif_statement(elseif: Array<AST.ElseIf> = []): Array<AST.ElseIf> {\r\n    // else_if optional_paren_expression compound_statement elseif_statement?\r\n    const condition = this._optional_paren_expression();\r\n    const block = this._compound_statement();\r\n    elseif.push(this._updateNode(new AST.ElseIf(condition, block)));\r\n    if (this._match_elseif()) {\r\n      let attributes = null;\r\n      if (this._check(TokenTypes.tokens.attr)) {\r\n        attributes = this._attribute();\r\n      }\r\n      this._elseif_statement(elseif);\r\n    }\r\n    return elseif;\r\n  }\r\n\r\n  _return_statement(): AST.Return | null {\r\n    // return short_circuit_or_expression?\r\n    if (!this._match(TokenTypes.keywords.return)) {\r\n      return null;\r\n    }\r\n    const value = this._short_circuit_or_expression();\r\n    return this._updateNode(new AST.Return(value));\r\n  }\r\n\r\n  _short_circuit_or_expression(): AST.Expression {\r\n    // short_circuit_and_expression\r\n    // short_circuit_or_expression or_or short_circuit_and_expression\r\n    let expr = this._short_circuit_and_expr();\r\n    while (this._match(TokenTypes.tokens.or_or)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._short_circuit_and_expr()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _short_circuit_and_expr(): AST.Expression {\r\n    // inclusive_or_expression\r\n    // short_circuit_and_expression and_and inclusive_or_expression\r\n    let expr = this._inclusive_or_expression();\r\n    while (this._match(TokenTypes.tokens.and_and)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._inclusive_or_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _inclusive_or_expression(): AST.Expression {\r\n    // exclusive_or_expression\r\n    // inclusive_or_expression or exclusive_or_expression\r\n    let expr = this._exclusive_or_expression();\r\n    while (this._match(TokenTypes.tokens.or)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._exclusive_or_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _exclusive_or_expression(): AST.Expression {\r\n    // and_expression\r\n    // exclusive_or_expression xor and_expression\r\n    let expr = this._and_expression();\r\n    while (this._match(TokenTypes.tokens.xor)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._and_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _and_expression(): AST.Expression {\r\n    // equality_expression\r\n    // and_expression and equality_expression\r\n    let expr = this._equality_expression();\r\n    while (this._match(TokenTypes.tokens.and)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._equality_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _equality_expression(): AST.Expression {\r\n    // relational_expression\r\n    // relational_expression equal_equal relational_expression\r\n    // relational_expression not_equal relational_expression\r\n    const expr = this._relational_expression();\r\n    if (\r\n      this._match([TokenTypes.tokens.equal_equal, TokenTypes.tokens.not_equal])\r\n    ) {\r\n      return this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._relational_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _relational_expression(): AST.Expression {\r\n    // shift_expression\r\n    // relational_expression less_than shift_expression\r\n    // relational_expression greater_than shift_expression\r\n    // relational_expression less_than_equal shift_expression\r\n    // relational_expression greater_than_equal shift_expression\r\n    let expr = this._shift_expression();\r\n    while (\r\n      this._match([\r\n        TokenTypes.tokens.less_than,\r\n        TokenTypes.tokens.greater_than,\r\n        TokenTypes.tokens.less_than_equal,\r\n        TokenTypes.tokens.greater_than_equal,\r\n      ])\r\n    ) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._shift_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _shift_expression(): AST.Expression {\r\n    // additive_expression\r\n    // shift_expression shift_left additive_expression\r\n    // shift_expression shift_right additive_expression\r\n    let expr = this._additive_expression();\r\n    while (\r\n      this._match([TokenTypes.tokens.shift_left, TokenTypes.tokens.shift_right])\r\n    ) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._additive_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _additive_expression(): AST.Expression {\r\n    // multiplicative_expression\r\n    // additive_expression plus multiplicative_expression\r\n    // additive_expression minus multiplicative_expression\r\n    let expr = this._multiplicative_expression();\r\n    while (this._match([TokenTypes.tokens.plus, TokenTypes.tokens.minus])) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._multiplicative_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _multiplicative_expression(): AST.Expression {\r\n    // unary_expression\r\n    // multiplicative_expression star unary_expression\r\n    // multiplicative_expression forward_slash unary_expression\r\n    // multiplicative_expression modulo unary_expression\r\n    let expr = this._unary_expression();\r\n    while (\r\n      this._match([\r\n        TokenTypes.tokens.star,\r\n        TokenTypes.tokens.forward_slash,\r\n        TokenTypes.tokens.modulo,\r\n      ])\r\n    ) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._unary_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _unary_expression(): AST.Expression {\r\n    // singular_expression\r\n    // minus unary_expression\r\n    // bang unary_expression\r\n    // tilde unary_expression\r\n    // star unary_expression\r\n    // and unary_expression\r\n    if (\r\n      this._match([\r\n        TokenTypes.tokens.minus,\r\n        TokenTypes.tokens.bang,\r\n        TokenTypes.tokens.tilde,\r\n        TokenTypes.tokens.star,\r\n        TokenTypes.tokens.and,\r\n      ])\r\n    ) {\r\n      return this._updateNode(new AST.UnaryOperator(\r\n        this._previous().toString(),\r\n        this._unary_expression()\r\n      ));\r\n    }\r\n    return this._singular_expression();\r\n  }\r\n\r\n  _singular_expression(): AST.Expression {\r\n    // primary_expression postfix_expression ?\r\n    const expr = this._primary_expression();\r\n    const p = this._postfix_expression();\r\n    if (p) {\r\n      expr.postfix = p;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _postfix_expression(): AST.Expression | null {\r\n    // bracket_left short_circuit_or_expression bracket_right postfix_expression?\r\n    if (this._match(TokenTypes.tokens.bracket_left)) {\r\n      const expr = this._short_circuit_or_expression();\r\n      this._consume(TokenTypes.tokens.bracket_right, \"Expected ']'.\");\r\n      const arrayIndex = this._updateNode(new AST.ArrayIndex(expr));\r\n      const p = this._postfix_expression();\r\n      if (p) {\r\n        arrayIndex.postfix = p;\r\n      }\r\n      return arrayIndex;\r\n    }\r\n\r\n    // period ident postfix_expression?\r\n    if (this._match(TokenTypes.tokens.period)) {\r\n      const name = this._consume(\r\n        TokenTypes.tokens.ident,\r\n        \"Expected member name.\"\r\n      );\r\n      const p = this._postfix_expression();\r\n      const expr = this._updateNode(new AST.StringExpr(name.lexeme));\r\n      if (p) {\r\n        expr.postfix = p;\r\n      }\r\n      return expr;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _getStruct(name: string): AST.Type | null {\r\n    if (this._context.aliases.has(name)) {\r\n      const alias = this._context.aliases.get(name).type;\r\n      return alias;\r\n    }\r\n    if (this._context.structs.has(name)) {\r\n      const struct = this._context.structs.get(name);\r\n      return struct;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getType(name: string): AST.Type {\r\n    const struct = this._getStruct(name);\r\n    if (struct !== null) {\r\n      return struct;\r\n    }\r\n    switch (name) {\r\n      case \"bool\":\r\n        return AST.Type.bool;\r\n      case \"i32\":\r\n        return AST.Type.i32;\r\n      case \"u32\":\r\n        return AST.Type.u32;\r\n      case \"f32\":\r\n        return AST.Type.f32;\r\n      case \"f16\":\r\n        return AST.Type.f16;\r\n      case \"vec2f\":\r\n        return AST.TemplateType.vec2f;\r\n      case \"vec3f\":\r\n        return AST.TemplateType.vec3f;\r\n      case \"vec4f\":\r\n        return AST.TemplateType.vec4f;\r\n      case \"vec2i\":\r\n        return AST.TemplateType.vec2i;\r\n      case \"vec3i\":\r\n        return AST.TemplateType.vec3i;\r\n      case \"vec4i\":\r\n        return AST.TemplateType.vec4i;\r\n      case \"vec2u\":\r\n        return AST.TemplateType.vec2u;\r\n      case \"vec3u\":\r\n        return AST.TemplateType.vec3u;\r\n      case \"vec4u\":\r\n        return AST.TemplateType.vec4u;\r\n      case \"vec2h\":\r\n        return AST.TemplateType.vec2h;\r\n      case \"vec3h\":\r\n        return AST.TemplateType.vec3h;\r\n      case \"vec4h\":\r\n        return AST.TemplateType.vec4h;\r\n      case \"mat2x2f\":\r\n        return AST.TemplateType.mat2x2f;\r\n      case \"mat2x3f\":\r\n        return AST.TemplateType.mat2x3f;\r\n      case \"mat2x4f\":\r\n        return AST.TemplateType.mat2x4f;\r\n      case \"mat3x2f\":\r\n        return AST.TemplateType.mat3x2f;\r\n      case \"mat3x3f\":\r\n        return AST.TemplateType.mat3x3f;\r\n      case \"mat3x4f\":\r\n        return AST.TemplateType.mat3x4f;\r\n      case \"mat4x2f\":\r\n        return AST.TemplateType.mat4x2f;\r\n      case \"mat4x3f\":\r\n        return AST.TemplateType.mat4x3f;\r\n      case \"mat4x4f\":\r\n        return AST.TemplateType.mat4x4f;\r\n      case \"mat2x2h\":\r\n        return AST.TemplateType.mat2x2h;\r\n      case \"mat2x3h\":\r\n        return AST.TemplateType.mat2x3h;\r\n      case \"mat2x4h\":\r\n        return AST.TemplateType.mat2x4h;\r\n      case \"mat3x2h\":\r\n        return AST.TemplateType.mat3x2h;\r\n      case \"mat3x3h\":\r\n        return AST.TemplateType.mat3x3h;\r\n      case \"mat3x4h\":\r\n        return AST.TemplateType.mat3x4h;\r\n      case \"mat4x2h\":\r\n        return AST.TemplateType.mat4x2h;\r\n      case \"mat4x3h\":\r\n        return AST.TemplateType.mat4x3h;\r\n      case \"mat4x4h\":\r\n        return AST.TemplateType.mat4x4h;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _primary_expression(): AST.Expression {\r\n    // ident argument_expression_list?\r\n    if (this._match(TokenTypes.tokens.ident)) {\r\n      const name = this._previous().toString();\r\n      if (this._check(TokenTypes.tokens.paren_left)) {\r\n        const args = this._argument_expression_list();\r\n        const type = this._getType(name);\r\n        if (type !== null) {\r\n          return this._updateNode(new AST.CreateExpr(type, args));\r\n        }\r\n        return this._updateNode(new AST.CallExpr(name, args));\r\n      }\r\n      if (this._context.constants.has(name)) {\r\n        const c = this._context.constants.get(name);\r\n        return this._updateNode(new AST.ConstExpr(name, c.value));\r\n      }\r\n      return this._updateNode(new AST.VariableExpr(name));\r\n    }\r\n\r\n    // const_literal\r\n    if (this._match(TokenTypes.const_literal)) {\r\n      return this._updateNode(new AST.LiteralExpr(parseFloat(this._previous().toString())));\r\n    }\r\n\r\n    // paren_expression\r\n    if (this._check(TokenTypes.tokens.paren_left)) {\r\n      return this._paren_expression();\r\n    }\r\n\r\n    // bitcast less_than type_decl greater_than paren_expression\r\n    if (this._match(TokenTypes.keywords.bitcast)) {\r\n      this._consume(TokenTypes.tokens.less_than, \"Expected '<'.\");\r\n      const type = this._type_decl();\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\r\n      const value = this._paren_expression();\r\n      return this._updateNode(new AST.BitcastExpr(type, value));\r\n    }\r\n\r\n    // type_decl argument_expression_list\r\n    const type = this._type_decl();\r\n    const args = this._argument_expression_list();\r\n    return this._updateNode(new AST.CreateExpr(type, args));\r\n  }\r\n\r\n  _argument_expression_list(): Array<AST.Expression> | null {\r\n    // paren_left ((short_circuit_or_expression comma)* short_circuit_or_expression comma?)? paren_right\r\n    if (!this._match(TokenTypes.tokens.paren_left)) {\r\n      return null;\r\n    }\r\n\r\n    const args: Array<AST.Expression> = [];\r\n    do {\r\n      if (this._check(TokenTypes.tokens.paren_right)) {\r\n        break;\r\n      }\r\n      const arg = this._short_circuit_or_expression();\r\n      args.push(arg);\r\n    } while (this._match(TokenTypes.tokens.comma));\r\n    this._consume(\r\n      TokenTypes.tokens.paren_right,\r\n      \"Expected ')' for agument list\"\r\n    );\r\n\r\n    return args;\r\n  }\r\n\r\n  _optional_paren_expression(): AST.GroupingExpr {\r\n    // [paren_left] short_circuit_or_expression [paren_right]\r\n    this._match(TokenTypes.tokens.paren_left);\r\n    const expr = this._short_circuit_or_expression();\r\n    this._match(TokenTypes.tokens.paren_right);\r\n    return this._updateNode(new AST.GroupingExpr([expr]));\r\n  }\r\n\r\n  _paren_expression(): AST.GroupingExpr {\r\n    // paren_left short_circuit_or_expression paren_right\r\n    this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\r\n    const expr = this._short_circuit_or_expression();\r\n    this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\r\n    return this._updateNode(new AST.GroupingExpr([expr]));\r\n  }\r\n\r\n  _struct_decl(): AST.Struct | null {\r\n    // attribute* struct ident struct_body_decl\r\n    if (!this._match(TokenTypes.keywords.struct)) {\r\n      return null;\r\n    }\r\n\r\n    const startLine = this._currentLine;\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected name for struct.\"\r\n    ).toString();\r\n\r\n    // struct_body_decl: brace_left (struct_member comma)* struct_member comma? brace_right\r\n    this._consume(\r\n      TokenTypes.tokens.brace_left,\r\n      \"Expected '{' for struct body.\"\r\n    );\r\n    const members: Array<AST.Member> = [];\r\n    while (!this._check(TokenTypes.tokens.brace_right)) {\r\n      // struct_member: attribute* variable_ident_decl\r\n      const memberAttrs = this._attribute();\r\n\r\n      const memberName = this._consume(\r\n        TokenTypes.tokens.ident,\r\n        \"Expected variable name.\"\r\n      ).toString();\r\n\r\n      this._consume(\r\n        TokenTypes.tokens.colon,\r\n        \"Expected ':' for struct member type.\"\r\n      );\r\n\r\n      const typeAttrs = this._attribute();\r\n      const memberType = this._type_decl();\r\n      if (memberType != null) {\r\n        memberType.attributes = typeAttrs;\r\n      }\r\n\r\n      if (!this._check(TokenTypes.tokens.brace_right)) {\r\n        this._consume(\r\n          TokenTypes.tokens.comma,\r\n          \"Expected ',' for struct member.\"\r\n        );\r\n      } else {\r\n        this._match(TokenTypes.tokens.comma); // trailing comma optional.\r\n      }\r\n\r\n      members.push(this._updateNode(new AST.Member(memberName, memberType, memberAttrs)));\r\n    }\r\n\r\n    this._consume(\r\n      TokenTypes.tokens.brace_right,\r\n      \"Expected '}' after struct body.\"\r\n    );\r\n\r\n    const endLine = this._currentLine;\r\n\r\n    const structNode = this._updateNode(new AST.Struct(name, members, startLine, endLine), startLine);\r\n    this._context.structs.set(name, structNode);\r\n    return structNode;\r\n  }\r\n\r\n  _global_variable_decl(): AST.Var | null {\r\n    // attribute* variable_decl (equal const_expression)?\r\n    const _var = this._variable_decl();\r\n    if (_var && this._match(TokenTypes.tokens.equal)) {\r\n      _var.value = this._const_expression();\r\n    }\r\n    return _var;\r\n  }\r\n\r\n  _override_variable_decl(): AST.Override | null {\r\n    // attribute* override_decl (equal const_expression)?\r\n    const _override = this._override_decl();\r\n    if (_override && this._match(TokenTypes.tokens.equal)) {\r\n      _override.value = this._const_expression();\r\n    }\r\n\r\n    return _override;\r\n  }\r\n\r\n  _global_const_decl(): AST.Let | null {\r\n    // attribute* const (ident variable_ident_decl) global_const_initializer?\r\n    if (!this._match(TokenTypes.keywords.const)) {\r\n      return null;\r\n    }\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected variable name\"\r\n    );\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n    let value: AST.Expression | null = null;\r\n    if (this._match(TokenTypes.tokens.equal)) {\r\n      const valueExpr = this._short_circuit_or_expression();\r\n      if (valueExpr instanceof AST.CreateExpr) {\r\n        value = valueExpr;\r\n      } else if (\r\n        valueExpr instanceof AST.ConstExpr &&\r\n        valueExpr.initializer instanceof AST.CreateExpr\r\n      ) {\r\n        value = valueExpr.initializer;\r\n      } else {\r\n        try {\r\n          const constValue = valueExpr.evaluate(this._context);\r\n          value = this._updateNode(new AST.LiteralExpr(constValue));\r\n        } catch {\r\n          value = valueExpr;\r\n        }\r\n      }\r\n    }\r\n    const c = this._updateNode(new AST.Const(name.toString(), type, \"\", \"\", value));\r\n    this._context.constants.set(c.name, c);\r\n    return c;\r\n  }\r\n\r\n  _global_let_decl(): AST.Let | null {\r\n    // attribute* let (ident variable_ident_decl) global_const_initializer?\r\n    if (!this._match(TokenTypes.keywords.let)) {\r\n      return null;\r\n    }\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected variable name\"\r\n    );\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n    let value: AST.Expression | null = null;\r\n    if (this._match(TokenTypes.tokens.equal)) {\r\n      value = this._const_expression();\r\n    }\r\n    return this._updateNode(new AST.Let(name.toString(), type, \"\", \"\", value));\r\n  }\r\n\r\n  _const_expression(): AST.Expression {\r\n    // type_decl paren_left ((const_expression comma)* const_expression comma?)? paren_right\r\n    // const_literal\r\n    return this._short_circuit_or_expression();\r\n  }\r\n\r\n  _variable_decl(): AST.Var | null {\r\n    // var variable_qualifier? (ident variable_ident_decl)\r\n    if (!this._match(TokenTypes.keywords.var)) {\r\n      return null;\r\n    }\r\n\r\n    // variable_qualifier: less_than storage_class (comma access_mode)? greater_than\r\n    let storage: string = \"\";\r\n    let access: string = \"\";\r\n    if (this._match(TokenTypes.tokens.less_than)) {\r\n      storage = this._consume(\r\n        TokenTypes.storage_class,\r\n        \"Expected storage_class.\"\r\n      ).toString();\r\n      if (this._match(TokenTypes.tokens.comma))\r\n        access = this._consume(\r\n          TokenTypes.access_mode,\r\n          \"Expected access_mode.\"\r\n        ).toString();\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\r\n    }\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected variable name\"\r\n    );\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n\r\n    return this._updateNode(new AST.Var(name.toString(), type, storage, access, null));\r\n  }\r\n\r\n  _override_decl(): AST.Override | null {\r\n    // override (ident variable_ident_decl)\r\n    if (!this._match(TokenTypes.keywords.override)) {\r\n      return null;\r\n    }\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected variable name\"\r\n    );\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n\r\n    return this._updateNode(new AST.Override(name.toString(), type, null));\r\n  }\r\n\r\n  _diagnostic(): AST.Diagnostic | null {\r\n    // diagnostic(severity_control_name, diagnostic_rule_name)\r\n    this._consume(TokenTypes.tokens.paren_left, \"Expected '('\");\r\n    const severity = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected severity control name.\"\r\n    );\r\n    this._consume(TokenTypes.tokens.comma, \"Expected ','\");\r\n    const rule = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected diagnostic rule name.\"\r\n    );\r\n    this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\r\n    return this._updateNode(new AST.Diagnostic(severity.toString(), rule.toString()));\r\n  }\r\n\r\n  _enable_directive(): AST.Enable {\r\n    // enable ident semicolon\r\n    const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\r\n    return this._updateNode(new AST.Enable(name.toString()));\r\n  }\r\n\r\n  _requires_directive(): AST.Requires {\r\n    // requires extension [, extension]* semicolon\r\n    const extensions: string[] = [this._consume(TokenTypes.tokens.ident, \"identity expected.\").toString()];\r\n    while (this._match(TokenTypes.tokens.comma)) {\r\n      const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\r\n      extensions.push(name.toString());\r\n    }\r\n    return this._updateNode(new AST.Requires(extensions));\r\n  }\r\n\r\n  _type_alias(): AST.Alias {\r\n    // type ident equal type_decl\r\n    const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\r\n    this._consume(TokenTypes.tokens.equal, \"Expected '=' for type alias.\");\r\n\r\n    let aliasType = this._type_decl();\r\n    if (aliasType === null) {\r\n      throw this._error(this._peek(), \"Expected Type for Alias.\");\r\n    }\r\n    if (this._context.aliases.has(aliasType.name)) {\r\n      aliasType = this._context.aliases.get(aliasType.name).type;\r\n    }\r\n\r\n    const aliasNode = this._updateNode(new AST.Alias(name.toString(), aliasType));\r\n    this._context.aliases.set(aliasNode.name, aliasNode);\r\n\r\n    return aliasNode;\r\n  }\r\n\r\n  _type_decl(): AST.Type | null {\r\n    // ident\r\n    // bool\r\n    // float32\r\n    // int32\r\n    // uint32\r\n    // vec2 less_than type_decl greater_than\r\n    // vec3 less_than type_decl greater_than\r\n    // vec4 less_than type_decl greater_than\r\n    // mat2x2 less_than type_decl greater_than\r\n    // mat2x3 less_than type_decl greater_than\r\n    // mat2x4 less_than type_decl greater_than\r\n    // mat3x2 less_than type_decl greater_than\r\n    // mat3x3 less_than type_decl greater_than\r\n    // mat3x4 less_than type_decl greater_than\r\n    // mat4x2 less_than type_decl greater_than\r\n    // mat4x3 less_than type_decl greater_than\r\n    // mat4x4 less_than type_decl greater_than\r\n    // atomic less_than type_decl greater_than\r\n    // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\r\n    // array_type_decl\r\n    // texture_sampler_types\r\n\r\n    if (\r\n      this._check([\r\n        TokenTypes.tokens.ident,\r\n        ...TokenTypes.texel_format,\r\n        TokenTypes.keywords.bool,\r\n        TokenTypes.keywords.f32,\r\n        TokenTypes.keywords.i32,\r\n        TokenTypes.keywords.u32,\r\n      ])\r\n    ) {\r\n      const type = this._advance();\r\n      const typeName = type.toString();\r\n      if (this._context.structs.has(typeName)) {\r\n        return this._context.structs.get(typeName);\r\n      }\r\n      if (this._context.aliases.has(typeName)) {\r\n        return this._context.aliases.get(typeName).type;\r\n      }\r\n      return this._updateNode(new AST.Type(type.toString()));\r\n    }\r\n\r\n    // texture_sampler_types\r\n    let type = this._texture_sampler_types();\r\n    if (type) {\r\n      return type;\r\n    }\r\n\r\n    if (this._check(TokenTypes.template_types)) {\r\n      let type = this._advance().toString();\r\n      let format: AST.Type | null = null;\r\n      let access: string | null = null;\r\n      if (this._match(TokenTypes.tokens.less_than)) {\r\n        format = this._type_decl();\r\n        access = null;\r\n        if (this._match(TokenTypes.tokens.comma)) {\r\n          access = this._consume(\r\n            TokenTypes.access_mode,\r\n            \"Expected access_mode for pointer\"\r\n          ).toString();\r\n        }\r\n        this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for type.\");\r\n      }\r\n      return this._updateNode(new AST.TemplateType(type, format, access));\r\n    }\r\n\r\n    // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\r\n    if (this._match(TokenTypes.keywords.ptr)) {\r\n      let pointer = this._previous().toString();\r\n      this._consume(TokenTypes.tokens.less_than, \"Expected '<' for pointer.\");\r\n      const storage = this._consume(\r\n        TokenTypes.storage_class,\r\n        \"Expected storage_class for pointer\"\r\n      );\r\n      this._consume(TokenTypes.tokens.comma, \"Expected ',' for pointer.\");\r\n      const decl = this._type_decl();\r\n      let access: string | null = null;\r\n      if (this._match(TokenTypes.tokens.comma)) {\r\n        access = this._consume(\r\n          TokenTypes.access_mode,\r\n          \"Expected access_mode for pointer\"\r\n        ).toString();\r\n      }\r\n      this._consume(\r\n        TokenTypes.tokens.greater_than,\r\n        \"Expected '>' for pointer.\"\r\n      );\r\n      return this._updateNode(new AST.PointerType(pointer, storage.toString(), decl, access));\r\n    }\r\n\r\n    // The following type_decl's have an optional attribyte_list*\r\n    const attrs = this._attribute();\r\n\r\n    // attribute* array\r\n    // attribute* array less_than type_decl (comma element_count_expression)? greater_than\r\n    if (this._match(TokenTypes.keywords.array)) {\r\n      let format = null;\r\n      let countInt = -1;\r\n      const array = this._previous();\r\n      let countNode: AST.Expression | null = null;\r\n      if (this._match(TokenTypes.tokens.less_than)) {\r\n        format = this._type_decl();\r\n        if (this._context.aliases.has(format.name)) {\r\n          format = this._context.aliases.get(format.name).type;\r\n        }\r\n        let count: string = \"\";\r\n        if (this._match(TokenTypes.tokens.comma)) {\r\n          countNode = this._shift_expression();\r\n          // If we can't evaluate the node, defer evaluating it until after the shader has\r\n          // finished being parsed, because const statements can be declared **after** they\r\n          // are used.\r\n          try {\r\n            count = countNode.evaluate(this._context).toString();\r\n            countNode = null;\r\n          } catch (e) {\r\n            count = \"1\";\r\n          }\r\n        }\r\n        this._consume(\r\n          TokenTypes.tokens.greater_than,\r\n          \"Expected '>' for array.\"\r\n        );\r\n        countInt = count ? parseInt(count) : 0;\r\n      }\r\n      const arrayType = this._updateNode(new AST.ArrayType(array.toString(), attrs, format, countInt));\r\n      if (countNode) {\r\n        this._deferArrayCountEval.push({ arrayType, countNode });\r\n      }\r\n      return arrayType;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _texture_sampler_types(): AST.SamplerType | null {\r\n    // sampler_type\r\n    if (this._match(TokenTypes.sampler_type)) {\r\n      return this._updateNode(new AST.SamplerType(this._previous().toString(), null, null));\r\n    }\r\n\r\n    // depth_texture_type\r\n    if (this._match(TokenTypes.depth_texture_type)) {\r\n      return this._updateNode(new AST.SamplerType(this._previous().toString(), null, null));\r\n    }\r\n\r\n    // sampled_texture_type less_than type_decl greater_than\r\n    // multisampled_texture_type less_than type_decl greater_than\r\n    if (\r\n      this._match(TokenTypes.sampled_texture_type) ||\r\n      this._match(TokenTypes.multisampled_texture_type)\r\n    ) {\r\n      const sampler = this._previous();\r\n      this._consume(\r\n        TokenTypes.tokens.less_than,\r\n        \"Expected '<' for sampler type.\"\r\n      );\r\n      const format = this._type_decl();\r\n      this._consume(\r\n        TokenTypes.tokens.greater_than,\r\n        \"Expected '>' for sampler type.\"\r\n      );\r\n      return this._updateNode(new AST.SamplerType(sampler.toString(), format, null));\r\n    }\r\n\r\n    // storage_texture_type less_than texel_format comma access_mode greater_than\r\n    if (this._match(TokenTypes.storage_texture_type)) {\r\n      const sampler = this._previous();\r\n      this._consume(\r\n        TokenTypes.tokens.less_than,\r\n        \"Expected '<' for sampler type.\"\r\n      );\r\n      const format = this._consume(\r\n        TokenTypes.texel_format,\r\n        \"Invalid texel format.\"\r\n      ).toString();\r\n      this._consume(\r\n        TokenTypes.tokens.comma,\r\n        \"Expected ',' after texel format.\"\r\n      );\r\n      const access = this._consume(\r\n        TokenTypes.access_mode,\r\n        \"Expected access mode for storage texture type.\"\r\n      ).toString();\r\n      this._consume(\r\n        TokenTypes.tokens.greater_than,\r\n        \"Expected '>' for sampler type.\"\r\n      );\r\n      return this._updateNode(new AST.SamplerType(sampler.toString(), format, access));\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _attribute(): Array<AST.Attribute> | null {\r\n    // attr ident paren_left (literal_or_ident comma)* literal_or_ident paren_right\r\n    // attr ident\r\n\r\n    let attributes: Array<AST.Attribute> = [];\r\n\r\n    while (this._match(TokenTypes.tokens.attr)) {\r\n      const name = this._consume(\r\n        TokenTypes.attribute_name,\r\n        \"Expected attribute name\"\r\n      );\r\n      const attr = this._updateNode(new AST.Attribute(name.toString(), null));\r\n      if (this._match(TokenTypes.tokens.paren_left)) {\r\n        // literal_or_ident\r\n        attr.value = this._consume(\r\n          TokenTypes.literal_or_ident,\r\n          \"Expected attribute value\"\r\n        ).toString();\r\n        if (this._check(TokenTypes.tokens.comma)) {\r\n          this._advance();\r\n          do {\r\n            const v = this._consume(\r\n              TokenTypes.literal_or_ident,\r\n              \"Expected attribute value\"\r\n            ).toString();\r\n            if (!(attr.value instanceof Array)) {\r\n              attr.value = [attr.value as string];\r\n            }\r\n            attr.value.push(v);\r\n          } while (this._match(TokenTypes.tokens.comma));\r\n        }\r\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\r\n      }\r\n      attributes.push(attr);\r\n    }\r\n\r\n    if (attributes.length == 0) {\r\n      return null;\r\n    }\r\n\r\n    return attributes;\r\n  }\r\n}\r\n","/**\r\n * @author Brendan Duncan / https://github.com/brendan-duncan\r\n */\r\nimport { WgslParser } from \"./wgsl_parser.js\";\r\nimport { TokenTypes } from \"./wgsl_scanner.js\";\r\nimport * as AST from \"./wgsl_ast.js\";\r\n\r\nexport class TypeInfo {\r\n  name: string;\r\n  attributes: Array<AST.Attribute> | null;\r\n  size: number;\r\n\r\n  constructor(name: string, attributes: Array<AST.Attribute> | null) {\r\n    this.name = name;\r\n    this.attributes = attributes;\r\n    this.size = 0;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport class MemberInfo {\r\n  name: string;\r\n  type: TypeInfo;\r\n  attributes: Array<AST.Attribute> | null;\r\n  offset: number;\r\n  size: number;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo,\r\n    attributes: Array<AST.Attribute> | null\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n    this.offset = 0;\r\n    this.size = 0;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return this.type.isArray;\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return this.type.isStruct;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return this.type.isTemplate;\r\n  }\r\n\r\n  get align(): number {\r\n    return this.type.isStruct ? (this.type as StructInfo).align : 0;\r\n  }\r\n\r\n  get members(): Array<MemberInfo> | null {\r\n    return this.type.isStruct ? (this.type as StructInfo).members : null;\r\n  }\r\n\r\n  get format(): TypeInfo | null {\r\n    return this.type.isArray\r\n      ? (this.type as ArrayInfo).format\r\n      : this.type.isTemplate\r\n      ? (this.type as TemplateInfo).format\r\n      : null;\r\n  }\r\n\r\n  get count(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).count : 0;\r\n  }\r\n\r\n  get stride(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).stride : this.size;\r\n  }\r\n}\r\n\r\nexport class StructInfo extends TypeInfo {\r\n  members: Array<MemberInfo> = [];\r\n  align: number = 0;\r\n  startLine: number = -1;\r\n  endLine: number = -1;\r\n  inUse: boolean = false;\r\n\r\n  constructor(name: string, attributes: Array<AST.Attribute> | null) {\r\n    super(name, attributes);\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class ArrayInfo extends TypeInfo {\r\n  format: TypeInfo;\r\n  count: number;\r\n  stride: number;\r\n\r\n  constructor(name: string, attributes: Array<AST.Attribute> | null) {\r\n    super(name, attributes);\r\n    this.count = 0;\r\n    this.stride = 0;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class TemplateInfo extends TypeInfo {\r\n  format: TypeInfo | null;\r\n  access: string;\r\n  constructor(\r\n    name: string,\r\n    format: TypeInfo | null,\r\n    attributes: Array<AST.Attribute> | null,\r\n    access: string\r\n  ) {\r\n    super(name, attributes);\r\n    this.format = format;\r\n    this.access = access;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport enum ResourceType {\r\n  Uniform,\r\n  Storage,\r\n  Texture,\r\n  Sampler,\r\n  StorageTexture,\r\n}\r\n\r\nexport class VariableInfo {\r\n  attributes: Array<AST.Attribute> | null;\r\n  name: string;\r\n  type: TypeInfo;\r\n  group: number;\r\n  binding: number;\r\n  resourceType: ResourceType;\r\n  access: string;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo,\r\n    group: number,\r\n    binding: number,\r\n    attributes: Array<AST.Attribute> | null,\r\n    resourceType: ResourceType,\r\n    access: string\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.group = group;\r\n    this.binding = binding;\r\n    this.attributes = attributes;\r\n    this.resourceType = resourceType;\r\n    this.access = access;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return this.type.isArray;\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return this.type.isStruct;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return this.type.isTemplate;\r\n  }\r\n\r\n  get size(): number {\r\n    return this.type.size;\r\n  }\r\n\r\n  get align(): number {\r\n    return this.type.isStruct ? (this.type as StructInfo).align : 0;\r\n  }\r\n\r\n  get members(): Array<MemberInfo> | null {\r\n    return this.type.isStruct ? (this.type as StructInfo).members : null;\r\n  }\r\n\r\n  get format(): TypeInfo | null {\r\n    return this.type.isArray\r\n      ? (this.type as ArrayInfo).format\r\n      : this.type.isTemplate\r\n      ? (this.type as TemplateInfo).format\r\n      : null;\r\n  }\r\n\r\n  get count(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).count : 0;\r\n  }\r\n\r\n  get stride(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).stride : this.size;\r\n  }\r\n}\r\n\r\nexport class AliasInfo {\r\n  name: string;\r\n  type: TypeInfo;\r\n\r\n  constructor(name: string, type: TypeInfo) {\r\n    this.name = name;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\nclass _TypeSize {\r\n  align: number;\r\n  size: number;\r\n\r\n  constructor(align: number, size: number) {\r\n    this.align = align;\r\n    this.size = size;\r\n  }\r\n}\r\n\r\nexport class InputInfo {\r\n  name: string;\r\n  type: TypeInfo | null;\r\n  locationType: string;\r\n  location: number | string;\r\n  interpolation: string | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo | null,\r\n    locationType: string,\r\n    location: number | string\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.locationType = locationType;\r\n    this.location = location;\r\n    this.interpolation = null;\r\n  }\r\n}\r\n\r\nexport class OutputInfo {\r\n  name: string;\r\n  type: TypeInfo | null;\r\n  locationType: string;\r\n  location: number | string;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo | null,\r\n    locationType: string,\r\n    location: number | string\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.locationType = locationType;\r\n    this.location = location;\r\n  }\r\n}\r\n\r\nexport class OverrideInfo {\r\n  name: string;\r\n  type: TypeInfo | null;\r\n  attributes: Array<AST.Attribute> | null;\r\n  id: number;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo | null,\r\n    attributes: Array<AST.Attribute> | null,\r\n    id: number\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n    this.id = id;\r\n  }\r\n}\r\n\r\nexport class ArgumentInfo {\r\n  name: string;\r\n  type: TypeInfo;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo,\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\nexport class FunctionInfo {\r\n  name: string;\r\n  stage: string | null = null;\r\n  inputs: Array<InputInfo> = [];\r\n  outputs: Array<OutputInfo> = [];\r\n  arguments: Array<ArgumentInfo> = [];\r\n  returnType: TypeInfo | null = null;\r\n  resources: Array<VariableInfo> = [];\r\n  overrides: Array<OverrideInfo> = [];\r\n  startLine: number = -1;\r\n  endLine: number = -1;\r\n  inUse: boolean = false;\r\n  calls: Set<FunctionInfo> = new Set();\r\n\r\n  constructor(name: string, stage: string | null = null) {\r\n    this.name = name;\r\n    this.stage = stage;\r\n  }\r\n}\r\n\r\nexport class EntryFunctions {\r\n  vertex: Array<FunctionInfo> = [];\r\n  fragment: Array<FunctionInfo> = [];\r\n  compute: Array<FunctionInfo> = [];\r\n}\r\n\r\nclass _FunctionResources {\r\n  node: AST.Function;\r\n  resources: Array<VariableInfo> | null = null;\r\n  inUse: boolean = false;\r\n  info: FunctionInfo | null = null;\r\n  constructor(node: AST.Function) {\r\n    this.node = node;\r\n  }\r\n}\r\n\r\nexport class WgslReflect {\r\n  /// All top-level uniform vars in the shader.\r\n  uniforms: Array<VariableInfo> = [];\r\n  /// All top-level storage vars in the shader.\r\n  storage: Array<VariableInfo> = [];\r\n  /// All top-level texture vars in the shader;\r\n  textures: Array<VariableInfo> = [];\r\n  // All top-level sampler vars in the shader.\r\n  samplers: Array<VariableInfo> = [];\r\n  /// All top-level type aliases in the shader.\r\n  aliases: Array<AliasInfo> = [];\r\n  /// All top-level overrides in the shader.\r\n  overrides: Array<OverrideInfo> = [];\r\n  /// All top-level structs in the shader.\r\n  structs: Array<StructInfo> = [];\r\n  /// All entry functions in the shader: vertex, fragment, and/or compute.\r\n  entry: EntryFunctions = new EntryFunctions();\r\n  /// All functions in the shader, including entry functions.\r\n  functions: Array<FunctionInfo> = [];\r\n\r\n  _types: Map<AST.Type, TypeInfo> = new Map();\r\n  _functions: Map<string, _FunctionResources> = new Map();\r\n\r\n  constructor(code?: string) {\r\n    if (code) {\r\n      this.update(code);\r\n    }\r\n  }\r\n\r\n  _isStorageTexture(type: TypeInfo): boolean {\r\n    return (\r\n      type.name == \"texture_storage_1d\" ||\r\n      type.name == \"texture_storage_2d\" ||\r\n      type.name == \"texture_storage_2d_array\" ||\r\n      type.name == \"texture_storage_3d\"\r\n    );\r\n  }\r\n\r\n  update(code: string) {\r\n    const parser = new WgslParser();\r\n    const ast = parser.parse(code);\r\n    this.updateAST(ast);\r\n  }\r\n\r\n  updateAST(ast: Array<AST.Node>) {\r\n    for (const node of ast) {\r\n      if (node instanceof AST.Function) {\r\n        this._functions.set(node.name, new _FunctionResources(node as AST.Function));\r\n      }\r\n    }\r\n\r\n    for (const node of ast) {\r\n      if (node instanceof AST.Struct) {\r\n        const info = this._getTypeInfo(node as AST.Struct, null);\r\n        if (info instanceof StructInfo) {\r\n          this.structs.push(info as StructInfo);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const node of ast) {\r\n      if (node instanceof AST.Alias) {\r\n        this.aliases.push(this._getAliasInfo(node as AST.Alias));\r\n        continue;\r\n      }\r\n\r\n      if (node instanceof AST.Override) {\r\n        const v = node as AST.Override;\r\n        const id = this._getAttributeNum(v.attributes, \"id\", 0);\r\n        const type =\r\n          v.type != null ? this._getTypeInfo(v.type, v.attributes) : null;\r\n        this.overrides.push(new OverrideInfo(v.name, type, v.attributes, id));\r\n        continue;\r\n      }\r\n\r\n      if (this._isUniformVar(node)) {\r\n        const v = node as AST.Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this._getTypeInfo(v.type!, v.attributes);\r\n        const varInfo = new VariableInfo(\r\n          v.name,\r\n          type,\r\n          g,\r\n          b,\r\n          v.attributes,\r\n          ResourceType.Uniform,\r\n          v.access\r\n        );\r\n        this.uniforms.push(varInfo);\r\n        continue;\r\n      }\r\n\r\n      if (this._isStorageVar(node)) {\r\n        const v = node as AST.Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this._getTypeInfo(v.type!, v.attributes);\r\n        const isStorageTexture = this._isStorageTexture(type);\r\n        const varInfo = new VariableInfo(\r\n          v.name,\r\n          type,\r\n          g,\r\n          b,\r\n          v.attributes,\r\n          isStorageTexture ? ResourceType.StorageTexture : ResourceType.Storage,\r\n          v.access\r\n        );\r\n        this.storage.push(varInfo);\r\n        continue;\r\n      }\r\n\r\n      if (this._isTextureVar(node)) {\r\n        const v = node as AST.Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this._getTypeInfo(v.type!, v.attributes);\r\n        const isStorageTexture = this._isStorageTexture(type);\r\n        const varInfo = new VariableInfo(\r\n          v.name,\r\n          type,\r\n          g,\r\n          b,\r\n          v.attributes,\r\n          isStorageTexture ? ResourceType.StorageTexture : ResourceType.Texture,\r\n          v.access\r\n        );\r\n        if (isStorageTexture) {\r\n          this.storage.push(varInfo);\r\n        } else {\r\n          this.textures.push(varInfo);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      if (this._isSamplerVar(node)) {\r\n        const v = node as AST.Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this._getTypeInfo(v.type!, v.attributes);\r\n        const varInfo = new VariableInfo(\r\n          v.name,\r\n          type,\r\n          g,\r\n          b,\r\n          v.attributes,\r\n          ResourceType.Sampler,\r\n          v.access\r\n        );\r\n        this.samplers.push(varInfo);\r\n        continue;\r\n      }\r\n\r\n      if (node instanceof AST.Function) {\r\n        const vertexStage = this._getAttribute(node, \"vertex\");\r\n        const fragmentStage = this._getAttribute(node, \"fragment\");\r\n        const computeStage = this._getAttribute(node, \"compute\");\r\n        const stage = vertexStage || fragmentStage || computeStage;\r\n\r\n        const fn = new FunctionInfo(node.name, stage?.name);\r\n        fn.startLine = node.startLine;\r\n        fn.endLine = node.endLine;\r\n        this.functions.push(fn);\r\n        this._functions.get(node.name)!.info = fn;\r\n\r\n        if (stage) {\r\n          this._functions.get(node.name)!.inUse = true;\r\n          fn.inUse = true;\r\n          fn.resources = this._findResources(node, !!stage);\r\n          fn.inputs = this._getInputs(node.args);\r\n          fn.outputs = this._getOutputs(node.returnType);\r\n          this.entry[stage.name].push(fn);\r\n        }\r\n\r\n        fn.arguments = node.args.map(\r\n          (arg) =>\r\n            new ArgumentInfo(\r\n              arg.name,\r\n              this._getTypeInfo(arg.type, arg.attributes)\r\n            )\r\n        );\r\n        \r\n        fn.returnType = node.returnType\r\n          ? this._getTypeInfo(node.returnType, node.attributes)\r\n          : null;\r\n\r\n        continue;\r\n      }\r\n    }\r\n\r\n    for (const fn of this._functions.values()) {\r\n      if (fn.info) {\r\n        fn.info.inUse = fn.inUse;\r\n        this._addCalls(fn.node, fn.info.calls);\r\n      }\r\n    }\r\n\r\n    for (const fn of this._functions.values()) {\r\n      fn.node.search((node) => {\r\n        if (node.astNodeType === \"varExpr\") {\r\n          const v = node as AST.VariableExpr;\r\n          for (const override of this.overrides) {\r\n            if (v.name == override.name) {\r\n              fn.info?.overrides.push(override);\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    for (const u of this.uniforms) {\r\n      this._markStructsInUse(u.type);\r\n    }\r\n    for (const s of this.storage) {\r\n      this._markStructsInUse(s.type);\r\n    }\r\n  }\r\n\r\n  getStructInfo(name: string): StructInfo | null {\r\n    for (const s of this.structs) {\r\n      if (s.name == name) {\r\n        return s;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _markStructsInUse(type: TypeInfo) {\r\n    if (!type) {\r\n      return;\r\n    }\r\n    if (type.isStruct) {\r\n      (type as StructInfo).inUse = true;\r\n      if ((type as StructInfo).members) {\r\n        for (const m of (type as StructInfo).members) {\r\n          this._markStructsInUse(m.type);\r\n        }\r\n      }\r\n    } else if (type.isArray) {\r\n      this._markStructsInUse((type as ArrayInfo).format);\r\n    } else if (type.isTemplate) {\r\n      if ((type as TemplateInfo).format) {\r\n        this._markStructsInUse((type as TemplateInfo).format!);\r\n      }\r\n    } else {\r\n      const alias = this._getAlias(type.name);\r\n      if (alias) {\r\n        this._markStructsInUse(alias);\r\n      }\r\n    }\r\n  }\r\n\r\n  _addCalls(fn: AST.Function, calls: Set<FunctionInfo>, ) {\r\n    for (const call of fn.calls) {\r\n      const info = this._functions.get(call.name)?.info;\r\n      if (info) {\r\n        calls.add(info);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// Find a resource by its group and binding.\r\n  findResource(group: number, binding: number) {\r\n    for (const u of this.uniforms) {\r\n      if (u.group == group && u.binding == binding) {\r\n        return u;\r\n      }\r\n    }\r\n    for (const s of this.storage) {\r\n      if (s.group == group && s.binding == binding) {\r\n        return s;\r\n      }\r\n    }\r\n    for (const t of this.textures) {\r\n      if (t.group == group && t.binding == binding) {\r\n        return t;\r\n      }\r\n    }\r\n    for (const s of this.samplers) {\r\n      if (s.group == group && s.binding == binding) {\r\n        return s;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _findResource(name: string): VariableInfo | null {\r\n    for (const u of this.uniforms) {\r\n      if (u.name == name) {\r\n        return u;\r\n      }\r\n    }\r\n    for (const s of this.storage) {\r\n      if (s.name == name) {\r\n        return s;\r\n      }\r\n    }\r\n    for (const t of this.textures) {\r\n      if (t.name == name) {\r\n        return t;\r\n      }\r\n    }\r\n    for (const s of this.samplers) {\r\n      if (s.name == name) {\r\n        return s;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  _markStructsFromAST(type: AST.Type) {\r\n    const info = this._getTypeInfo(type, null);\r\n    this._markStructsInUse(info);\r\n  }\r\n\r\n  _findResources(fn: AST.Node, isEntry: boolean): Array<VariableInfo> {\r\n    const resources = [];\r\n    const self = this;\r\n    const varStack = [];\r\n    fn.search((node) => {\r\n      if (node instanceof AST._BlockStart) {\r\n        varStack.push({});\r\n      } else if (node instanceof AST._BlockEnd) {\r\n        varStack.pop();\r\n      } else if (node instanceof AST.Var) {\r\n        const v = node as AST.Var;\r\n        if (isEntry && v.type !== null) {\r\n          this._markStructsFromAST(v.type);\r\n        }\r\n        if (varStack.length > 0) {\r\n          varStack[varStack.length - 1][v.name] = v;\r\n        }\r\n      } else if (node instanceof AST.CreateExpr) {\r\n        const c = node as AST.CreateExpr;\r\n        if (isEntry && c.type !== null) {\r\n          this._markStructsFromAST(c.type);\r\n        }\r\n      } else if (node instanceof AST.Let) {\r\n        const v = node as AST.Let;\r\n        if (isEntry && v.type !== null) {\r\n          this._markStructsFromAST(v.type);\r\n        }\r\n        if (varStack.length > 0) {\r\n          varStack[varStack.length - 1][v.name] = v;\r\n        }\r\n      } else if (node instanceof AST.VariableExpr) {\r\n        const v = node as AST.VariableExpr;\r\n        // Check to see if the variable is a local variable before checking to see if it's\r\n        // a resource.\r\n        if (varStack.length > 0) {\r\n          const varInfo = varStack[varStack.length - 1][v.name];\r\n          if (varInfo) {\r\n            return;\r\n          }\r\n        }\r\n        const varInfo = self._findResource(v.name);\r\n        if (varInfo) {\r\n          resources.push(varInfo);\r\n        }\r\n      } else if (node instanceof AST.CallExpr) {\r\n        const c = node as AST.CallExpr;\r\n        const callFn = self._functions.get(c.name);\r\n        if (callFn) {\r\n          if (isEntry) {\r\n            callFn.inUse = true;\r\n          }\r\n          (fn as AST.Function).calls.add(callFn.node);\r\n          if (callFn.resources === null) {\r\n            callFn.resources = self._findResources(callFn.node, isEntry);\r\n          }\r\n          resources.push(...callFn.resources);\r\n        }\r\n      } else if (node instanceof AST.Call) {\r\n        const c = node as AST.Call;\r\n        const callFn = self._functions.get(c.name);\r\n        if (callFn) {\r\n          if (isEntry) {\r\n            callFn.inUse = true;\r\n          }\r\n          (fn as AST.Function).calls.add(callFn.node);\r\n          if (callFn.resources === null) {\r\n            callFn.resources = self._findResources(callFn.node, isEntry);\r\n          }\r\n          resources.push(...callFn.resources);\r\n        }\r\n      }\r\n    });\r\n    return [...new Map(resources.map(r => [r.name, r])).values()];\r\n  }\r\n\r\n  getBindGroups(): Array<Array<VariableInfo>> {\r\n    const groups: Array<Array<VariableInfo>> = [];\r\n\r\n    function _makeRoom(group: number, binding: number) {\r\n      if (group >= groups.length) {\r\n        groups.length = group + 1;\r\n      }\r\n\r\n      if (groups[group] === undefined) {\r\n        groups[group] = [];\r\n      }\r\n\r\n      if (binding >= groups[group].length) {\r\n        groups[group].length = binding + 1;\r\n      }\r\n    }\r\n\r\n    for (const u of this.uniforms) {\r\n      _makeRoom(u.group, u.binding);\r\n      const group = groups[u.group];\r\n      group[u.binding] = u;\r\n    }\r\n\r\n    for (const u of this.storage) {\r\n      _makeRoom(u.group, u.binding);\r\n      const group = groups[u.group];\r\n      group[u.binding] = u;\r\n    }\r\n\r\n    for (const t of this.textures) {\r\n      _makeRoom(t.group, t.binding);\r\n      const group = groups[t.group];\r\n      group[t.binding] = t;\r\n    }\r\n\r\n    for (const t of this.samplers) {\r\n      _makeRoom(t.group, t.binding);\r\n      const group = groups[t.group];\r\n      group[t.binding] = t;\r\n    }\r\n\r\n    return groups;\r\n  }\r\n\r\n  _getOutputs(\r\n    type: AST.Type,\r\n    outputs: Array<OutputInfo> | undefined = undefined\r\n  ): Array<OutputInfo> {\r\n    if (outputs === undefined) {\r\n      outputs = [];\r\n    }\r\n\r\n    if (type instanceof AST.Struct) {\r\n      this._getStructOutputs(type, outputs);\r\n    } else {\r\n      const output = this._getOutputInfo(type);\r\n      if (output !== null) {\r\n        outputs.push(output);\r\n      }\r\n    }\r\n\r\n    return outputs;\r\n  }\r\n\r\n  _getStructOutputs(struct: AST.Struct, outputs: Array<OutputInfo>) {\r\n    for (const m of struct.members) {\r\n      if (m.type instanceof AST.Struct) {\r\n        this._getStructOutputs(m.type, outputs);\r\n      } else {\r\n        const location =\r\n          this._getAttribute(m, \"location\") || this._getAttribute(m, \"builtin\");\r\n        if (location !== null) {\r\n          const typeInfo = this._getTypeInfo(m.type, m.type.attributes);\r\n          const locationValue = this._parseInt(location.value);\r\n          const info = new OutputInfo(\r\n            m.name,\r\n            typeInfo,\r\n            location.name,\r\n            locationValue\r\n          );\r\n          outputs.push(info);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _getOutputInfo(type: AST.Type): OutputInfo | null {\r\n    const location =\r\n      this._getAttribute(type, \"location\") ||\r\n      this._getAttribute(type, \"builtin\");\r\n    if (location !== null) {\r\n      const typeInfo = this._getTypeInfo(type, type.attributes);\r\n      const locationValue = this._parseInt(location.value);\r\n      const info = new OutputInfo(\"\", typeInfo, location.name, locationValue);\r\n      return info;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getInputs(\r\n    args: Array<AST.Argument>,\r\n    inputs: Array<InputInfo> | undefined = undefined\r\n  ): Array<InputInfo> {\r\n    if (inputs === undefined) {\r\n      inputs = [];\r\n    }\r\n\r\n    for (const arg of args) {\r\n      if (arg.type instanceof AST.Struct) {\r\n        this._getStructInputs(arg.type, inputs);\r\n      } else {\r\n        const input = this._getInputInfo(arg);\r\n        if (input !== null) {\r\n          inputs.push(input);\r\n        }\r\n      }\r\n    }\r\n\r\n    return inputs;\r\n  }\r\n\r\n  _getStructInputs(struct: AST.Struct, inputs: Array<InputInfo>) {\r\n    for (const m of struct.members) {\r\n      if (m.type instanceof AST.Struct) {\r\n        this._getStructInputs(m.type, inputs);\r\n      } else {\r\n        const input = this._getInputInfo(m);\r\n        if (input !== null) {\r\n          inputs.push(input);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _getInputInfo(node: AST.Member | AST.Argument): InputInfo | null {\r\n    const location =\r\n      this._getAttribute(node, \"location\") ||\r\n      this._getAttribute(node, \"builtin\");\r\n    if (location !== null) {\r\n      const interpolation = this._getAttribute(node, \"interpolation\");\r\n      const type = this._getTypeInfo(node.type, node.attributes);\r\n      const locationValue = this._parseInt(location.value);\r\n      const info = new InputInfo(node.name, type, location.name, locationValue);\r\n      if (interpolation !== null) {\r\n        info.interpolation = this._parseString(interpolation.value);\r\n      }\r\n      return info;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _parseString(s: string | string[]): string {\r\n    if (s instanceof Array) {\r\n      s = s[0];\r\n    }\r\n    return s;\r\n  }\r\n\r\n  _parseInt(s: string | string[]): number | string {\r\n    if (s instanceof Array) {\r\n      s = s[0];\r\n    }\r\n    const n = parseInt(s);\r\n    return isNaN(n) ? s : n;\r\n  }\r\n\r\n  _getAlias(name: string): TypeInfo | null {\r\n    for (const a of this.aliases) {\r\n      if (a.name == name) {\r\n        return a.type;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getAliasInfo(node: AST.Alias): AliasInfo {\r\n    return new AliasInfo(node.name, this._getTypeInfo(node.type!, null));\r\n  }\r\n\r\n  _getTypeInfo(\r\n    type: AST.Type,\r\n    attributes: Array<AST.Attribute> | null\r\n  ): TypeInfo {\r\n    if (this._types.has(type)) {\r\n      return this._types.get(type)!;\r\n    }\r\n\r\n    if (type instanceof AST.ArrayType) {\r\n      const a = type as AST.ArrayType;\r\n      const t = a.format ? this._getTypeInfo(a.format!, a.attributes) : null;\r\n      const info = new ArrayInfo(a.name, attributes);\r\n      info.format = t;\r\n      info.count = a.count;\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    if (type instanceof AST.Struct) {\r\n      const s = type as AST.Struct;\r\n      const info = new StructInfo(s.name, attributes);\r\n      info.startLine = s.startLine;\r\n      info.endLine = s.endLine;\r\n      for (const m of s.members) {\r\n        const t = this._getTypeInfo(m.type!, m.attributes);\r\n        info.members.push(new MemberInfo(m.name, t, m.attributes));\r\n      }\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    if (type instanceof AST.SamplerType) {\r\n      const s = type as AST.SamplerType;\r\n      const formatIsType = s.format instanceof AST.Type;\r\n      const format = s.format\r\n        ? formatIsType\r\n          ? this._getTypeInfo(s.format! as AST.Type, null)\r\n          : new TypeInfo(s.format! as string, null)\r\n        : null;\r\n      const info = new TemplateInfo(s.name, format, attributes, s.access);\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    if (type instanceof AST.TemplateType) {\r\n      const t = type as AST.TemplateType;\r\n      const format = t.format ? this._getTypeInfo(t.format!, null) : null;\r\n      const info = new TemplateInfo(t.name, format, attributes, t.access);\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    const info = new TypeInfo(type.name, attributes);\r\n    this._types.set(type, info);\r\n    this._updateTypeInfo(info);\r\n    return info;\r\n  }\r\n\r\n  _updateTypeInfo(type: TypeInfo) {\r\n    const typeSize = this._getTypeSize(type);\r\n    type.size = typeSize?.size ?? 0;\r\n\r\n    if (type instanceof ArrayInfo) {\r\n      if (type[\"format\"]) {\r\n        const formatInfo = this._getTypeSize(type[\"format\"]);\r\n        // Array stride is the maximum of the format size and alignment.\r\n        // In the case of a vec3f, the size is 12 bytes, but the alignment is 16 bytes.\r\n        // Buffer alignment is therefore 16 bytes.\r\n        type.stride = Math.max(formatInfo?.size ?? 0, formatInfo?.align ?? 0);\r\n        this._updateTypeInfo(type[\"format\"]);\r\n      }\r\n    }\r\n\r\n    if (type instanceof StructInfo) {\r\n      this._updateStructInfo(type);\r\n    }\r\n  }\r\n\r\n  _updateStructInfo(struct: StructInfo) {\r\n    let offset = 0;\r\n    let lastSize = 0;\r\n    let lastOffset = 0;\r\n    let structAlign = 0;\r\n\r\n    for (let mi = 0, ml = struct.members.length; mi < ml; ++mi) {\r\n      const member = struct.members[mi];\r\n\r\n      const sizeInfo = this._getTypeSize(member);\r\n      if (!sizeInfo) {\r\n        continue;\r\n      }\r\n\r\n      const type = this._getAlias(member.type.name) ?? member.type;\r\n      const align = sizeInfo.align;\r\n      const size = sizeInfo.size;\r\n      offset = this._roundUp(align, offset + lastSize);\r\n      lastSize = size;\r\n      lastOffset = offset;\r\n      structAlign = Math.max(structAlign, align);\r\n\r\n      member.offset = offset;\r\n      member.size = size;\r\n\r\n      this._updateTypeInfo(member.type);\r\n    }\r\n\r\n    struct.size = this._roundUp(structAlign, lastOffset + lastSize);\r\n    struct.align = structAlign;\r\n  }\r\n\r\n  _getTypeSize(\r\n    type: TypeInfo | MemberInfo | null | undefined\r\n  ): _TypeSize | null {\r\n    if (type === null || type === undefined) {\r\n      return null;\r\n    }\r\n\r\n    const explicitSize = this._getAttributeNum(type.attributes, \"size\", 0);\r\n    const explicitAlign = this._getAttributeNum(type.attributes, \"align\", 0);\r\n\r\n    if (type instanceof MemberInfo) {\r\n      type = type.type;\r\n    }\r\n\r\n    if (type instanceof TypeInfo) {\r\n      const alias = this._getAlias(type.name);\r\n      if (alias !== null) {\r\n        type = alias;\r\n      }\r\n    }\r\n\r\n    {\r\n      const info = WgslReflect._typeInfo[type.name];\r\n      if (info !== undefined) {\r\n        const divisor = type[\"format\"]?.name === \"f16\" ? 2 : 1;\r\n        return new _TypeSize(\r\n          Math.max(explicitAlign, info.align / divisor),\r\n          Math.max(explicitSize, info.size / divisor)\r\n        );\r\n      }\r\n    }\r\n\r\n    {\r\n      const info =\r\n        WgslReflect._typeInfo[type.name.substring(0, type.name.length - 1)];\r\n      if (info) {\r\n        const divisor = type.name[type.name.length - 1] === \"h\" ? 2 : 1;\r\n        return new _TypeSize(\r\n          Math.max(explicitAlign, info.align / divisor),\r\n          Math.max(explicitSize, info.size / divisor)\r\n        );\r\n      }\r\n    }\r\n\r\n    if (type instanceof ArrayInfo) {\r\n      let arrayType = type as ArrayInfo;\r\n      let align = 8;\r\n      let size = 8;\r\n      // Type                 AlignOf(T)          Sizeof(T)\r\n      // array<E, N>          AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))\r\n      // array<E>             AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))  (N determined at runtime)\r\n      //\r\n      // @stride(Q)\r\n      // array<E, N>          AlignOf(E)          N * Q\r\n      //\r\n      // @stride(Q)\r\n      // array<E>             AlignOf(E)          Nruntime * Q\r\n      //const E = type.format.name;\r\n      const E = this._getTypeSize(arrayType.format);\r\n      if (E !== null) {\r\n        size = E.size;\r\n        align = E.align;\r\n      }\r\n\r\n      const N = arrayType.count;\r\n\r\n      const stride = this._getAttributeNum(\r\n        type?.attributes ?? null,\r\n        \"stride\",\r\n        this._roundUp(align, size)\r\n      );\r\n      size = N * stride;\r\n\r\n      if (explicitSize) {\r\n        size = explicitSize;\r\n      }\r\n\r\n      return new _TypeSize(\r\n        Math.max(explicitAlign, align),\r\n        Math.max(explicitSize, size)\r\n      );\r\n    }\r\n\r\n    if (type instanceof StructInfo) {\r\n      let align = 0;\r\n      let size = 0;\r\n      // struct S     AlignOf:    max(AlignOfMember(S, M1), ... , AlignOfMember(S, MN))\r\n      //              SizeOf:     roundUp(AlignOf(S), OffsetOfMember(S, L) + SizeOfMember(S, L))\r\n      //                          Where L is the last member of the structure\r\n      let offset = 0;\r\n      let lastSize = 0;\r\n      let lastOffset = 0;\r\n      for (const m of type.members) {\r\n        const mi = this._getTypeSize(m.type);\r\n        if (mi !== null) {\r\n          align = Math.max(mi.align, align);\r\n          offset = this._roundUp(mi.align, offset + lastSize);\r\n          lastSize = mi.size;\r\n          lastOffset = offset;\r\n        }\r\n      }\r\n      size = this._roundUp(align, lastOffset + lastSize);\r\n\r\n      return new _TypeSize(\r\n        Math.max(explicitAlign, align),\r\n        Math.max(explicitSize, size)\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _isUniformVar(node: AST.Node): boolean {\r\n    return node instanceof AST.Var && node.storage == \"uniform\";\r\n  }\r\n\r\n  _isStorageVar(node: AST.Node): boolean {\r\n    return node instanceof AST.Var && node.storage == \"storage\";\r\n  }\r\n\r\n  _isTextureVar(node: AST.Node): boolean {\r\n    return (\r\n      node instanceof AST.Var &&\r\n      node.type !== null &&\r\n      WgslReflect._textureTypes.indexOf(node.type.name) != -1\r\n    );\r\n  }\r\n\r\n  _isSamplerVar(node: AST.Node): boolean {\r\n    return (\r\n      node instanceof AST.Var &&\r\n      node.type !== null &&\r\n      WgslReflect._samplerTypes.indexOf(node.type.name) != -1\r\n    );\r\n  }\r\n\r\n  _getAttribute(node: AST.Node, name: string): AST.Attribute | null {\r\n    const obj = node as Object;\r\n    if (!obj || !obj[\"attributes\"]) {\r\n      return null;\r\n    }\r\n    const attrs = obj[\"attributes\"];\r\n    for (let a of attrs) {\r\n      if (a.name == name) {\r\n        return a;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getAttributeNum(\r\n    attributes: Array<AST.Attribute> | null,\r\n    name: string,\r\n    defaultValue: number\r\n  ): number {\r\n    if (attributes === null) {\r\n      return defaultValue;\r\n    }\r\n    for (let a of attributes) {\r\n      if (a.name == name) {\r\n        let v = a !== null && a.value !== null ? a.value : defaultValue;\r\n        if (v instanceof Array) {\r\n          v = v[0];\r\n        }\r\n        if (typeof v === \"number\") {\r\n          return v;\r\n        }\r\n        if (typeof v === \"string\") {\r\n          return parseInt(v);\r\n        }\r\n        return defaultValue;\r\n      }\r\n    }\r\n    return defaultValue;\r\n  }\r\n\r\n  _roundUp(k: number, n: number): number {\r\n    return Math.ceil(n / k) * k;\r\n  }\r\n\r\n  // Type                 AlignOf(T)          Sizeof(T)\r\n  // i32, u32, or f32     4                   4\r\n  // atomic<T>            4                   4\r\n  // vec2<T>              8                   8\r\n  // vec3<T>              16                  12\r\n  // vec4<T>              16                  16\r\n  // mat2x2<f32>          8                   16\r\n  // mat3x2<f32>          8                   24\r\n  // mat4x2<f32>          8                   32\r\n  // mat2x3<f32>          16                  32\r\n  // mat3x3<f32>          16                  48\r\n  // mat4x3<f32>          16                  64\r\n  // mat2x4<f32>          16                  32\r\n  // mat3x4<f32>          16                  48\r\n  // mat4x4<f32>          16                  64\r\n  static readonly _typeInfo = {\r\n    f16: { align: 2, size: 2 },\r\n    i32: { align: 4, size: 4 },\r\n    u32: { align: 4, size: 4 },\r\n    f32: { align: 4, size: 4 },\r\n    atomic: { align: 4, size: 4 },\r\n    vec2: { align: 8, size: 8 },\r\n    vec3: { align: 16, size: 12 },\r\n    vec4: { align: 16, size: 16 },\r\n    mat2x2: { align: 8, size: 16 },\r\n    mat3x2: { align: 8, size: 24 },\r\n    mat4x2: { align: 8, size: 32 },\r\n    mat2x3: { align: 16, size: 32 },\r\n    mat3x3: { align: 16, size: 48 },\r\n    mat4x3: { align: 16, size: 64 },\r\n    mat2x4: { align: 16, size: 32 },\r\n    mat3x4: { align: 16, size: 48 },\r\n    mat4x4: { align: 16, size: 64 },\r\n  };\r\n\r\n  static readonly _textureTypes = TokenTypes.any_texture_type.map((t) => {\r\n    return t.name;\r\n  });\r\n  static readonly _samplerTypes = TokenTypes.sampler_type.map((t) => {\r\n    return t.name;\r\n  });\r\n}\r\n","import * as AST from \"./wgsl_ast.js\";\r\nimport { WgslParser } from \"./wgsl_parser.js\";\r\nimport { WgslReflect, TypeInfo, ArrayInfo, StructInfo, MemberInfo, TemplateInfo } from \"./wgsl_reflect.js\";\r\n\r\nclass Data {\r\n    buffer: ArrayBuffer;\r\n    typeInfo: TypeInfo;\r\n    offset: number;\r\n    textureSize: number[] = [0, 0, 0];\r\n\r\n    constructor(data: ArrayBuffer | Float32Array | Uint32Array | Int32Array | Uint8Array | Int8Array,\r\n        typeInfo: TypeInfo, offset: number = 0, textureSize?: number[]) {\r\n        this.buffer = data instanceof ArrayBuffer ? data : data.buffer;\r\n        this.typeInfo = typeInfo;\r\n        this.offset = offset;\r\n        if (textureSize !== undefined) {\r\n            this.textureSize = textureSize;\r\n        }\r\n    }\r\n};\r\n\r\ntype ASTVarNode = AST.Let | AST.Var | AST.Argument;\r\n\r\nclass Var {\r\n    name: string;\r\n    value: any;\r\n    node: ASTVarNode | null;\r\n\r\n    constructor(n: string, v: any, node: ASTVarNode | null) {\r\n        this.name = n;\r\n        this.value = v;\r\n        this.node = node;\r\n    }\r\n\r\n    clone(): Var {\r\n        return new Var(this.name, this.value, this.node);\r\n    }\r\n\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n};\r\n\r\nclass Function {\r\n    name: string;\r\n    node: AST.Function;\r\n\r\n    constructor(node: AST.Function) {\r\n        this.name = node.name;\r\n        this.node = node;\r\n    }\r\n\r\n    clone(): Function {\r\n        return new Function(this.node);\r\n    }\r\n};\r\n\r\nclass ExecContext {\r\n    parent: ExecContext | null = null;\r\n    variables: Map<string, Var> = new Map<string, Var>();\r\n    functions: Map<string, Function> = new Map<string, Function>();\r\n\r\n    constructor(parent?: ExecContext) {\r\n        if (parent) {\r\n            this.parent = parent;\r\n        }\r\n    }\r\n\r\n    getVariable(name: string): Var | null {\r\n        if (this.variables.has(name)) {\r\n            return this.variables.get(name);\r\n        }\r\n        if (this.parent) {\r\n            return this.parent.getVariable(name);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getFunction(name: string): Function | null {\r\n        if (this.functions.has(name)) {\r\n            return this.functions.get(name);\r\n        }\r\n        if (this.parent) {\r\n            return this.parent.getFunction(name);\r\n        }\r\n        return null\r\n    }\r\n\r\n    createVariable(name: string, value: any, node?: ASTVarNode) {\r\n        this.variables.set(name, new Var(name, value, node ?? null));\r\n    }\r\n\r\n    setVariable(name: string, value: any, node?: ASTVarNode) {\r\n        const v = this.getVariable(name);\r\n        if (v !== null) {\r\n            v.value = value;\r\n        } else {\r\n            this.createVariable(name, value, node);\r\n        }\r\n    }\r\n\r\n    getVariableValue(name: string) {\r\n        const v = this.getVariable(name);\r\n        return v?.value ?? null;\r\n    }\r\n\r\n    clone(): ExecContext {\r\n        return new ExecContext(this);\r\n    }\r\n};\r\n\r\nexport class WgslExec {\r\n    ast: Array<AST.Node>;\r\n    context: ExecContext;\r\n    reflection: WgslReflect;\r\n\r\n    constructor(code: string, context?: ExecContext) {\r\n        const parser = new WgslParser();\r\n        this.ast = parser.parse(code);\r\n        this.reflection = new WgslReflect();\r\n        this.reflection.updateAST(this.ast);\r\n\r\n        this.context = context?.clone() ?? new ExecContext();\r\n    }\r\n\r\n    getVariableValue(name: string) {\r\n        return this.context.getVariableValue(name);\r\n    }\r\n\r\n    execute(config?: Object) {\r\n        config = config ?? {};\r\n        if (config[\"constants\"]) {\r\n            for (const k in config[\"constants\"]) {\r\n                const v = config[\"constants\"][k];\r\n                this.context.setVariable(k, v);\r\n            }\r\n        }\r\n\r\n        this._execStatements(this.ast, this.context);\r\n    }\r\n\r\n    dispatchWorkgroups(kernel: string, dispatchCount: number | number[], bindGroups: Object, config?: Object) {\r\n        const context = this.context.clone();\r\n\r\n        config = config ?? {};\r\n        if (config[\"constants\"]) {\r\n            for (const k in config[\"constants\"]) {\r\n                const v = config[\"constants\"][k];\r\n                context.setVariable(k, v);\r\n            }\r\n        }\r\n\r\n        this._execStatements(this.ast, context);\r\n\r\n        const f = context.functions.get(kernel);\r\n        if (!f) {\r\n            console.error(`Function ${kernel} not found`);\r\n            return;\r\n        }\r\n\r\n        if (typeof dispatchCount === \"number\") {\r\n            dispatchCount = [dispatchCount, 1, 1];\r\n        } else if (dispatchCount.length === 0) {\r\n            console.error(`Invalid dispatch count`);\r\n            return;\r\n        } else if (dispatchCount.length === 1) {\r\n            dispatchCount = [dispatchCount[0], 1, 1];\r\n        } else if (dispatchCount.length === 2) {\r\n            dispatchCount = [dispatchCount[0], dispatchCount[1], 1];\r\n        } else if (dispatchCount.length > 3) {\r\n            dispatchCount = [dispatchCount[0], dispatchCount[1], dispatchCount[2]];\r\n        }\r\n\r\n        const depth = dispatchCount[2];\r\n        const height = dispatchCount[1];\r\n        const width = dispatchCount[0];\r\n\r\n        context.setVariable(\"@num_workgroups\", dispatchCount);\r\n\r\n        for (const set in bindGroups) {\r\n            for (const binding in bindGroups[set]) {\r\n                const entry = bindGroups[set][binding];\r\n\r\n                context.variables.forEach((v) => {\r\n                    const node = v.node;\r\n                    if (node?.attributes) {\r\n                        let b = null;\r\n                        let s = null;\r\n                        for (const attr of node.attributes) {\r\n                            if (attr.name === \"binding\") {\r\n                                b = attr.value;\r\n                            } else if (attr.name === \"group\") {\r\n                                s = attr.value;\r\n                            }\r\n                        }\r\n                        if (binding == b && set == s) {\r\n                            if (entry.texture !== undefined && entry.size !== undefined) {\r\n                                // Texture\r\n                                v.value = new Data(entry.texture, this._getTypeInfo(node.type), 0, entry.size);\r\n                            } else if (entry.uniform !== undefined) {\r\n                                // Uniform buffer\r\n                                v.value = new Data(entry, this._getTypeInfo(node.type));\r\n                            } else {\r\n                                // Storage buffer\r\n                                v.value = new Data(entry, this._getTypeInfo(node.type));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        for (let z = 0; z < depth; ++z) {\r\n            for (let y = 0; y < height; ++y) {\r\n                for (let x = 0; x < width; ++x) {\r\n                    context.setVariable(\"@workgroup_id\", [x, y, z]);\r\n                    this._dispatchWorkgroup(f, [x, y, z], context);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _dispatchWorkgroup(f: Function, workgroup_id: number[], context: ExecContext) {\r\n        const workgroupSize = [1, 1, 1];\r\n        for (const attr of f.node.attributes) {\r\n            if (attr.name === \"workgroup_size\") {\r\n                if (attr.value.length > 0) {\r\n                    // The value could be an override constant\r\n                    const v = context.getVariableValue(attr.value[0]);\r\n                    if (v !== null) {\r\n                        workgroupSize[0] = v;\r\n                    } else {\r\n                        workgroupSize[0] = parseInt(attr.value[0]);\r\n                    }\r\n                }\r\n                if (attr.value.length > 1) {\r\n                    const v = context.getVariableValue(attr.value[1]);\r\n                    if (v !== null) {\r\n                        workgroupSize[1] = v;\r\n                    } else {\r\n                        workgroupSize[1] = parseInt(attr.value[1]);\r\n                    }\r\n                }\r\n                if (attr.value.length > 2) {\r\n                    const v = context.getVariableValue(attr.value[2]);\r\n                    if (v !== null) {\r\n                        workgroupSize[2] = v;\r\n                    } else {\r\n                        workgroupSize[2] = parseInt(attr.value[2]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        context.setVariable(\"@workgroup_size\", workgroupSize);\r\n\r\n        const width = workgroupSize[0];\r\n        const height = workgroupSize[1];\r\n        const depth = workgroupSize[2];\r\n\r\n        for (let z = 0, li = 0; z < depth; ++z) {\r\n            for (let y = 0; y < height; ++y) {\r\n                for (let x = 0; x < width; ++x, ++li) {\r\n                    const local_invocation_id = [x, y, z];\r\n                    const global_invocation_id = [\r\n                        x + workgroup_id[0] * workgroupSize[0],\r\n                        y + workgroup_id[1] * workgroupSize[1],\r\n                        z + workgroup_id[2] * workgroupSize[2]];\r\n\r\n                    context.setVariable(\"@local_invocation_id\", local_invocation_id);\r\n                    context.setVariable(\"@global_invocation_id\", global_invocation_id);\r\n                    context.setVariable(\"@local_invocation_index\", li);\r\n\r\n                    this._dispatchExec(f, context);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _dispatchExec(f: Function, context: ExecContext) {\r\n        // Update any built-in input args.\r\n        // TODO: handle input structs.\r\n        for (const arg of f.node.args) {\r\n            for (const attr of arg.attributes) {\r\n                if (attr.name === \"builtin\") {\r\n                    const globalName = `@${attr.value}`;\r\n                    const globalVar = context.getVariable(globalName);\r\n                    if (globalVar !== undefined) {\r\n                        context.variables.set(arg.name, globalVar);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._execStatements(f.node.body, context);\r\n    }\r\n\r\n    _execStatements(statements: Array<AST.Node>, context: ExecContext) {\r\n        for (const stmt of statements) {\r\n            // Block statements are declared as arrays of statements.\r\n            if (stmt instanceof Array) {\r\n                const subContext = context.clone();\r\n                const res = this._execStatements(stmt, subContext);\r\n                if (res) {\r\n                    return res;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            const res = this._execStatement(stmt, context);\r\n            if (res) {\r\n                return res;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _execStatement(stmt: AST.Node, context: ExecContext): any {\r\n        if (stmt instanceof AST.Return) {\r\n            return this._evalExpression(stmt.value, context);\r\n        } else if (stmt instanceof AST.Break) {\r\n            return stmt;\r\n        } else if (stmt instanceof AST.Continue) {\r\n            return stmt;\r\n        } else if (stmt instanceof AST.Let) {\r\n            this._let(stmt as AST.Let, context);\r\n        } else if (stmt instanceof AST.Var) {\r\n            this._var(stmt as AST.Var, context);\r\n        } else if (stmt instanceof AST.Const) {\r\n            this._const(stmt as AST.Const, context);\r\n        } else if (stmt instanceof AST.Function) {\r\n            this._function(stmt as AST.Function, context);\r\n        } else if (stmt instanceof AST.If) {\r\n            return this._if(stmt as AST.If, context);\r\n        } else if (stmt instanceof AST.For) {\r\n            return this._for(stmt as AST.For, context);\r\n        } else if (stmt instanceof AST.While) {\r\n            return this._while(stmt as AST.While, context);\r\n        } else if (stmt instanceof AST.Assign) {\r\n            return this._assign(stmt as AST.Assign, context);\r\n        } else if (stmt instanceof AST.Increment) {\r\n            this._increment(stmt as AST.Increment, context);\r\n        } else if (stmt instanceof AST.Struct) {\r\n            return null;\r\n        } else if (stmt instanceof AST.Override) {\r\n            const name = (stmt as AST.Override).name;\r\n            if (context.getVariable(name) === null) {\r\n                console.error(`Override constant ${name} not found. Line ${stmt.line}`);\r\n                return null;\r\n            }\r\n        } else {\r\n            console.error(`Unknown statement type.`, stmt, `Line ${stmt.line}`);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _increment(node: AST.Increment, context: ExecContext) {\r\n        const name = this._getVariableName(node.variable, context);\r\n        const v = context.getVariable(name);\r\n        if (!v) {\r\n            console.error(`Variable ${name} not found. Line ${node.line}`);\r\n            return;\r\n        }\r\n        if (node.operator === \"++\") {\r\n            v.value++;\r\n        } else if (node.operator === \"--\") {\r\n            v.value--;\r\n        }\r\n        return v.value;\r\n    }\r\n\r\n    _getVariableName(node: AST.Node, context: ExecContext) {\r\n        if (node instanceof AST.VariableExpr) {\r\n            return (node as AST.VariableExpr).name;\r\n        } else {\r\n            console.error(`Unknown variable type`, node, 'Line', node.line);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _assign(node: AST.Assign, context: ExecContext) {\r\n        const name = this._getVariableName(node.variable, context);\r\n        const v = context.getVariable(name);\r\n\r\n        if (!v) {\r\n            console.error(`Variable ${name} not found. Line ${node.line}`);\r\n            return;\r\n        }\r\n\r\n        let value = this._evalExpression(node.value, context);\r\n\r\n        if (node.operator !== \"=\") {\r\n            const currentValue = this._getDataValue(v.value, node.variable.postfix, context);\r\n\r\n            if (currentValue.length !== undefined && value.length !== undefined) {\r\n                if (currentValue.length !== value.length) {\r\n                    console.error(`Vector length mismatch. Line ${node.line}`);\r\n                    return;\r\n                }\r\n\r\n                if (node.operator === \"+=\") {\r\n                    for (let i = 0; i < currentValue.length; ++i) {\r\n                        value[i] = currentValue[i] + value[i];\r\n                    }\r\n                } else if (node.operator === \"-=\") {\r\n                    for (let i = 0; i < currentValue.length; ++i) {\r\n                        value[i] = currentValue[i] - value[i];\r\n                    }\r\n                } else if (node.operator === \"*=\") {\r\n                    for (let i = 0; i < currentValue.length; ++i) {\r\n                        value[i] = currentValue[i] * value[i];\r\n                    }\r\n                } else if (node.operator === \"/=\") {\r\n                    for (let i = 0; i < currentValue.length; ++i) {\r\n                        value[i] = currentValue[i] / value[i];\r\n                    }\r\n                } else if (node.operator === \"%=\") {\r\n                    for (let i = 0; i < currentValue.length; ++i) {\r\n                        value[i] = currentValue[i] % value[i];\r\n                    }\r\n                } else if (node.operator === \"&=\") {\r\n                    for (let i = 0; i < currentValue.length; ++i) {\r\n                        value[i] = currentValue[i] & value[i];\r\n                    }\r\n                } else if (node.operator === \"|=\") {\r\n                    for (let i = 0; i < currentValue.length; ++i) {\r\n                        value[i] = currentValue[i] | value[i];\r\n                    }\r\n                } else if (node.operator === \"^=\") {\r\n                    for (let i = 0; i < currentValue.length; ++i) {\r\n                        value[i] = currentValue[i] ^ value[i];\r\n                    }\r\n                } else if (node.operator === \"<<=\") {\r\n                    for (let i = 0; i < currentValue.length; ++i) {\r\n                        value[i] = currentValue[i] << value[i];\r\n                    }\r\n                } else if (node.operator === \">>=\") {\r\n                    for (let i = 0; i < currentValue.length; ++i) {\r\n                        value[i] = currentValue[i] >> value[i];\r\n                    }\r\n                }\r\n            } else {\r\n                if (node.operator === \"+=\") {\r\n                    value = currentValue + value;\r\n                } else if (node.operator === \"-=\") {\r\n                    value = currentValue - value;\r\n                } else if (node.operator === \"*=\") {\r\n                    value = currentValue * value;\r\n                } else if (node.operator === \"/=\") {\r\n                    value = currentValue / value;\r\n                } else if (node.operator === \"%=\") {\r\n                    value = currentValue % value;\r\n                } else if (node.operator === \"&=\") {\r\n                    value = currentValue & value;\r\n                } else if (node.operator === \"|=\") {\r\n                    value = currentValue | value;\r\n                } else if (node.operator === \"^=\") {\r\n                    value = currentValue - value;\r\n                } else if (node.operator === \"<<=\") {\r\n                    value = currentValue << value;\r\n                } else if (node.operator === \">>=\") {\r\n                    value = currentValue >> value;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (v.value instanceof Data) {\r\n            this._setDataValue(v.value, value, node.variable.postfix, context);\r\n        } else if (node.variable.postfix) {\r\n            if (node.variable.postfix instanceof AST.ArrayIndex) {\r\n                const idx = this._evalExpression(node.variable.postfix.index, context);\r\n                // TODO: use array format to determine how to set the value\r\n                if (v.value.length !== undefined) {\r\n                    if (v.node.type.isArray) {\r\n                        const arrayType = v.node.type as AST.ArrayType;\r\n                        if (arrayType.format.name === \"vec3\" ||\r\n                            arrayType.format.name === \"vec3u\" ||\r\n                            arrayType.format.name === \"vec3i\" ||\r\n                            arrayType.format.name === \"vec3f\") {\r\n                            v.value[idx * 3 + 0] = value[0];\r\n                            v.value[idx * 3 + 1] = value[1];\r\n                            v.value[idx * 3 + 2] = value[2];\r\n                        } else if (arrayType.format.name === \"vec4\" ||\r\n                            arrayType.format.name === \"vec4u\" ||\r\n                            arrayType.format.name === \"vec4i\" ||\r\n                            arrayType.format.name === \"vec4f\") {\r\n                            v.value[idx * 4 + 0] = value[0];\r\n                            v.value[idx * 4 + 1] = value[1];\r\n                            v.value[idx * 4 + 2] = value[2];\r\n                            v.value[idx * 4 + 3] = value[3];\r\n                        } else {\r\n                            v.value[idx] = value;\r\n                        }\r\n                    } else {\r\n                        v.value[idx] = value;\r\n                    }\r\n                } else {\r\n                    console.error(`Variable ${v.name} is not an array. Line ${node.line}`);\r\n                }\r\n            } else if (node.variable.postfix instanceof AST.StringExpr) {\r\n                console.error(`TODO Struct member. Line ${node.line}`);\r\n            }\r\n        } else {\r\n            v.value = value;\r\n        }\r\n    }\r\n\r\n    _function(node: AST.Function, context: ExecContext) {\r\n        const f = new Function(node);\r\n        context.functions.set(node.name, f);\r\n    }\r\n\r\n    _const(node: AST.Const, context: ExecContext) {\r\n        let value = null;\r\n        if (node.value != null) {\r\n            value = this._evalExpression(node.value, context);\r\n        }\r\n        context.createVariable(node.name, value, node);\r\n    }\r\n\r\n    _let(node: AST.Let, context: ExecContext) {\r\n        let value = null;\r\n        if (node.value != null) {\r\n            value = this._evalExpression(node.value, context);\r\n        }\r\n        context.createVariable(node.name, value, node);\r\n    }\r\n\r\n    _var(node: AST.Var, context: ExecContext) {\r\n        let value = null;\r\n        if (node.value != null) {\r\n            value = this._evalExpression(node.value, context);\r\n        }\r\n        context.createVariable(node.name, value, node);\r\n    }\r\n\r\n    _if(node: AST.If, context: ExecContext) {\r\n        context = context.clone();\r\n        const condition = this._evalExpression(node.condition, context);\r\n        if (condition) {\r\n            return this._execStatements(node.body, context);\r\n        }\r\n\r\n        for (const e of node.elseif) {\r\n            const condition = this._evalExpression(e.condition, context);\r\n            if (condition) {\r\n                return this._execStatements(e.body, context);\r\n            }\r\n        }\r\n\r\n        if (node.else) {\r\n            return this._execStatements(node.else, context);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _for(node: AST.For, context: ExecContext) {\r\n        context = context.clone();\r\n        this._execStatement(node.init, context);\r\n        while (this._evalExpression(node.condition, context)) {\r\n            const res = this._execStatements(node.body, context);\r\n            if (res) {\r\n                return res;\r\n            }\r\n            this._execStatement(node.increment, context);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _while(node: AST.While, context: ExecContext) {\r\n        context = context.clone();\r\n        let condition = this._evalExpression(node.condition, context);\r\n        while (condition) {\r\n            const res = this._execStatements(node.body, context);\r\n            if (res instanceof AST.Break) {\r\n                break;\r\n            } else if (res instanceof AST.Continue) {\r\n                continue;\r\n            } else if (res !== null) {\r\n                return res;\r\n            }\r\n            condition = this._evalExpression(node.condition, context);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _evalExpression(node: AST.Node, context: ExecContext) {\r\n        if (node instanceof AST.GroupingExpr) {\r\n            const grp = node as AST.GroupingExpr;\r\n            return this._evalExpression(grp.contents[0], context);\r\n        } else if (node instanceof AST.BinaryOperator) {\r\n            return this._evalBinaryOp(node as AST.BinaryOperator, context);\r\n        } else if (node instanceof AST.LiteralExpr) {\r\n            return this._evalLiteral(node as AST.LiteralExpr, context);\r\n        } else if (node instanceof AST.StringExpr) {\r\n            return (node as AST.StringExpr).value;\r\n        } else if (node instanceof AST.VariableExpr) {\r\n            return this._evalVariable(node as AST.VariableExpr, context);\r\n        } else if (node instanceof AST.CallExpr) {\r\n            return this._evalCall(node as AST.CallExpr, context);\r\n        } else if (node instanceof AST.CreateExpr) {\r\n            return this._evalCreate(node as AST.CreateExpr, context);\r\n        } else if (node instanceof AST.ConstExpr) {\r\n            return this._evalConst(node as AST.ConstExpr, context);\r\n        }\r\n        console.error(`Unknown expression type`, node, `Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _evalConst(node: AST.ConstExpr, context: ExecContext) {\r\n        const v = context.getVariableValue(node.name);\r\n        return v;\r\n    }\r\n\r\n    _evalCreate(node: AST.CreateExpr, context: ExecContext) {\r\n        const typeName = this._getTypeName(node.type);\r\n\r\n        switch (typeName) {\r\n            // Constructor Built-in Functions\r\n            // Value Constructor Built-in Functions\r\n            case \"bool\":\r\n                this._callConstructorValue(node, context) ? 1 : 0;\r\n            case \"i32\":\r\n            case \"u32\":\r\n                return Math.floor(this._callConstructorValue(node, context));\r\n            case \"f32\":\r\n            case \"f16\":\r\n                this._callConstructorValue(node, context);\r\n            case \"vec2\":\r\n            case \"vec3\":\r\n            case \"vec4\":\r\n            case \"vec2f\":\r\n            case \"vec3f\":\r\n            case \"vec4f\":\r\n            case \"vec2i\":\r\n            case \"vec3i\":\r\n            case \"vec4i\":\r\n            case \"vec2u\":\r\n            case \"vec3u\":\r\n            case \"vec4u\":\r\n                return this._callConstructorVec(node, context);\r\n            case \"mat2x2\":\r\n            case \"mat2x2i\":\r\n            case \"mat2x2u\":\r\n            case \"mat2x2f\":\r\n            case \"mat2x3\":\r\n            case \"mat2x3i\":\r\n            case \"mat2x3u\":\r\n            case \"mat2x3f\":\r\n            case \"mat2x4\":\r\n            case \"mat2x4i\":\r\n            case \"mat2x4u\":\r\n            case \"mat2x4f\":\r\n            case \"mat3x2\":\r\n            case \"mat3x2i\":\r\n            case \"mat3x2u\":\r\n            case \"mat3x2f\":\r\n            case \"mat3x3\":\r\n            case \"mat3x3i\":\r\n            case \"mat3x3u\":\r\n            case \"mat3x3f\":\r\n            case \"mat3x4\":\r\n            case \"mat3x4i\":\r\n            case \"mat3x4u\":\r\n            case \"mat3x4f\":\r\n            case \"mat4x2\":\r\n            case \"mat4x2i\":\r\n            case \"mat4x2u\":\r\n            case \"mat4x2f\":\r\n            case \"mat4x3\":\r\n            case \"mat4x3i\":\r\n            case \"mat4x3u\":\r\n            case \"mat4x3f\":\r\n            case \"mat4x4\":\r\n            case \"mat4x4i\":\r\n            case \"mat4x4u\":\r\n            case \"mat4x4f\":\r\n                return this._callConstructorMatrix(node, context);\r\n            case \"array\":\r\n                return this._callConstructorArray(node, context);\r\n        }\r\n\r\n        const typeInfo = this._getTypeInfo(node.type);\r\n        if (typeInfo === null) {\r\n            console.error(`Unknown type ${typeName}. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const data = new Data(new ArrayBuffer(typeInfo.size), typeInfo, 0);\r\n\r\n        // Assign the values in node.args to the data.\r\n        if (typeInfo instanceof StructInfo) {\r\n            for (let i = 0; i < node.args.length; ++i) {\r\n                const memberInfo = typeInfo.members[i];\r\n                const arg = node.args[i];\r\n                const value = this._evalExpression(arg, context);\r\n                this._setData(data, value, memberInfo.type, memberInfo.offset, context);\r\n            }\r\n        } else {\r\n            console.error(`Unknown type \"${typeName}\". Line ${node.line}`);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    _evalLiteral(node: AST.LiteralExpr, context: ExecContext) {\r\n        return node.value;\r\n    }\r\n\r\n    _getArraySwizzle(value: any, member: string) {\r\n        const swizzleIndex = { \"x\": 0, \"y\": 1, \"z\": 2, \"w\": 3, \"r\": 0, \"g\": 1, \"b\": 2, \"a\": 3 };\r\n        const m = member.toLocaleLowerCase();\r\n        if (member.length === 1) {\r\n            const idx = swizzleIndex[m];\r\n            if (idx !== undefined) {\r\n                return value[idx];\r\n            }\r\n        } else if (member.length === 2) {\r\n            const idx0 = swizzleIndex[m[0]];\r\n            const idx1 = swizzleIndex[m[1]];\r\n            if (idx0 !== undefined && idx1 !== undefined) {\r\n                return [value[idx0], value[idx1]];\r\n            }\r\n        } else if (member.length === 3) {\r\n            const idx0 = swizzleIndex[m[0]];\r\n            const idx1 = swizzleIndex[m[1]];\r\n            const idx2 = swizzleIndex[m[2]];\r\n            if (idx0 !== undefined && idx1 !== undefined && idx2 !== undefined) {\r\n                return [value[idx0], value[idx1], value[idx2]];\r\n            }\r\n        } else if (member.length === 4) {\r\n            const idx0 = swizzleIndex[m[0]];\r\n            const idx1 = swizzleIndex[m[1]];\r\n            const idx2 = swizzleIndex[m[2]];\r\n            const idx3 = swizzleIndex[m[3]];\r\n            if (idx0 !== undefined && idx1 !== undefined && idx2 !== undefined && idx3 !== undefined) {\r\n                return [value[idx0], value[idx1], value[idx2], value[idx3]];\r\n            }\r\n        }\r\n        console.error(`Unknown member ${member}`);\r\n        return null;\r\n    }\r\n\r\n    _evalVariable(node: AST.VariableExpr, context: ExecContext) {\r\n        const value = context.getVariableValue(node.name);\r\n        if (value instanceof Data) {\r\n            return this._getDataValue(value, node.postfix, context);\r\n        }\r\n        if (node.postfix) {\r\n            if (node.postfix instanceof AST.ArrayIndex) {\r\n                const idx = this._evalExpression(node.postfix.index, context);\r\n                if (value?.length !== undefined) {\r\n                    return value[idx];\r\n                } else {\r\n                    console.error(`Variable ${node.name} is not an array. Line ${node.line}`);\r\n                }\r\n            } else if (node.postfix instanceof AST.StringExpr) {\r\n                const member = node.postfix.value;\r\n                if (value instanceof Array) {\r\n                    return this._getArraySwizzle(value, member);\r\n                } else {\r\n                    const variable = context.getVariable(node.name);\r\n                    if (variable) {\r\n                        if (variable.node.type?.isStruct) {\r\n                            const structInfo = this.reflection.getStructInfo(variable.node.type.name);\r\n                            for (const m of structInfo.members) {\r\n                                if (m.name === member) {\r\n                                    const v = new Float32Array(variable.value.buffer, m.offset);\r\n                                    if (node.postfix.postfix) {\r\n                                        const postfix = this._evalExpression(node.postfix.postfix, context);\r\n                                        return this._getArraySwizzle(value, postfix);\r\n                                    }\r\n                                    return v;\r\n                                }\r\n                            }\r\n                            console.log(structInfo);\r\n                        }\r\n                    }\r\n                    console.error(`Unknown variable postfix`, node.postfix, `. Line ${node.line}`);\r\n                }\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n    _evalBinaryOp(node: AST.BinaryOperator, context: ExecContext) {\r\n        const l = this._evalExpression(node.left, context);\r\n        const r = this._evalExpression(node.right, context);\r\n        switch (node.operator) {\r\n            case \"+\":\r\n                return l + r;\r\n            case \"-\":\r\n                return l - r;\r\n            case \"*\":\r\n                return l * r;\r\n            case \"%\":\r\n                return l % r;\r\n            case \"/\":\r\n                return l / r;\r\n            case \">\":\r\n                if (l.length !== undefined && r.length !== undefined) {\r\n                    if (l.length !== r.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    return l.map((x: number, i: number) => x > r[i])\r\n                }\r\n                return l > r;\r\n            case \"<\":\r\n                if (l.length !== undefined && r.length !== undefined) {\r\n                    if (l.length !== r.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    return l.map((x: number, i: number) => x < r[i])\r\n                }\r\n                return l < r;\r\n            case \"==\":\r\n                return l === r;\r\n            case \"!=\":\r\n                return l !== r;\r\n            case \">=\":\r\n                return l >= r;\r\n            case \"<=\":\r\n                return l <= r;\r\n            case \"&&\":\r\n                return l && r;\r\n            case \"||\":\r\n                return l || r;\r\n        }\r\n        console.error(`Unknown operator ${node.operator}. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _evalCall(node: AST.CallExpr, context: ExecContext) {\r\n        const f = context.functions.get(node.name);\r\n        if (!f) {\r\n            return this._callFunction(node, context);\r\n        }\r\n\r\n        const subContext = context.clone();\r\n        for (let ai = 0; ai < f.node.args.length; ++ai) {\r\n            const arg = f.node.args[ai];\r\n            const value = this._evalExpression(node.args[ai], subContext);\r\n            subContext.setVariable(arg.name, value, arg);\r\n        }\r\n\r\n        return this._execStatements(f.node.body, subContext);\r\n    }\r\n\r\n    _callFunction(node: AST.CallExpr, context: ExecContext) {\r\n        switch (node.name) {\r\n            case \"all\":\r\n                return this._callAll(node, context);\r\n            case \"any\":\r\n                return this._callAny(node, context);\r\n            case \"arrayLength\":\r\n                return this._callArrayLength(node, context);\r\n            case \"dot\":\r\n                return this._callDot(node, context);\r\n            case \"min\":\r\n                return this._callMin(node, context);\r\n            case \"max\":\r\n                return this._callMax(node, context);\r\n            case \"saturate\":\r\n                return this._callSaturate(node, context);\r\n            case \"select\":\r\n                return this._callSelect(node, context);\r\n\r\n            case \"textureDimensions\":\r\n                return this._callTextureDimensions(node, context);\r\n            case \"textureLoad\":\r\n                return this._callTextureLoad(node, context);\r\n        }\r\n\r\n        const f = context.getFunction(node.name);\r\n        if (f) {\r\n            const subContext = context.clone();\r\n            for (let ai = 0; ai < f.node.args.length; ++ai) {\r\n                const arg = f.node.args[ai];\r\n                const value = this._evalExpression(node.args[ai], subContext);\r\n                subContext.setVariable(arg.name, value, arg);\r\n            }\r\n            return this._execStatements(f.node.body, subContext);\r\n        }\r\n\r\n        console.error(`Function ${node.name} not found. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _callDot(node: AST.CallExpr, context: ExecContext) {\r\n        const l = this._evalExpression(node.args[0], context);\r\n        const r = this._evalExpression(node.args[1], context);\r\n        let sum = 0;\r\n        for (let i = 0; i < l.length; ++i) {\r\n            sum += l[i] * r[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    _callMin(node: AST.CallExpr, context: ExecContext) {\r\n        const l = this._evalExpression(node.args[0], context);\r\n        const r = this._evalExpression(node.args[1], context);\r\n        return Math.min(l, r);\r\n    }\r\n\r\n    _callMax(node: AST.CallExpr, context: ExecContext) {\r\n        const l = this._evalExpression(node.args[0], context);\r\n        const r = this._evalExpression(node.args[1], context);\r\n        return Math.max(l, r);\r\n    }\r\n\r\n    _callSaturate(node: AST.CallExpr, context: ExecContext) {\r\n        const value = this._evalExpression(node.args[0], context);\r\n        return Math.min(Math.max(value, 0), 1);\r\n    }\r\n\r\n    _callArrayLength(node: AST.CallExpr, context: ExecContext) {\r\n        let arrayArg = node.args[0];\r\n        // TODO: handle \"&\" operator\r\n        if (arrayArg instanceof AST.UnaryOperator) {\r\n            arrayArg = (arrayArg as AST.UnaryOperator).right;\r\n        }\r\n        const arrayData = this._evalExpression(arrayArg, context);\r\n        if (arrayData.typeInfo.size === 0) {\r\n            const count = arrayData.buffer.byteLength / arrayData.typeInfo.stride;\r\n            return count;\r\n        }\r\n        return arrayData.typeInfo.size;\r\n    }\r\n\r\n    _callConstructorValue(node: AST.CreateExpr, context: ExecContext) {\r\n        if (node.args.length === 0) {\r\n            return 0;\r\n        }\r\n        return this._evalExpression(node.args[0], context);\r\n    }\r\n\r\n    _callConstructorArray(node: AST.CreateExpr, context: ExecContext) {\r\n        if (node.args.length === 0) {\r\n            if (node.type instanceof AST.ArrayType) {\r\n                if (node.type.count) {\r\n                    const format = node.type.format.name;\r\n                    if (format === \"bool\" || format === \"i32\" || format === \"u32\" || format === \"f32\" || format === \"f16\") {\r\n                        return new Array(node.type.count).fill(0);\r\n                    } else if (format === \"vec2\" || format === \"vec2u\" || format === \"vec2i\" || format === \"vec2f\") {\r\n                        return new Array(node.type.count).fill([0, 0]);\r\n                    } else if (format === \"vec3\" || format === \"vec3u\" || format === \"vec3i\" || format === \"vec3f\") {\r\n                        return new Array(node.type.count).fill([0, 0, 0]);\r\n                    } else if (format === \"vec4\" || format === \"vec4u\" || format === \"vec4i\" || format === \"vec4f\") {\r\n                        return new Array(node.type.count).fill([0, 0, 0, 0]);\r\n                    } else if (format === \"mat2x2\") {\r\n                        return new Array(node.type.count).fill([0, 0, 0, 0]);\r\n                    } else if (format === \"mat2x3\") {\r\n                        return new Array(node.type.count).fill([0, 0, 0, 0, 0, 0]);\r\n                    } else if (format === \"mat2x4\") {\r\n                        return new Array(node.type.count).fill([0, 0, 0, 0, 0, 0, 0, 0]);\r\n                    } else if (format === \"mat3x2\") {\r\n                        return new Array(node.type.count).fill([0, 0, 0, 0, 0, 0]);\r\n                    } else if (format === \"mat3x3\") {\r\n                        return new Array(node.type.count).fill([0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\n                    } else if (format === \"mat3x4\") {\r\n                        return new Array(node.type.count).fill([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\n                    } else if (format === \"mat4x2\") {\r\n                        return new Array(node.type.count).fill([0, 0, 0, 0, 0, 0, 0, 0]);\r\n                    } else if (format === \"mat4x3\") {\r\n                        return new Array(node.type.count).fill([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\n                    } else if (format === \"mat4x4\") {\r\n                        return new Array(node.type.count).fill([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\n                    } else {\r\n                        console.error(`TODO: support array format ${format}. Line ${node.line}`);\r\n                        return null;\r\n                    }\r\n                }\r\n            }\r\n            return [];\r\n        }\r\n        const values = [];\r\n        for (const arg of node.args) {\r\n            values.push(this._evalExpression(arg, context));\r\n        }\r\n        return values;\r\n    }\r\n\r\n    _callConstructorVec(node: AST.CallExpr | AST.CreateExpr, context: ExecContext) {\r\n        const typeName = node instanceof AST.CallExpr ? node.name : this._getTypeName(node.type);\r\n        if (node.args.length === 0) {\r\n            if (typeName === \"vec2\" || typeName === \"vec2f\" || typeName === \"vec2i\" || typeName === \"vec2u\") {\r\n                return [0, 0];\r\n            } else if (typeName === \"vec3\" || typeName === \"vec3f\" || typeName === \"vec3i\" || typeName === \"vec3u\") {\r\n                return [0, 0, 0];\r\n            } else if (typeName === \"vec4\" || typeName === \"vec4f\" || typeName === \"vec4i\" || typeName === \"vec4u\") {\r\n                return [0, 0, 0, 0];\r\n            }\r\n            console.error(`Invalid vec constructor ${typeName}. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const isInt = typeName.endsWith(\"i\") || typeName.endsWith(\"u\");\r\n\r\n        const values = [];\r\n        // TODO: make sure the number of args matches the vector length.\r\n        for (const arg of node.args) {\r\n            let v = this._evalExpression(arg, context);\r\n            if (isInt) {\r\n                v = Math.floor(v);\r\n            }\r\n            values.push(v);\r\n        }\r\n\r\n        if (typeName == \"f32\" || typeName == \"f16\" || typeName == \"i32\" || typeName == \"u32\") {\r\n            return values[0];\r\n        }\r\n\r\n        return values;\r\n    }\r\n\r\n    _callConstructorMatrix(node: AST.CallExpr | AST.CreateExpr, context: ExecContext) {\r\n        const typeName = node instanceof AST.CallExpr ? node.name : this._getTypeName(node.type);\r\n        if (node.args.length === 0) {\r\n            if (typeName === \"mat2x2\" || typeName === \"mat2x2f\" || typeName === \"mat2x2i\" || typeName === \"mat2x2u\") {\r\n                return [0, 0, 0, 0];\r\n            } else if (typeName === \"mat2x3\" || typeName === \"mat2x3f\" || typeName === \"mat2x3i\" || typeName === \"mat2x3u\") {\r\n                return [0, 0, 0, 0, 0, 0];\r\n            } else if (typeName === \"mat2x4\" || typeName === \"mat2x4f\" || typeName === \"mat2x4i\" || typeName === \"mat2x4u\") {\r\n                return [0, 0, 0, 0, 0, 0, 0, 0];\r\n            } else if (typeName === \"mat3x2\" || typeName === \"mat3x2f\" || typeName === \"mat3x2i\" || typeName === \"mat3x2u\") {\r\n                return [0, 0, 0, 0, 0, 0];\r\n            } else if (typeName === \"mat3x3\" || typeName === \"mat3x3f\" || typeName === \"mat3x3i\" || typeName === \"mat3x3u\") {\r\n                return [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n            } else if (typeName === \"mat3x4\" || typeName === \"mat3x4f\" || typeName === \"mat3x4i\" || typeName === \"mat3x4u\") {\r\n                return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n            } else if (typeName === \"mat4x2\" || typeName === \"mat4x2f\" || typeName === \"mat4x2i\" || typeName === \"mat4x2u\") {\r\n                return [0, 0, 0, 0, 0, 0, 0, 0];\r\n            } else if (typeName === \"mat4x3\" || typeName === \"mat4x3f\" || typeName === \"mat4x3i\" || typeName === \"mat4x3u\") {\r\n                return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n            } else if (typeName === \"mat4x4\" || typeName === \"mat4x4f\" || typeName === \"mat4x4i\" || typeName === \"mat4x4u\") {\r\n                return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n            }\r\n            console.error(`Invalid matrix constructor ${typeName}. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const isInt = typeName.endsWith(\"i\") || typeName.endsWith(\"u\");\r\n\r\n        const values = [];\r\n        // TODO: make sure the number of args matches the matrix size.\r\n        for (const arg of node.args) {\r\n            let v = this._evalExpression(arg, context);\r\n            if (isInt) {\r\n                v = Math.floor(v);\r\n            }\r\n            values.push(v);\r\n        }\r\n\r\n        return values;\r\n    }\r\n\r\n    _callAny(node: AST.CallExpr, context: ExecContext) {\r\n        const value = this._evalExpression(node.args[0], context);\r\n        return value.some((v: any) => v);\r\n    }\r\n\r\n    _callAll(node: AST.CallExpr, context: ExecContext) {\r\n        const value = this._evalExpression(node.args[0], context);\r\n        let isTrue = true;\r\n        value.forEach((x: any) => { if (!x) isTrue = false; });\r\n        return isTrue;\r\n    }\r\n\r\n    _callSelect(node: AST.CallExpr, context: ExecContext) {\r\n        const condition = this._evalExpression(node.args[2], context);\r\n        if (condition) {\r\n            return this._evalExpression(node.args[0], context);\r\n        } else {\r\n            return this._evalExpression(node.args[1], context);\r\n        }\r\n    }\r\n\r\n    _callTextureLoad(node: AST.CallExpr, context: ExecContext) {\r\n        const textureArg = node.args[0];\r\n        const uv = this._evalExpression(node.args[1], context);\r\n        const level = node.args.length > 2 ? this._evalExpression(node.args[2], context) : 0;\r\n        if (textureArg instanceof AST.VariableExpr) {\r\n            const textureName = (textureArg as AST.VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof Data) {\r\n                const textureSize = texture.textureSize;\r\n                const x = Math.floor(uv[0]);\r\n                const y = Math.floor(uv[1]);\r\n                // TODO non RGBA8 textures\r\n                const offset = (y * textureSize[0] + x) * 4; \r\n                const texel = new Uint8Array(texture.buffer, offset, 4);\r\n                // TODO: non-f32 textures\r\n                return [texel[0] / 255, texel[1] / 255, texel[2] / 255, texel[3] / 255];\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _callTextureDimensions(node: AST.CallExpr, context: ExecContext) {\r\n        const textureArg = node.args[0];\r\n        const level = node.args.length > 1 ? this._evalExpression(node.args[1], context) : 0;\r\n        if (textureArg instanceof AST.VariableExpr) {\r\n            const textureName = (textureArg as AST.VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof Data) {\r\n                return texture.textureSize;\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n        console.error(`Invalid texture argument for textureDimensions. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _getTypeInfo(type: AST.Type): TypeInfo {\r\n        return this.reflection._types.get(type);\r\n    }\r\n\r\n    _getTypeName(type: TypeInfo | AST.Type): string {\r\n        if (type instanceof AST.Type) {\r\n            type = this._getTypeInfo(type);\r\n        }\r\n        let name = type.name;\r\n        if (type instanceof TemplateInfo) {\r\n            if (type.format !== null) {\r\n                if (name === \"vec2\" || name === \"vec3\" || name === \"vec4\" ||\r\n                    name === \"mat2x2\" || name === \"mat2x3\" || name === \"mat2x4\" ||\r\n                    name === \"mat3x2\" || name === \"mat3x3\" || name === \"mat3x4\" ||\r\n                    name === \"mat4x2\" || name === \"mat4x3\" || name === \"mat4x4\") {\r\n                    if (type.format.name === \"f32\") {\r\n                        name += \"f\";\r\n                        return name;\r\n                    } else if (type.format.name === \"i32\") {\r\n                        name += \"i\";\r\n                        return name;\r\n                    } else if (type.format.name === \"u32\") {\r\n                        name += \"u\";\r\n                        return name;\r\n                    }\r\n                }\r\n                name += `<${type.format.name}>`;\r\n            } else {\r\n                console.log(\"Template format is null.\");\r\n            }\r\n        }\r\n        return name;\r\n    }\r\n\r\n    _setDataValue(data: Data, value: any, postfix: AST.Expression | null, context: ExecContext) {\r\n        if (value === null) {\r\n            console.log(\"_setDataValue: NULL data\");\r\n            return;\r\n        }\r\n\r\n        let offset = data.offset;\r\n        let typeInfo = data.typeInfo;\r\n        while (postfix) {\r\n            if (postfix instanceof AST.ArrayIndex) {\r\n                if (typeInfo instanceof ArrayInfo) {\r\n                    const idx = postfix.index;\r\n                    if (idx instanceof AST.LiteralExpr) {\r\n                        offset += idx.value * typeInfo.stride;\r\n                    } else {\r\n                        const i = this._evalExpression(idx, context);\r\n                        if (i !== null) {\r\n                            offset += i * typeInfo.stride;\r\n                        } else {\r\n                            console.error(`SetDataValue: Unknown index type`, idx);\r\n                            return;\r\n                        }\r\n                    }\r\n                    typeInfo = typeInfo.format;\r\n                } else {\r\n                    console.error(`SetDataValue: Type ${this._getTypeName(typeInfo)} is not an array`);\r\n                }\r\n            } else if (postfix instanceof AST.StringExpr) {\r\n                const member = postfix.value;\r\n                if (typeInfo instanceof StructInfo) {\r\n                    let found = false;\r\n                    for (const m of typeInfo.members) {\r\n                        if (m.name === member) {\r\n                            offset += m.offset;\r\n                            typeInfo = m.type;\r\n                            found = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!found) {\r\n                        console.error(`SetDataValue: Member ${member} not found`);\r\n                        return;\r\n                    }\r\n                } else if (typeInfo instanceof TypeInfo) {\r\n                    const typeName = this._getTypeName(typeInfo);\r\n                    let element = 0;\r\n                    if (member === \"x\" || member === \"r\") {\r\n                        element = 0;\r\n                    } else if (member === \"y\" || member === \"g\") {\r\n                        element = 1;\r\n                    } else if (member === \"z\" || member === \"b\") {\r\n                        element = 2;\r\n                    } else if (member === \"w\" || member === \"a\") {\r\n                        element = 3;\r\n                    } else {\r\n                        console.error(`SetDataValue: Unknown member ${member}`);\r\n                        return;\r\n                    }\r\n                    if (typeName === \"vec2f\") {\r\n                        new Float32Array(data.buffer, offset, 2)[element] = value;\r\n                        return;\r\n                    } else if (typeName === \"vec3f\") {\r\n                        new Float32Array(data.buffer, offset, 3)[element] = value;\r\n                        return;\r\n                    } else if (typeName === \"vec4f\") {\r\n                        new Float32Array(data.buffer, offset, 4)[element] = value;\r\n                        return;\r\n                    } else if (typeName === \"vec2i\") {\r\n                        new Int32Array(data.buffer, offset, 2)[element] = value;\r\n                        return;\r\n                    } else if (typeName === \"vec3i\") {\r\n                        new Int32Array(data.buffer, offset, 3)[element] = value;\r\n                        return;\r\n                    } else if (typeName === \"vec4i\") {\r\n                        new Int32Array(data.buffer, offset, 4)[element] = value;\r\n                        return;\r\n                    } else if (typeName === \"vec2u\") {\r\n                        new Uint32Array(data.buffer, offset, 2)[element] = value;\r\n                        return;\r\n                    } else if (typeName === \"vec3u\") {\r\n                        new Uint32Array(data.buffer, offset, 3)[element] = value;\r\n                        return;\r\n                    } else if (typeName === \"vec4u\") {\r\n                        new Uint32Array(data.buffer, offset, 4)[element] = value;\r\n                        return;\r\n                    }\r\n                    console.error(`SetDataValue: Type ${typeName} is not a struct`);\r\n                    return;\r\n                }\r\n            } else {\r\n                console.error(`SetDataValue: Unknown postfix type`, postfix);\r\n                return;\r\n            }\r\n            postfix = postfix.postfix;\r\n        }\r\n\r\n        this._setData(data, value, typeInfo, offset, context);\r\n    }\r\n\r\n    _setData(data: Data, value: any, typeInfo: TypeInfo, offset: number, context: ExecContext) {\r\n        const typeName = this._getTypeName(typeInfo);\r\n\r\n        if (typeName === \"f32\") {\r\n            new Float32Array(data.buffer, offset, 1)[0] = value;\r\n            return;\r\n        } else if (typeName === \"i32\") {\r\n            new Int32Array(data.buffer, offset, 1)[0] = value;\r\n            return;\r\n        } else if (typeName === \"u32\") {\r\n            new Uint32Array(data.buffer, offset, 1)[0] = value;\r\n            return;\r\n        } else if (typeName === \"vec2f\") {\r\n            const x = new Float32Array(data.buffer, offset, 2);\r\n            x[0] = value[0];\r\n            x[1] = value[1];\r\n            return;\r\n        } else if (typeName === \"vec3f\") {\r\n            const x = new Float32Array(data.buffer, offset, 3);\r\n            x[0] = value[0];\r\n            x[1] = value[1];\r\n            x[2] = value[2];\r\n            return;\r\n        } else if (typeName === \"vec4f\") {\r\n            const x = new Float32Array(data.buffer, offset, 4);\r\n            x[0] = value[0];\r\n            x[1] = value[1];\r\n            x[2] = value[2];\r\n            x[3] = value[3];\r\n            return;\r\n        } else if (typeName === \"vec2i\") {\r\n            const x = new Int32Array(data.buffer, offset, 2);\r\n            x[0] = value[0];\r\n            x[1] = value[1];\r\n            return;\r\n        } else if (typeName === \"vec3i\") {\r\n            const x = new Int32Array(data.buffer, offset, 3);\r\n            x[0] = value[0];\r\n            x[1] = value[1];\r\n            x[2] = value[2];\r\n            return;\r\n        } else if (typeName === \"vec4i\") {\r\n            const x = new Int32Array(data.buffer, offset, 4);\r\n            x[0] = value[0];\r\n            x[1] = value[1];\r\n            x[2] = value[2];\r\n            x[3] = value[3];\r\n            return;\r\n        } else if (typeName === \"vec2u\") {\r\n            const x = new Uint32Array(data.buffer, offset, 2);\r\n            x[0] = value[0];\r\n            x[1] = value[1];\r\n            return;\r\n        } else if (typeName === \"vec3u\") {\r\n            const x = new Uint32Array(data.buffer, offset, 3);\r\n            x[0] = value[0];\r\n            x[1] = value[1];\r\n            x[2] = value[2];\r\n            return;\r\n        } else if (typeName === \"vec4u\") {\r\n            const x = new Uint32Array(data.buffer, offset, 4);\r\n            x[0] = value[0];\r\n            x[1] = value[1];\r\n            x[2] = value[2];\r\n            x[3] = value[3];\r\n            return;\r\n        }\r\n\r\n        if (value instanceof Data) {\r\n            if (typeInfo === value.typeInfo) {\r\n                const x = new Uint8Array(data.buffer, offset, value.buffer.byteLength);\r\n                x.set(new Uint8Array(value.buffer));\r\n                return;\r\n            } else {\r\n                console.error(`SetDataValue: Type mismatch`, typeName, this._getTypeName(value.typeInfo));\r\n                return;\r\n            }\r\n        }\r\n\r\n        console.error(`SetDataValue: Unknown type ${typeName}`);\r\n    }\r\n\r\n    _getDataValue(data: Data, postfix: AST.Expression | null, context: ExecContext): any {\r\n        let offset = data.offset;\r\n        let typeInfo = data.typeInfo;\r\n        while (postfix) {\r\n            if (postfix instanceof AST.ArrayIndex) {\r\n                if (typeInfo instanceof ArrayInfo) {\r\n                    const idx = postfix.index;\r\n                    if (idx instanceof AST.LiteralExpr) {\r\n                        offset += idx.value * typeInfo.stride;\r\n                    } else {\r\n                        const i = this._evalExpression(idx, context);\r\n                        if (i !== null) {\r\n                            offset += i * typeInfo.stride;\r\n                        } else {\r\n                            console.error(`GetDataValue: Unknown index type`, idx);\r\n                            return null;\r\n                        }\r\n                    }\r\n                    typeInfo = typeInfo.format;\r\n                } else {\r\n                    console.error(`Type ${this._getTypeName(typeInfo)} is not an array`);\r\n                }\r\n            } else if (postfix instanceof AST.StringExpr) {\r\n                const member = postfix.value;\r\n                if (typeInfo instanceof StructInfo) {\r\n                    let found = false;\r\n                    for (const m of typeInfo.members) {\r\n                        if (m.name === member) {\r\n                            offset += m.offset;\r\n                            typeInfo = m.type;\r\n                            found = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!found) {\r\n                        console.error(`GetDataValue: Member ${member} not found`);\r\n                        return null;\r\n                    }\r\n                } else if (typeInfo instanceof TypeInfo) {\r\n                    const typeName = this._getTypeName(typeInfo);\r\n                    let element = 0;\r\n                    if (member === \"x\" || member === \"r\") {\r\n                        element = 0;\r\n                    } else if (member === \"y\" || member === \"g\") {\r\n                        element = 1;\r\n                    } else if (member === \"z\" || member === \"b\") {\r\n                        element = 2;\r\n                    } else if (member === \"w\" || member === \"a\") {\r\n                        element = 3;\r\n                    } else {\r\n                        console.error(`Unknown member ${member}`);\r\n                        return null;\r\n                    }\r\n                    if (typeName === \"vec2f\") {\r\n                        return new Float32Array(data.buffer, offset, 2)[element];\r\n                    } else if (typeName === \"vec3f\") {\r\n                        if ((offset + 12) >= data.buffer.byteLength) {\r\n                            console.log(\"Insufficient buffer data\");\r\n                            return null;\r\n                        }\r\n                        const fa = new Float32Array(data.buffer, offset, 3);\r\n                        return fa[element];\r\n                    } else if (typeName === \"vec4f\") {\r\n                        return new Float32Array(data.buffer, offset, 4)[element];\r\n                    } else if (typeName === \"vec2i\") {\r\n                        return new Int32Array(data.buffer, offset, 2)[element];\r\n                    } else if (typeName === \"vec3i\") {\r\n                        return new Int32Array(data.buffer, offset, 3)[element];\r\n                    } else if (typeName === \"vec4i\") {\r\n                        return new Int32Array(data.buffer, offset, 4)[element];\r\n                    } else if (typeName === \"vec2u\") {\r\n                        const ua = new Uint32Array(data.buffer, offset, 2);\r\n                        return ua[element];\r\n                    } else if (typeName === \"vec3u\") {\r\n                        return new Uint32Array(data.buffer, offset, 3)[element];\r\n                    } else if (typeName === \"vec4u\") {\r\n                        return new Uint32Array(data.buffer, offset, 4)[element];\r\n                    }\r\n                    console.error(`GetDataValue: Type ${typeName} is not a struct`);\r\n                    return null;\r\n                }\r\n            } else {\r\n                console.error(`GetDataValue: Unknown postfix type`, postfix);\r\n                return null;\r\n            }\r\n            postfix = postfix.postfix;\r\n        }\r\n\r\n        const typeName = this._getTypeName(typeInfo);\r\n\r\n        if (typeName === \"f32\") {\r\n            return new Float32Array(data.buffer, offset, 1)[0];\r\n        } else if (typeName === \"i32\") {\r\n            return new Int32Array(data.buffer, offset, 1)[0];\r\n        } else if (typeName === \"u32\") {\r\n            return new Uint32Array(data.buffer, offset, 1)[0];\r\n        } else if (typeName === \"vec2f\") {\r\n            return new Float32Array(data.buffer, offset, 2);\r\n        } else if (typeName === \"vec3f\") {\r\n            return new Float32Array(data.buffer, offset, 3);\r\n        } else if (typeName === \"vec4f\") {\r\n            return new Float32Array(data.buffer, offset, 4);\r\n        } else if (typeName === \"vec2i\") {\r\n            return new Int32Array(data.buffer, offset, 2);\r\n        } else if (typeName === \"vec3i\") {\r\n            return new Int32Array(data.buffer, offset, 3);\r\n        } else if (typeName === \"vec4i\") {\r\n            return new Int32Array(data.buffer, offset, 4);\r\n        } else if (typeName === \"vec2u\") {\r\n            return new Uint32Array(data.buffer, offset, 2);\r\n        } else if (typeName === \"vec3u\") {\r\n            return new Uint32Array(data.buffer, offset, 3);\r\n        } else if (typeName === \"vec4u\") {\r\n            return new Uint32Array(data.buffer, offset, 4);\r\n        }\r\n\r\n        const newData = new Data(data.buffer, typeInfo, offset);\r\n        return newData;\r\n    }\r\n}\r\n"],"names":["Function","Var","AST.ParseContext","AST.VariableExpr","AST.Argument","AST.Function","AST.Discard","AST.Break","AST.GroupingExpr","AST.Continue","AST.StaticAssert","AST.While","AST.Continuing","AST.For","AST.Var","AST.Let","AST.Const","AST.Increment","AST.IncrementOperator","AST.Assign","AST.AssignOperator","AST.Call","AST.Loop","AST.Switch","AST.Case","AST.Default","AST.If","AST.ElseIf","AST.Return","AST.BinaryOperator","AST.UnaryOperator","AST.ArrayIndex","AST.StringExpr","AST.Type","AST.TemplateType","AST.CreateExpr","AST.CallExpr","AST.ConstExpr","AST.LiteralExpr","AST.BitcastExpr","AST.Member","AST.Struct","AST.Override","AST.Diagnostic","AST.Enable","AST.Requires","AST.Alias","AST.PointerType","AST.ArrayType","AST.SamplerType","AST.Attribute","AST._BlockStart","AST._BlockEnd"],"mappings":"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"}