import * as AST from "./wgsl_ast.js";
import { WgslReflect, TypeInfo } from "./wgsl_reflect.js";
declare class Data {
    buffer: ArrayBuffer;
    typeInfo: TypeInfo;
    offset: number;
    textureSize: number[];
    constructor(data: ArrayBuffer | Float32Array | Uint32Array | Int32Array | Uint8Array | Int8Array, typeInfo: TypeInfo, offset?: number, textureSize?: number[]);
}
type ASTVarNode = AST.Let | AST.Var | AST.Argument;
declare class Var {
    name: string;
    value: any;
    node: ASTVarNode | null;
    constructor(n: string, v: any, node: ASTVarNode | null);
    clone(): Var;
    getValue(): any;
}
declare class Function {
    name: string;
    node: AST.Function;
    constructor(node: AST.Function);
    clone(): Function;
}
declare class ExecContext {
    parent: ExecContext | null;
    variables: Map<string, Var>;
    functions: Map<string, Function>;
    constructor(parent?: ExecContext);
    getVariable(name: string): Var | null;
    getFunction(name: string): Function | null;
    createVariable(name: string, value: any, node?: ASTVarNode): void;
    setVariable(name: string, value: any, node?: ASTVarNode): void;
    getVariableValue(name: string): any;
    clone(): ExecContext;
}
export declare class WgslExec {
    ast: Array<AST.Node>;
    context: ExecContext;
    reflection: WgslReflect;
    constructor(code: string, context?: ExecContext);
    getVariableValue(name: string): any;
    execute(config?: Object): void;
    dispatchWorkgroups(kernel: string, dispatchCount: number | number[], bindGroups: Object, config?: Object): void;
    _dispatchWorkgroup(f: Function, workgroup_id: number[], context: ExecContext): void;
    _dispatchExec(f: Function, context: ExecContext): void;
    _getTypeInfo(type: AST.Type): TypeInfo;
    _getTypeName(type: TypeInfo | AST.Type): string;
    _setDataValue(data: Data, value: any, postfix: AST.Expression | null, context: ExecContext): void;
    _setData(data: Data, value: any, typeInfo: TypeInfo, offset: number, context: ExecContext): void;
    _getDataValue(data: Data, postfix: AST.Expression | null, context: ExecContext): any;
    _getVariableName(node: AST.Node, context: ExecContext): string;
    _execStatements(statements: Array<AST.Node>, context: ExecContext): any;
    _execStatement(stmt: AST.Node, context: ExecContext): any;
    _increment(node: AST.Increment, context: ExecContext): any;
    _assign(node: AST.Assign, context: ExecContext): void;
    _function(node: AST.Function, context: ExecContext): void;
    _const(node: AST.Const, context: ExecContext): void;
    _let(node: AST.Let, context: ExecContext): void;
    _var(node: AST.Var, context: ExecContext): void;
    _if(node: AST.If, context: ExecContext): any;
    _for(node: AST.For, context: ExecContext): any;
    _while(node: AST.While, context: ExecContext): any;
    _evalExpression(node: AST.Node, context: ExecContext): any;
    _evalConst(node: AST.ConstExpr, context: ExecContext): any;
    _evalCreate(node: AST.CreateExpr, context: ExecContext): any;
    _evalLiteral(node: AST.LiteralExpr, context: ExecContext): number;
    _getArraySwizzle(value: any, member: string): any;
    _evalVariable(node: AST.VariableExpr, context: ExecContext): any;
    _evalBinaryOp(node: AST.BinaryOperator, context: ExecContext): any;
    _evalCall(node: AST.CallExpr, context: ExecContext): any;
    _callFunction(node: AST.CallExpr, context: ExecContext): any;
    _callConstructorValue(node: AST.CreateExpr, context: ExecContext): any;
    _callConstructorArray(node: AST.CreateExpr, context: ExecContext): any[];
    _callConstructorVec(node: AST.CallExpr | AST.CreateExpr, context: ExecContext): any;
    _callConstructorMatrix(node: AST.CallExpr | AST.CreateExpr, context: ExecContext): any[];
    _callAll(node: AST.CallExpr, context: ExecContext): boolean;
    _callAny(node: AST.CallExpr, context: ExecContext): any;
    _callSelect(node: AST.CallExpr, context: ExecContext): any;
    _callArrayLength(node: AST.CallExpr, context: ExecContext): any;
    _callAbs(node: AST.CallExpr, context: ExecContext): any;
    _callAcos(node: AST.CallExpr, context: ExecContext): any;
    _callAcosh(node: AST.CallExpr, context: ExecContext): any;
    _callAsin(node: AST.CallExpr, context: ExecContext): any;
    _callAsinh(node: AST.CallExpr, context: ExecContext): any;
    _callAtan(node: AST.CallExpr, context: ExecContext): any;
    _callAtanh(node: AST.CallExpr, context: ExecContext): any;
    _callAtan2(node: AST.CallExpr, context: ExecContext): any;
    _callCeil(node: AST.CallExpr, context: ExecContext): any;
    _callClamp(node: AST.CallExpr, context: ExecContext): any;
    _callCos(node: AST.CallExpr, context: ExecContext): any;
    _callCosh(node: AST.CallExpr, context: ExecContext): any;
    _callCountLeadingZeros(node: AST.CallExpr, context: ExecContext): any;
    _callCountOneBits(node: AST.CallExpr, context: ExecContext): number;
    _callCountTrailingZeros(node: AST.CallExpr, context: ExecContext): number;
    _callCross(node: AST.CallExpr, context: ExecContext): any;
    _callDegrees(node: AST.CallExpr, context: ExecContext): any;
    _callDeterminant(node: AST.CallExpr, context: ExecContext): any;
    _callDistance(node: AST.CallExpr, context: ExecContext): number;
    _callDot(node: AST.CallExpr, context: ExecContext): number;
    _callDot4U8Packed(node: AST.CallExpr, context: ExecContext): any;
    _callDot4I8Packed(node: AST.CallExpr, context: ExecContext): any;
    _callExp(node: AST.CallExpr, context: ExecContext): any;
    _callExp2(node: AST.CallExpr, context: ExecContext): any;
    _callExtractBits(node: AST.CallExpr, context: ExecContext): any;
    _callFaceForward(node: AST.CallExpr, context: ExecContext): any;
    _callFirstLeadingBit(node: AST.CallExpr, context: ExecContext): any;
    _callFirstTrailingBit(node: AST.CallExpr, context: ExecContext): any;
    _callFloor(node: AST.CallExpr, context: ExecContext): any;
    _callFma(node: AST.CallExpr, context: ExecContext): any;
    _callFract(node: AST.CallExpr, context: ExecContext): any;
    _callFrexp(node: AST.CallExpr, context: ExecContext): any;
    _callInsertBits(node: AST.CallExpr, context: ExecContext): any;
    _callInverseSqrt(node: AST.CallExpr, context: ExecContext): any;
    _callLdexp(node: AST.CallExpr, context: ExecContext): any;
    _callLength(node: AST.CallExpr, context: ExecContext): number;
    _callLog(node: AST.CallExpr, context: ExecContext): any;
    _callLog2(node: AST.CallExpr, context: ExecContext): any;
    _callMax(node: AST.CallExpr, context: ExecContext): any;
    _callMin(node: AST.CallExpr, context: ExecContext): any;
    _callMix(node: AST.CallExpr, context: ExecContext): any;
    _callModf(node: AST.CallExpr, context: ExecContext): any;
    _callNormalize(node: AST.CallExpr, context: ExecContext): any;
    _callPow(node: AST.CallExpr, context: ExecContext): any;
    _callQuantizeToF16(node: AST.CallExpr, context: ExecContext): any;
    _callRadians(node: AST.CallExpr, context: ExecContext): any;
    _callReflect(node: AST.CallExpr, context: ExecContext): any;
    _callRefract(node: AST.CallExpr, context: ExecContext): any;
    _callReverseBits(node: AST.CallExpr, context: ExecContext): any;
    _callRound(node: AST.CallExpr, context: ExecContext): any;
    _callSaturate(node: AST.CallExpr, context: ExecContext): any;
    _callSign(node: AST.CallExpr, context: ExecContext): any;
    _callSin(node: AST.CallExpr, context: ExecContext): any;
    _callSinh(node: AST.CallExpr, context: ExecContext): any;
    _callSmoothStep(node: AST.CallExpr, context: ExecContext): number;
    _callSqrt(node: AST.CallExpr, context: ExecContext): any;
    _callStep(node: AST.CallExpr, context: ExecContext): any;
    _callTan(node: AST.CallExpr, context: ExecContext): any;
    _callTanh(node: AST.CallExpr, context: ExecContext): any;
    _callTranspose(node: AST.CallExpr, context: ExecContext): any;
    _callTrunc(node: AST.CallExpr, context: ExecContext): any;
    _callDpdx(node: AST.CallExpr, context: ExecContext): any;
    _callDpdxCoarse(node: AST.CallExpr, context: ExecContext): any;
    _callDpdxFine(node: AST.CallExpr, context: ExecContext): any;
    _callDpdy(node: AST.CallExpr, context: ExecContext): any;
    _callDpdyCoarse(node: AST.CallExpr, context: ExecContext): any;
    _callDpdyFine(node: AST.CallExpr, context: ExecContext): any;
    _callFwidth(node: AST.CallExpr, context: ExecContext): any;
    _callFwidthCoarse(node: AST.CallExpr, context: ExecContext): any;
    _callFwidthFine(node: AST.CallExpr, context: ExecContext): any;
    _callTextureDimensions(node: AST.CallExpr, context: ExecContext): number[];
    _callTextureGather(node: AST.CallExpr, context: ExecContext): any;
    _callTextureGatherCompare(node: AST.CallExpr, context: ExecContext): any;
    _callTextureLoad(node: AST.CallExpr, context: ExecContext): number[];
    _callTextureNumLayers(node: AST.CallExpr, context: ExecContext): any;
    _callTextureNumLevels(node: AST.CallExpr, context: ExecContext): any;
    _callTextureNumSamples(node: AST.CallExpr, context: ExecContext): any;
    _callTextureSample(node: AST.CallExpr, context: ExecContext): any;
    _callTextureSampleBias(node: AST.CallExpr, context: ExecContext): any;
    _callTextureSampleCompare(node: AST.CallExpr, context: ExecContext): any;
    _callTextureSampleCompareLevel(node: AST.CallExpr, context: ExecContext): any;
    _callTextureSampleGrad(node: AST.CallExpr, context: ExecContext): any;
    _callTextureSampleLevel(node: AST.CallExpr, context: ExecContext): any;
    _callTextureSampleBaseClampToEdge(node: AST.CallExpr, context: ExecContext): any;
    _callTextureStore(node: AST.CallExpr, context: ExecContext): any;
    _callAtomicLoad(node: AST.CallExpr, context: ExecContext): any;
    _callAtomicStore(node: AST.CallExpr, context: ExecContext): any;
    _callAtomicAdd(node: AST.CallExpr, context: ExecContext): any;
    _callAtomicSub(node: AST.CallExpr, context: ExecContext): any;
    _callAtomicMax(node: AST.CallExpr, context: ExecContext): any;
    _callAtomicMin(node: AST.CallExpr, context: ExecContext): any;
    _callAtomicAnd(node: AST.CallExpr, context: ExecContext): any;
    _callAtomicOr(node: AST.CallExpr, context: ExecContext): any;
    _callAtomicXor(node: AST.CallExpr, context: ExecContext): any;
    _callAtomicExchange(node: AST.CallExpr, context: ExecContext): any;
    _callAtomicCompareExchangeWeak(node: AST.CallExpr, context: ExecContext): any;
    _callPack4x8snorm(node: AST.CallExpr, context: ExecContext): any;
    _callPack4x8unorm(node: AST.CallExpr, context: ExecContext): any;
    _callPack4xI8(node: AST.CallExpr, context: ExecContext): any;
    _callPack4xU8(node: AST.CallExpr, context: ExecContext): any;
    _callPack4x8Clamp(node: AST.CallExpr, context: ExecContext): any;
    _callPack4xU8Clamp(node: AST.CallExpr, context: ExecContext): any;
    _callPack2x16snorm(node: AST.CallExpr, context: ExecContext): any;
    _callPack2x16unorm(node: AST.CallExpr, context: ExecContext): any;
    _callPack2x16float(node: AST.CallExpr, context: ExecContext): any;
    _callUnpack4x8snorm(node: AST.CallExpr, context: ExecContext): any;
    _callUnpack4x8unorm(node: AST.CallExpr, context: ExecContext): any;
    _callUnpack4xI8(node: AST.CallExpr, context: ExecContext): any;
    _callUnpack4xU8(node: AST.CallExpr, context: ExecContext): any;
    _callUnpack2x16snorm(node: AST.CallExpr, context: ExecContext): any;
    _callUnpack2x16unorm(node: AST.CallExpr, context: ExecContext): any;
    _callUnpack2x16float(node: AST.CallExpr, context: ExecContext): any;
    _callStorageBarrier(node: AST.CallExpr, context: ExecContext): any;
    _callTextureBarrier(node: AST.CallExpr, context: ExecContext): any;
    _callWorkgroupBarrier(node: AST.CallExpr, context: ExecContext): any;
    _callWorkgroupUniformLoad(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupAdd(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupExclusiveAdd(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupInclusiveAdd(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupAll(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupAnd(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupAny(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupBallot(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupBroadcast(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupBroadcastFirst(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupElect(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupMax(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupMin(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupMul(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupExclusiveMul(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupInclusiveMul(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupOr(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupShuffle(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupShuffleDown(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupShuffleUp(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupShuffleXor(node: AST.CallExpr, context: ExecContext): any;
    _callSubgroupXor(node: AST.CallExpr, context: ExecContext): any;
    _callQuadBroadcast(node: AST.CallExpr, context: ExecContext): any;
    _callQuadSwapDiagonal(node: AST.CallExpr, context: ExecContext): any;
    _callQuadSwapX(node: AST.CallExpr, context: ExecContext): any;
    _callQuadSwapY(node: AST.CallExpr, context: ExecContext): any;
}
export {};
