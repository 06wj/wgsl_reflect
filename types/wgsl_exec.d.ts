import * as AST from "./wgsl_ast.js";
import { WgslReflect, TypeInfo } from "./wgsl_reflect.js";
import { ExecContext, FunctionRef } from "./exec/exec_context.js";
import { ExecInterface } from "./exec/exec_interface.js";
import { BuiltinFunctions } from "./exec/builtin_functions.js";
import { Data } from "./exec/data.js";
export declare class WgslExec extends ExecInterface {
    ast: Array<AST.Node>;
    context: ExecContext;
    reflection: WgslReflect;
    builtins: BuiltinFunctions;
    typeInfo: Object;
    constructor(code: string, context?: ExecContext);
    getVariableValue(name: string): number | number[] | null;
    execute(config?: Object): void;
    dispatchWorkgroups(kernel: string, dispatchCount: number | number[], bindGroups: Object, config?: Object): void;
    static _breakObj: Data;
    static _continueObj: Data;
    execStatement(stmt: AST.Node, context: ExecContext): Data | null;
    evalExpression(node: AST.Node, context: ExecContext): Data | null;
    getTypeInfo(type: AST.Type | string): TypeInfo | null;
    getTypeName(type: TypeInfo | AST.Type): string;
    _setOverrides(constants: Object, context: ExecContext): void;
    _dispatchWorkgroup(f: FunctionRef, workgroup_id: number[], context: ExecContext): void;
    _dispatchExec(f: FunctionRef, context: ExecContext): void;
    _getVariableName(node: AST.Node, context: ExecContext): string | null;
    _execStatements(statements: Array<AST.Node>, context: ExecContext): Data | null;
    _call(node: AST.Call, context: ExecContext): void;
    _increment(node: AST.Increment, context: ExecContext): void;
    _assign(node: AST.Assign, context: ExecContext): void;
    _function(node: AST.Function, context: ExecContext): void;
    _const(node: AST.Const, context: ExecContext): void;
    _let(node: AST.Let, context: ExecContext): void;
    _var(node: AST.Var, context: ExecContext): void;
    _if(node: AST.If, context: ExecContext): Data | null;
    _getScalarValue(v: Data | null): number;
    _for(node: AST.For, context: ExecContext): Data | null;
    _loop(node: AST.Loop, context: ExecContext): Data | null;
    _while(node: AST.While, context: ExecContext): Data | null;
    _evalBitcast(node: AST.BitcastExpr, context: ExecContext): Data | null;
    _evalConst(node: AST.ConstExpr, context: ExecContext): Data | null;
    _evalCreate(node: AST.CreateExpr, context: ExecContext): Data | null;
    _evalLiteral(node: AST.LiteralExpr, context: ExecContext): Data | null;
    _evalVariable(node: AST.VariableExpr, context: ExecContext): Data | null;
    static _priority: Map<string, number>;
    _maxFormatTypeInfo(x: TypeInfo[]): TypeInfo | null;
    _evalUnaryOp(node: AST.UnaryOperator, context: ExecContext): Data | null;
    _evalBinaryOp(node: AST.BinaryOperator, context: ExecContext): Data | null;
    _evalCall(node: AST.CallExpr, context: ExecContext): Data | null;
    _callBuiltinFunction(node: AST.CallExpr | AST.Call, context: ExecContext): Data | null;
    _callConstructorValue(node: AST.CreateExpr, context: ExecContext): Data | null;
    _callConstructorVec(node: AST.CreateExpr | AST.LiteralExpr, context: ExecContext): Data | null;
    _callConstructorMatrix(node: AST.CreateExpr | AST.LiteralExpr, context: ExecContext): Data | null;
}
