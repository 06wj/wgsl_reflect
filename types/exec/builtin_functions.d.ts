import * as AST from "../wgsl_ast.js";
import { Data } from "./data.js";
import { ExecContext } from "./exec_context.js";
import { ExecInterface } from "./exec_interface.js";
import { TypeInfo } from "../wgsl_reflect.js";
export declare class BuiltinFunctions {
    exec: ExecInterface;
    constructor(exec: ExecInterface);
    getTypeInfo(type: string): TypeInfo | null;
    All(node: AST.CallExpr, context: ExecContext): Data;
    Any(node: AST.CallExpr, context: ExecContext): Data;
    Select(node: AST.CallExpr, context: ExecContext): Data;
    ArrayLength(node: AST.CallExpr, context: ExecContext): Data;
    Abs(node: AST.CallExpr, context: ExecContext): Data;
    Acos(node: AST.CallExpr, context: ExecContext): Data;
    Acosh(node: AST.CallExpr, context: ExecContext): Data;
    Asin(node: AST.CallExpr, context: ExecContext): Data;
    Asinh(node: AST.CallExpr, context: ExecContext): Data;
    Atan(node: AST.CallExpr, context: ExecContext): Data;
    Atanh(node: AST.CallExpr, context: ExecContext): Data;
    Atan2(node: AST.CallExpr, context: ExecContext): Data;
    Ceil(node: AST.CallExpr, context: ExecContext): Data;
    _clamp(value: number, min: number, max: number): number;
    Clamp(node: AST.CallExpr, context: ExecContext): Data;
    Cos(node: AST.CallExpr, context: ExecContext): Data;
    Cosh(node: AST.CallExpr, context: ExecContext): Data;
    CountLeadingZeros(node: AST.CallExpr, context: ExecContext): Data;
    _countOneBits(value: number): number;
    CountOneBits(node: AST.CallExpr, context: ExecContext): Data;
    _countTrailingZeros(value: number): number;
    CountTrailingZeros(node: AST.CallExpr, context: ExecContext): Data;
    Cross(node: AST.CallExpr, context: ExecContext): Data;
    Degrees(node: AST.CallExpr, context: ExecContext): Data;
    Determinant(node: AST.CallExpr, context: ExecContext): Data;
    Distance(node: AST.CallExpr, context: ExecContext): Data;
    _dot(e1: number[], e2: number[]): number;
    Dot(node: AST.CallExpr, context: ExecContext): Data;
    Dot4U8Packed(node: AST.CallExpr, context: ExecContext): Data;
    Dot4I8Packed(node: AST.CallExpr, context: ExecContext): Data;
    Exp(node: AST.CallExpr, context: ExecContext): Data;
    Exp2(node: AST.CallExpr, context: ExecContext): Data;
    ExtractBits(node: AST.CallExpr, context: ExecContext): Data;
    FaceForward(node: AST.CallExpr, context: ExecContext): Data;
    FirstLeadingBit(node: AST.CallExpr, context: ExecContext): Data;
    FirstTrailingBit(node: AST.CallExpr, context: ExecContext): Data;
    Floor(node: AST.CallExpr, context: ExecContext): Data;
    Fma(node: AST.CallExpr, context: ExecContext): Data;
    Fract(node: AST.CallExpr, context: ExecContext): Data;
    Frexp(node: AST.CallExpr, context: ExecContext): Data;
    InsertBits(node: AST.CallExpr, context: ExecContext): Data;
    InverseSqrt(node: AST.CallExpr, context: ExecContext): Data;
    Ldexp(node: AST.CallExpr, context: ExecContext): Data;
    Length(node: AST.CallExpr, context: ExecContext): Data;
    Log(node: AST.CallExpr, context: ExecContext): Data;
    Log2(node: AST.CallExpr, context: ExecContext): Data;
    Max(node: AST.CallExpr, context: ExecContext): Data;
    Min(node: AST.CallExpr, context: ExecContext): Data;
    Mix(node: AST.CallExpr, context: ExecContext): Data;
    Modf(node: AST.CallExpr, context: ExecContext): Data;
    Normalize(node: AST.CallExpr, context: ExecContext): Data;
    Pow(node: AST.CallExpr, context: ExecContext): Data;
    QuantizeToF16(node: AST.CallExpr, context: ExecContext): Data;
    Radians(node: AST.CallExpr, context: ExecContext): Data;
    Reflect(node: AST.CallExpr, context: ExecContext): Data;
    Refract(node: AST.CallExpr, context: ExecContext): Data;
    ReverseBits(node: AST.CallExpr, context: ExecContext): Data;
    Round(node: AST.CallExpr, context: ExecContext): Data;
    Saturate(node: AST.CallExpr, context: ExecContext): Data;
    Sign(node: AST.CallExpr, context: ExecContext): Data;
    Sin(node: AST.CallExpr, context: ExecContext): Data;
    Sinh(node: AST.CallExpr, context: ExecContext): Data;
    _smoothstep(edge0: number, edge1: number, x: number): number;
    SmoothStep(node: AST.CallExpr, context: ExecContext): Data;
    Sqrt(node: AST.CallExpr, context: ExecContext): Data;
    Step(node: AST.CallExpr, context: ExecContext): Data;
    Tan(node: AST.CallExpr, context: ExecContext): Data;
    Tanh(node: AST.CallExpr, context: ExecContext): Data;
    Transpose(node: AST.CallExpr, context: ExecContext): Data;
    Trunc(node: AST.CallExpr, context: ExecContext): Data;
    Dpdx(node: AST.CallExpr, context: ExecContext): Data;
    DpdxCoarse(node: AST.CallExpr, context: ExecContext): Data;
    DpdxFine(node: AST.CallExpr, context: ExecContext): Data;
    Dpdy(node: AST.CallExpr, context: ExecContext): Data;
    DpdyCoarse(node: AST.CallExpr, context: ExecContext): Data;
    DpdyFine(node: AST.CallExpr, context: ExecContext): Data;
    Fwidth(node: AST.CallExpr, context: ExecContext): Data;
    FwidthCoarse(node: AST.CallExpr, context: ExecContext): Data;
    FwidthFine(node: AST.CallExpr, context: ExecContext): Data;
    TextureDimensions(node: AST.CallExpr, context: ExecContext): Data;
    TextureGather(node: AST.CallExpr, context: ExecContext): Data;
    TextureGatherCompare(node: AST.CallExpr, context: ExecContext): Data;
    TextureLoad(node: AST.CallExpr, context: ExecContext): Data;
    TextureNumLayers(node: AST.CallExpr, context: ExecContext): Data;
    TextureNumLevels(node: AST.CallExpr, context: ExecContext): Data;
    TextureNumSamples(node: AST.CallExpr, context: ExecContext): Data;
    TextureSample(node: AST.CallExpr, context: ExecContext): Data;
    TextureSampleBias(node: AST.CallExpr, context: ExecContext): Data;
    TextureSampleCompare(node: AST.CallExpr, context: ExecContext): Data;
    TextureSampleCompareLevel(node: AST.CallExpr, context: ExecContext): Data;
    TextureSampleGrad(node: AST.CallExpr, context: ExecContext): Data;
    TextureSampleLevel(node: AST.CallExpr, context: ExecContext): Data;
    TextureSampleBaseClampToEdge(node: AST.CallExpr, context: ExecContext): Data;
    TextureStore(node: AST.CallExpr, context: ExecContext): Data;
    AtomicLoad(node: AST.CallExpr, context: ExecContext): Data;
    AtomicStore(node: AST.CallExpr, context: ExecContext): Data;
    AtomicAdd(node: AST.CallExpr, context: ExecContext): Data;
    AtomicSub(node: AST.CallExpr, context: ExecContext): Data;
    AtomicMax(node: AST.CallExpr, context: ExecContext): Data;
    AtomicMin(node: AST.CallExpr, context: ExecContext): Data;
    AtomicAnd(node: AST.CallExpr, context: ExecContext): Data;
    AtomicOr(node: AST.CallExpr, context: ExecContext): Data;
    AtomicXor(node: AST.CallExpr, context: ExecContext): Data;
    AtomicExchange(node: AST.CallExpr, context: ExecContext): Data;
    AtomicCompareExchangeWeak(node: AST.CallExpr, context: ExecContext): Data;
    Pack4x8snorm(node: AST.CallExpr, context: ExecContext): Data;
    Pack4x8unorm(node: AST.CallExpr, context: ExecContext): Data;
    Pack4xI8(node: AST.CallExpr, context: ExecContext): Data;
    Pack4xU8(node: AST.CallExpr, context: ExecContext): Data;
    Pack4x8Clamp(node: AST.CallExpr, context: ExecContext): Data;
    Pack4xU8Clamp(node: AST.CallExpr, context: ExecContext): Data;
    Pack2x16snorm(node: AST.CallExpr, context: ExecContext): Data;
    Pack2x16unorm(node: AST.CallExpr, context: ExecContext): Data;
    Pack2x16float(node: AST.CallExpr, context: ExecContext): Data;
    Unpack4x8snorm(node: AST.CallExpr, context: ExecContext): Data;
    Unpack4x8unorm(node: AST.CallExpr, context: ExecContext): Data;
    Unpack4xI8(node: AST.CallExpr, context: ExecContext): Data;
    Unpack4xU8(node: AST.CallExpr, context: ExecContext): Data;
    Unpack2x16snorm(node: AST.CallExpr, context: ExecContext): Data;
    Unpack2x16unorm(node: AST.CallExpr, context: ExecContext): Data;
    Unpack2x16float(node: AST.CallExpr, context: ExecContext): Data;
    StorageBarrier(node: AST.CallExpr, context: ExecContext): Data;
    TextureBarrier(node: AST.CallExpr, context: ExecContext): Data;
    WorkgroupBarrier(node: AST.CallExpr, context: ExecContext): Data;
    WorkgroupUniformLoad(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupAdd(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupExclusiveAdd(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupInclusiveAdd(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupAll(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupAnd(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupAny(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupBallot(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupBroadcast(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupBroadcastFirst(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupElect(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupMax(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupMin(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupMul(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupExclusiveMul(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupInclusiveMul(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupOr(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupShuffle(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupShuffleDown(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupShuffleUp(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupShuffleXor(node: AST.CallExpr, context: ExecContext): Data;
    SubgroupXor(node: AST.CallExpr, context: ExecContext): Data;
    QuadBroadcast(node: AST.CallExpr, context: ExecContext): Data;
    QuadSwapDiagonal(node: AST.CallExpr, context: ExecContext): Data;
    QuadSwapX(node: AST.CallExpr, context: ExecContext): Data;
    QuadSwapY(node: AST.CallExpr, context: ExecContext): Data;
}
